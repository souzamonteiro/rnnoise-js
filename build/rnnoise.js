
var NoiseModule = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
  return (
function(NoiseModule) {
  NoiseModule = NoiseModule || {};



// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof NoiseModule !== 'undefined' ? NoiseModule : {};

// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
Module['ready'] = new Promise(function(resolve, reject) {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_malloc')) {
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, get: function() { abort('You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, set: function() { abort('You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_rnnoise_get_size')) {
        Object.defineProperty(Module['ready'], '_rnnoise_get_size', { configurable: true, get: function() { abort('You are getting _rnnoise_get_size on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_rnnoise_get_size', { configurable: true, set: function() { abort('You are setting _rnnoise_get_size on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_rnnoise_get_frame_size')) {
        Object.defineProperty(Module['ready'], '_rnnoise_get_frame_size', { configurable: true, get: function() { abort('You are getting _rnnoise_get_frame_size on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_rnnoise_get_frame_size', { configurable: true, set: function() { abort('You are setting _rnnoise_get_frame_size on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_rnnoise_init')) {
        Object.defineProperty(Module['ready'], '_rnnoise_init', { configurable: true, get: function() { abort('You are getting _rnnoise_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_rnnoise_init', { configurable: true, set: function() { abort('You are setting _rnnoise_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_rnnoise_create')) {
        Object.defineProperty(Module['ready'], '_rnnoise_create', { configurable: true, get: function() { abort('You are getting _rnnoise_create on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_rnnoise_create', { configurable: true, set: function() { abort('You are setting _rnnoise_create on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_rnnoise_destroy')) {
        Object.defineProperty(Module['ready'], '_rnnoise_destroy', { configurable: true, get: function() { abort('You are getting _rnnoise_destroy on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_rnnoise_destroy', { configurable: true, set: function() { abort('You are setting _rnnoise_destroy on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_rnnoise_process_frame')) {
        Object.defineProperty(Module['ready'], '_rnnoise_process_frame', { configurable: true, get: function() { abort('You are getting _rnnoise_process_frame on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_rnnoise_process_frame', { configurable: true, set: function() { abort('You are setting _rnnoise_process_frame on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_rnnoise_model_from_file')) {
        Object.defineProperty(Module['ready'], '_rnnoise_model_from_file', { configurable: true, get: function() { abort('You are getting _rnnoise_model_from_file on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_rnnoise_model_from_file', { configurable: true, set: function() { abort('You are setting _rnnoise_model_from_file on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_rnnoise_model_free')) {
        Object.defineProperty(Module['ready'], '_rnnoise_model_free', { configurable: true, get: function() { abort('You are getting _rnnoise_model_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_rnnoise_model_free', { configurable: true, set: function() { abort('You are setting _rnnoise_model_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_get_end')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_end', { configurable: true, get: function() { abort('You are getting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_end', { configurable: true, set: function() { abort('You are setting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_get_free')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_free', { configurable: true, get: function() { abort('You are getting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_free', { configurable: true, set: function() { abort('You are setting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_init')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_init', { configurable: true, get: function() { abort('You are getting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_init', { configurable: true, set: function() { abort('You are setting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackSave')) {
        Object.defineProperty(Module['ready'], '_stackSave', { configurable: true, get: function() { abort('You are getting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackSave', { configurable: true, set: function() { abort('You are setting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackRestore')) {
        Object.defineProperty(Module['ready'], '_stackRestore', { configurable: true, get: function() { abort('You are getting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackRestore', { configurable: true, set: function() { abort('You are setting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackAlloc')) {
        Object.defineProperty(Module['ready'], '_stackAlloc', { configurable: true, get: function() { abort('You are getting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackAlloc', { configurable: true, set: function() { abort('You are setting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___wasm_call_ctors')) {
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, get: function() { abort('You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, set: function() { abort('You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_fflush')) {
        Object.defineProperty(Module['ready'], '_fflush', { configurable: true, get: function() { abort('You are getting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_fflush', { configurable: true, set: function() { abort('You are setting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___errno_location')) {
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, get: function() { abort('You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, set: function() { abort('You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], 'onRuntimeInitialized')) {
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, get: function() { abort('You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, set: function() { abort('You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

// Normally we don't log exceptions but instead let them bubble out the top
// level where the embedding environment (e.g. the browser) can handle
// them.
// However under v8 and node we sometimes exit the process direcly in which case
// its up to use us to log the exception before exiting.
// If we fix https://github.com/emscripten-core/emscripten/issues/15080
// this may no longer be needed under node.
function logExceptionOnExit(e) {
  if (e instanceof ExitStatus) return;
  var toLog = e;
  if (e && typeof e === 'object' && e.stack) {
    toLog = [e, e.stack];
  }
  err('exiting due to exception: ' + toLog);
}

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (!(typeof process === 'object' && typeof require === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


read_ = function shell_read(filename, binary) {
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
};

readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

readAsync = function readAsync(filename, onload, onerror) {
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  nodeFS['readFile'](filename, function(err, data) {
    if (err) onerror(err);
    else onload(data.buffer);
  });
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  // Without this older versions of node (< v15) will log unhandled rejections
  // but return 0, which is not normally the desired behaviour.  This is
  // not be needed with node v15 and about because it is now the default
  // behaviour:
  // See https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode
  process['on']('unhandledRejection', function(reason) { throw reason; });

  quit_ = function(status, toThrow) {
    if (keepRuntimeAlive()) {
      process['exitCode'] = status;
      throw toThrow;
    }
    logExceptionOnExit(toThrow);
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process === 'object' && typeof require === 'function') || typeof window === 'object' || typeof importScripts === 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  readAsync = function readAsync(f, onload, onerror) {
    setTimeout(function() { onload(readBinary(f)); }, 0);
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status, toThrow) {
      logExceptionOnExit(toThrow);
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window === 'object' || typeof importScripts === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
    };
  }

  readAsync = function(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];
if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) {
  Object.defineProperty(Module, 'arguments', {
    configurable: true,
    get: function() {
      abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) {
  Object.defineProperty(Module, 'thisProgram', {
    configurable: true,
    get: function() {
      abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['quit']) quit_ = Module['quit'];
if (!Object.getOwnPropertyDescriptor(Module, 'quit')) {
  Object.defineProperty(Module, 'quit', {
    configurable: true,
    get: function() {
      abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');

if (!Object.getOwnPropertyDescriptor(Module, 'read')) {
  Object.defineProperty(Module, 'read', {
    configurable: true,
    get: function() {
      abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) {
  Object.defineProperty(Module, 'readAsync', {
    configurable: true,
    get: function() {
      abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) {
  Object.defineProperty(Module, 'readBinary', {
    configurable: true,
    get: function() {
      abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) {
  Object.defineProperty(Module, 'setWindowTitle', {
    configurable: true,
    get: function() {
      abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';
function alignMemory() { abort('`alignMemory` is now a library function and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line'); }

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-s ENVIRONMENT` to enable.");




var STACK_ALIGN = 16;

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) {
  Object.defineProperty(Module, 'wasmBinary', {
    configurable: true,
    get: function() {
      abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var noExitRuntime = Module['noExitRuntime'] || true;
if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) {
  Object.defineProperty(Module, 'noExitRuntime', {
    configurable: true,
    get: function() {
      abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var fimport$0 = env.emscripten_resize_heap;
 var fimport$1 = env.emscripten_memcpy_big;
 var global$0 = 5340720;
 var global$1 = 0;
 var global$2 = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $121();
 }
 
 function $1($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2]);
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  $117(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
  label$1 : {
   if (!(Math_fround(HEAPF32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 32 | 0) >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(0 | 0);
     HEAP32[($5_1 + 28 | 0) >> 2] = 0;
     label$4 : {
      label$5 : while (1) {
       if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$4
       }
       HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 32 | 0) >> 2] | 0) - (HEAP32[($5_1 + 28 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2])));
       HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
       continue label$5;
      };
     }
     HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2]));
     HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(Math_fround(-Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2])) / Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]));
     HEAPF32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
     HEAP32[($5_1 + 28 | 0) >> 2] = 0;
     label$6 : {
      label$7 : while (1) {
       if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0) >> 1 | 0 | 0) & 1 | 0)) {
        break label$6
       }
       HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
       HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 32 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($5_1 + 28 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2]);
       HEAPF32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])));
       HEAPF32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 32 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($5_1 + 28 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])));
       HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
       continue label$7;
      };
     }
     HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) - Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2])) * Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2])));
     label$8 : {
      if (!(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) < Math_fround(Math_fround(1.0000000474974513e-03) * Math_fround(HEAPF32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2])) & 1 | 0)) {
       break label$8
      }
      break label$2;
     }
     HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
  }
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $2($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $9_1 = 0, $22_1 = 0, $13_1 = 0, $138 = 0, $142 = 0;
  $9_1 = global$0 - 64 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 24 | 0) >> 2] = (HEAP32[($9_1 + 40 | 0) >> 2] | 0) - (HEAP32[($9_1 + 44 | 0) >> 2] | 0) | 0;
  $13_1 = HEAP32[($9_1 + 40 | 0) >> 2] | 0;
  HEAP32[($9_1 + 12 | 0) >> 2] = $9_1;
  $22_1 = $9_1 - ((($13_1 << 2 | 0) + 15 | 0) & -16 | 0) | 0;
  global$0 = $22_1;
  HEAP32[($9_1 + 8 | 0) >> 2] = $13_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($9_1 + 48 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($9_1 + 16 | 0) >> 2] = HEAP32[($9_1 + 60 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($9_1 + 32 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAPF32[($22_1 + ((HEAP32[($9_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($9_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
     HEAP32[($9_1 + 32 | 0) >> 2] = (HEAP32[($9_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($9_1 + 32 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAPF32[($22_1 + ((HEAP32[($9_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($9_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($9_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
     HEAPF32[($22_1 + ((((HEAP32[($9_1 + 40 | 0) >> 2] | 0) - (HEAP32[($9_1 + 32 | 0) >> 2] | 0) | 0) - 1 | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($9_1 + 60 | 0) >> 2] | 0) + ((((HEAP32[($9_1 + 40 | 0) >> 2] | 0) - (HEAP32[($9_1 + 32 | 0) >> 2] | 0) | 0) - 1 | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($9_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
     HEAP32[($9_1 + 32 | 0) >> 2] = (HEAP32[($9_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   HEAP32[($9_1 + 16 | 0) >> 2] = $22_1;
  }
  HEAP32[($9_1 + 20 | 0) >> 2] = 0;
  $37(HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 44 | 0) >> 2] | 0) + 1 | 0 | 0);
  HEAP32[($9_1 + 28 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($9_1 + 28 | 0) >> 2] | 0 | 0) <= (HEAP32[($9_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[($9_1 + 32 | 0) >> 2] = (HEAP32[($9_1 + 28 | 0) >> 2] | 0) + (HEAP32[($9_1 + 24 | 0) >> 2] | 0) | 0;
    HEAPF32[($9_1 + 36 | 0) >> 2] = Math_fround(0 | 0);
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAPF32[($9_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($9_1 + 36 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[((HEAP32[($9_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($9_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 32 | 0) >> 2] | 0) - (HEAP32[($9_1 + 28 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2])));
      HEAP32[($9_1 + 32 | 0) >> 2] = (HEAP32[($9_1 + 32 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
    $138 = (HEAP32[($9_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0;
    HEAPF32[$138 >> 2] = Math_fround(Math_fround(HEAPF32[$138 >> 2]) + Math_fround(HEAPF32[($9_1 + 36 | 0) >> 2]));
    HEAP32[($9_1 + 28 | 0) >> 2] = (HEAP32[($9_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  $142 = HEAP32[($9_1 + 20 | 0) >> 2] | 0;
  HEAP32[($9_1 + 12 | 0) >> 2] | 0;
  global$0 = $9_1 + 64 | 0;
  return $142 | 0;
 }
 
 function $3($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $26_1 = 0, $35_1 = 0, $58_1 = 0, $75_1 = 0, $92_1 = 0, $109_1 = 0, $125_1 = 0, $134 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 120 | 0) >> 2] = $1_1;
  $117($4_1 + 16 | 0 | 0, 0 | 0, 88 | 0) | 0;
  HEAP32[($4_1 + 116 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) < (21 | 0) & 1 | 0)) {
     break label$1
    }
    $26_1 = 16;
    $35_1 = 16;
    HEAP32[($4_1 + 8 | 0) >> 2] = ((((HEAPU16[(1024 + (((HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0) << $26_1 | 0) >> $26_1 | 0) - (((HEAPU16[(1024 + ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $35_1 | 0) >> $35_1 | 0) | 0) << 2 | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) / Math_fround(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0));
      $58_1 = 16;
      $75_1 = 16;
      HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($4_1 + 120 | 0) >> 2] | 0) + ((((((HEAPU16[(1024 + ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $58_1 | 0) >> $58_1 | 0) << 2 | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($4_1 + 120 | 0) >> 2] | 0) + ((((((HEAPU16[(1024 + ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $75_1 | 0) >> $75_1 | 0) << 2 | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 2]));
      $92_1 = 16;
      $109_1 = 16;
      HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[(((HEAP32[($4_1 + 120 | 0) >> 2] | 0) + ((((((HEAPU16[(1024 + ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $92_1 | 0) >> $92_1 | 0) << 2 | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[($4_1 + 120 | 0) >> 2] | 0) + ((((((HEAPU16[(1024 + ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $109_1 | 0) >> $109_1 | 0) << 2 | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) + 4 | 0) >> 2])));
      $125_1 = ($4_1 + 16 | 0) + ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) << 2 | 0) | 0;
      HEAPF32[$125_1 >> 2] = Math_fround(Math_fround(HEAPF32[$125_1 >> 2]) + Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[$4_1 >> 2])) * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2])));
      $134 = ($4_1 + 16 | 0) + (((HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0;
      HEAPF32[$134 >> 2] = Math_fround(Math_fround(HEAPF32[$134 >> 2]) + Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2])));
      HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($4_1 + 116 | 0) >> 2] = (HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]) * Math_fround(2.0));
  HEAPF32[($4_1 + 100 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 100 | 0) >> 2]) * Math_fround(2.0));
  HEAP32[($4_1 + 116 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) < (22 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF32[((HEAP32[($4_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[(($4_1 + 16 | 0) + ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAP32[($4_1 + 116 | 0) >> 2] = (HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  global$0 = $4_1 + 128 | 0;
  return;
 }
 
 function $4($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $27_1 = 0, $36_1 = 0, $59_1 = 0, $76_1 = 0, $93_1 = 0, $110_1 = 0, $126_1 = 0, $135 = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 116 | 0) >> 2] = $2_1;
  $117($5_1 + 16 | 0 | 0, 0 | 0, 88 | 0) | 0;
  HEAP32[($5_1 + 112 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0) < (21 | 0) & 1 | 0)) {
     break label$1
    }
    $27_1 = 16;
    $36_1 = 16;
    HEAP32[($5_1 + 8 | 0) >> 2] = ((((HEAPU16[(1024 + (((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0) << $27_1 | 0) >> $27_1 | 0) - (((HEAPU16[(1024 + ((HEAP32[($5_1 + 112 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $36_1 | 0) >> $36_1 | 0) | 0) << 2 | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF32[$5_1 >> 2] = Math_fround(Math_fround(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) / Math_fround(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0));
      $59_1 = 16;
      $76_1 = 16;
      HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + ((((((HEAPU16[(1024 + ((HEAP32[($5_1 + 112 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $59_1 | 0) >> $59_1 | 0) << 2 | 0) + (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + ((((((HEAPU16[(1024 + ((HEAP32[($5_1 + 112 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $76_1 | 0) >> $76_1 | 0) << 2 | 0) + (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 2]));
      $93_1 = 16;
      $110_1 = 16;
      HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[(((HEAP32[($5_1 + 120 | 0) >> 2] | 0) + ((((((HEAPU16[(1024 + ((HEAP32[($5_1 + 112 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $93_1 | 0) >> $93_1 | 0) << 2 | 0) + (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[($5_1 + 116 | 0) >> 2] | 0) + ((((((HEAPU16[(1024 + ((HEAP32[($5_1 + 112 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $110_1 | 0) >> $110_1 | 0) << 2 | 0) + (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) + 4 | 0) >> 2])));
      $126_1 = ($5_1 + 16 | 0) + ((HEAP32[($5_1 + 112 | 0) >> 2] | 0) << 2 | 0) | 0;
      HEAPF32[$126_1 >> 2] = Math_fround(Math_fround(HEAPF32[$126_1 >> 2]) + Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[$5_1 >> 2])) * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])));
      $135 = ($5_1 + 16 | 0) + (((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0;
      HEAPF32[$135 >> 2] = Math_fround(Math_fround(HEAPF32[$135 >> 2]) + Math_fround(Math_fround(HEAPF32[$5_1 >> 2]) * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])));
      HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($5_1 + 112 | 0) >> 2] = (HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) * Math_fround(2.0));
  HEAPF32[($5_1 + 100 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 100 | 0) >> 2]) * Math_fround(2.0));
  HEAP32[($5_1 + 112 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0) < (22 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 112 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[(($5_1 + 16 | 0) + ((HEAP32[($5_1 + 112 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAP32[($5_1 + 112 | 0) >> 2] = (HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  global$0 = $5_1 + 128 | 0;
  return;
 }
 
 function $5($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $24_1 = 0, $33_1 = 0, $68_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $117(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 0 | 0, 481 | 0) | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < (21 | 0) & 1 | 0)) {
     break label$1
    }
    $24_1 = 16;
    $33_1 = 16;
    HEAP32[($4_1 + 12 | 0) >> 2] = ((((HEAPU16[(1024 + (((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0) << $24_1 | 0) >> $24_1 | 0) - (((HEAPU16[(1024 + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $33_1 | 0) >> $33_1 | 0) | 0) << 2 | 0;
    HEAP32[($4_1 + 16 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) / Math_fround(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0));
      $68_1 = 16;
      HEAPF32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((((((HEAPU16[(1024 + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $68_1 | 0) >> $68_1 | 0) << 2 | 0) + (HEAP32[($4_1 + 16 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])) * Math_fround(HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2])));
      HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $6() {
  return 18492 | 0;
 }
 
 function $7() {
  return 480 | 0;
 }
 
 function $8($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $23_1 = 0, $29_1 = 0, $35_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, 18492 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18476 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18476 | 0) >> 2] = 1284;
  }
  $23_1 = $106(4 | 0, HEAP32[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18476 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18480 | 0) >> 2] = $23_1;
  $29_1 = $106(4 | 0, HEAP32[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18476 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18484 | 0) >> 2] = $29_1;
  $35_1 = $106(4 | 0, HEAP32[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18476 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 18488 | 0) >> 2] = $35_1;
  global$0 = $4_1 + 16 | 0;
  return 0 | 0;
 }
 
 function $9($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $104($6() | 0 | 0) | 0;
  $8(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $10($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $105(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18480 | 0) >> 2] | 0 | 0);
  $105(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18484 | 0) >> 2] | 0 | 0);
  $105(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 18488 | 0) >> 2] | 0 | 0);
  $105(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $11($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $105_1 = 0, $45_1 = 0, $239 = Math_fround(0), $240 = Math_fround(0), $241 = Math_fround(0), $242 = Math_fround(0), $243 = Math_fround(0), $252 = Math_fround(0), $257 = Math_fround(0), $261 = Math_fround(0), $98_1 = 0, $111_1 = 0, $145 = 0, $162 = 0, $184 = 0, $220 = 0, $230 = 0;
  $8_1 = global$0 - 4192 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 4188 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 4184 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 4180 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 4176 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 4172 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 4168 | 0) >> 2] = $5_1;
  $117($8_1 + 2128 | 0 | 0, 0 | 0, 1924 | 0) | 0;
  HEAP32[($8_1 + 4164 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($8_1 + 4164 | 0) >> 2] | 0 | 0) < (22 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (!(Math_fround(HEAPF32[((HEAP32[($8_1 + 4172 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) > Math_fround(HEAPF32[((HEAP32[($8_1 + 4168 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) & 1 | 0)) {
       break label$4
      }
      HEAPF32[(($8_1 + 4064 | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(1.0);
      break label$3;
     }
     $45_1 = (HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0;
     $239 = Math_fround(HEAPF32[((HEAP32[($8_1 + 4172 | 0) >> 2] | 0) + $45_1 | 0) >> 2]);
     $240 = Math_fround($239 * $239);
     $241 = Math_fround(HEAPF32[((HEAP32[($8_1 + 4168 | 0) >> 2] | 0) + $45_1 | 0) >> 2]);
     $242 = Math_fround($241 * $241);
     $243 = Math_fround(1.0);
     HEAPF32[(($8_1 + 4064 | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(+Math_fround($240 * Math_fround($243 - $242)) / (+Math_fround($242 * Math_fround($243 - $240)) + .001));
    }
    label$5 : {
     label$6 : {
      if (!(Math_fround(0 | 0) > Math_fround(HEAPF32[(($8_1 + 4064 | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) & 1 | 0)) {
       break label$6
      }
      $252 = Math_fround(0 | 0);
      break label$5;
     }
     $252 = Math_fround(HEAPF32[(($8_1 + 4064 | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    }
    label$7 : {
     label$8 : {
      if (!(Math_fround(1.0) < $252 & 1 | 0)) {
       break label$8
      }
      $257 = Math_fround(1.0);
      break label$7;
     }
     label$9 : {
      label$10 : {
       if (!(Math_fround(0 | 0) > Math_fround(HEAPF32[(($8_1 + 4064 | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) & 1 | 0)) {
        break label$10
       }
       $261 = Math_fround(0 | 0);
       break label$9;
      }
      $261 = Math_fround(HEAPF32[(($8_1 + 4064 | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
     }
     $257 = $261;
    }
    $98_1 = 2;
    HEAPF32[(($8_1 + 4064 | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << $98_1 | 0) | 0) >> 2] = Math_fround(Math_sqrt(+$257));
    $105_1 = (HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << $98_1 | 0;
    $111_1 = ($8_1 + 4064 | 0) + $105_1 | 0;
    HEAPF32[$111_1 >> 2] = Math_fround(+Math_fround(HEAPF32[$111_1 >> 2]) * Math_sqrt(+Math_fround(HEAPF32[((HEAP32[($8_1 + 4180 | 0) >> 2] | 0) + $105_1 | 0) >> 2]) / (+Math_fround(HEAPF32[((HEAP32[($8_1 + 4176 | 0) >> 2] | 0) + $105_1 | 0) >> 2]) + 1.0e-08)));
    HEAP32[($8_1 + 4164 | 0) >> 2] = (HEAP32[($8_1 + 4164 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $5($8_1 + 2128 | 0 | 0, $8_1 + 4064 | 0 | 0);
  HEAP32[($8_1 + 4164 | 0) >> 2] = 0;
  label$11 : {
   label$12 : while (1) {
    if (!((HEAP32[($8_1 + 4164 | 0) >> 2] | 0 | 0) < (481 | 0) & 1 | 0)) {
     break label$11
    }
    $145 = (HEAP32[($8_1 + 4188 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF32[$145 >> 2] = Math_fround(Math_fround(HEAPF32[$145 >> 2]) + Math_fround(Math_fround(HEAPF32[(($8_1 + 2128 | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 4184 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2])));
    $162 = (HEAP32[($8_1 + 4188 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF32[($162 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($162 + 4 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[(($8_1 + 2128 | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[($8_1 + 4184 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2])));
    HEAP32[($8_1 + 4164 | 0) >> 2] = (HEAP32[($8_1 + 4164 | 0) >> 2] | 0) + 1 | 0;
    continue label$12;
   };
  }
  $3($8_1 + 2032 | 0 | 0, HEAP32[($8_1 + 4188 | 0) >> 2] | 0 | 0);
  $117($8_1 | 0, 0 | 0, 1924 | 0) | 0;
  HEAP32[($8_1 + 4164 | 0) >> 2] = 0;
  label$13 : {
   label$14 : while (1) {
    if (!((HEAP32[($8_1 + 4164 | 0) >> 2] | 0 | 0) < (22 | 0) & 1 | 0)) {
     break label$13
    }
    $184 = (HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0;
    HEAPF32[(($8_1 + 1936 | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_sqrt(+Math_fround(HEAPF32[((HEAP32[($8_1 + 4180 | 0) >> 2] | 0) + $184 | 0) >> 2]) / (+Math_fround(HEAPF32[(($8_1 + 2032 | 0) + $184 | 0) >> 2]) + 1.0e-08)));
    HEAP32[($8_1 + 4164 | 0) >> 2] = (HEAP32[($8_1 + 4164 | 0) >> 2] | 0) + 1 | 0;
    continue label$14;
   };
  }
  $5($8_1 | 0, $8_1 + 1936 | 0 | 0);
  HEAP32[($8_1 + 4164 | 0) >> 2] = 0;
  label$15 : {
   label$16 : while (1) {
    if (!((HEAP32[($8_1 + 4164 | 0) >> 2] | 0 | 0) < (481 | 0) & 1 | 0)) {
     break label$15
    }
    $220 = (HEAP32[($8_1 + 4188 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF32[$220 >> 2] = Math_fround(Math_fround(HEAPF32[$220 >> 2]) * Math_fround(HEAPF32[($8_1 + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
    $230 = (HEAP32[($8_1 + 4188 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF32[($230 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($230 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + ((HEAP32[($8_1 + 4164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
    HEAP32[($8_1 + 4164 | 0) >> 2] = (HEAP32[($8_1 + 4164 | 0) >> 2] | 0) + 1 | 0;
    continue label$16;
   };
  }
  global$0 = $8_1 + 4192 | 0;
  return;
 }
 
 function $12($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $199 = Math_fround(0), $166 = 0, $180 = 0, $211 = Math_fround(0);
  $5_1 = global$0 - 15984 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 15980 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 15976 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 15972 | 0) >> 2] = $2_1;
  $117($5_1 + 16 | 0 | 0, 0 | 0, 1924 | 0) | 0;
  HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(0 | 0);
  $13($5_1 + 2512 | 0 | 0, (HEAP32[($5_1 + 15980 | 0) >> 2] | 0) + 18380 | 0 | 0, HEAP32[($5_1 + 15972 | 0) >> 2] | 0 | 0, 1076 | 0, 1068 | 0, 480 | 0);
  HEAP32[($5_1 + 8 | 0) >> 2] = $14(HEAP32[($5_1 + 15980 | 0) >> 2] | 0 | 0, $5_1 + 12112 | 0 | 0, $5_1 + 4432 | 0 | 0, $5_1 + 2416 | 0 | 0, $5_1 + 2320 | 0 | 0, $5_1 + 2224 | 0 | 0, $5_1 + 2048 | 0 | 0, $5_1 + 2512 | 0 | 0) | 0;
  label$1 : {
   if (HEAP32[($5_1 + 8 | 0) >> 2] | 0) {
    break label$1
   }
   $50((HEAP32[($5_1 + 15980 | 0) >> 2] | 0) + 18476 | 0 | 0, $5_1 + 1952 | 0 | 0, $5_1 + 12 | 0 | 0, $5_1 + 2048 | 0 | 0);
   $11($5_1 + 12112 | 0 | 0, $5_1 + 4432 | 0 | 0, $5_1 + 2416 | 0 | 0, $5_1 + 2320 | 0 | 0, $5_1 + 2224 | 0 | 0, $5_1 + 1952 | 0 | 0);
   HEAP32[($5_1 + 15968 | 0) >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($5_1 + 15968 | 0) >> 2] | 0 | 0) < (22 | 0) & 1 | 0)) {
      break label$2
     }
     HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(.6000000238418579);
     label$4 : {
      label$5 : {
       if (!(Math_fround(HEAPF32[(($5_1 + 1952 | 0) + ((HEAP32[($5_1 + 15968 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) > Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[($5_1 + 15980 | 0) >> 2] | 0) + 18388 | 0) + ((HEAP32[($5_1 + 15968 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])) & 1 | 0)) {
        break label$5
       }
       $199 = Math_fround(HEAPF32[(($5_1 + 1952 | 0) + ((HEAP32[($5_1 + 15968 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
       break label$4;
      }
      $199 = Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[($5_1 + 15980 | 0) >> 2] | 0) + 18388 | 0) + ((HEAP32[($5_1 + 15968 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
     }
     HEAPF32[(($5_1 + 1952 | 0) + ((HEAP32[($5_1 + 15968 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $199;
     HEAPF32[(((HEAP32[($5_1 + 15980 | 0) >> 2] | 0) + 18388 | 0) + ((HEAP32[($5_1 + 15968 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[(($5_1 + 1952 | 0) + ((HEAP32[($5_1 + 15968 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
     HEAP32[($5_1 + 15968 | 0) >> 2] = (HEAP32[($5_1 + 15968 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   $5($5_1 + 16 | 0 | 0, $5_1 + 1952 | 0 | 0);
   HEAP32[($5_1 + 15968 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($5_1 + 15968 | 0) >> 2] | 0 | 0) < (481 | 0) & 1 | 0)) {
      break label$6
     }
     $166 = ($5_1 + 12112 | 0) + ((HEAP32[($5_1 + 15968 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAPF32[$166 >> 2] = Math_fround(Math_fround(HEAPF32[$166 >> 2]) * Math_fround(HEAPF32[(($5_1 + 16 | 0) + ((HEAP32[($5_1 + 15968 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
     $180 = ($5_1 + 12112 | 0) + ((HEAP32[($5_1 + 15968 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAPF32[($180 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($180 + 4 | 0) >> 2]) * Math_fround(HEAPF32[(($5_1 + 16 | 0) + ((HEAP32[($5_1 + 15968 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
     HEAP32[($5_1 + 15968 | 0) >> 2] = (HEAP32[($5_1 + 15968 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
  }
  $15(HEAP32[($5_1 + 15980 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 15976 | 0) >> 2] | 0 | 0, $5_1 + 12112 | 0 | 0);
  $211 = Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]);
  global$0 = $5_1 + 15984 | 0;
  return Math_fround($211);
 }
 
 function $13($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $19_1 = 0, $27_1 = 0;
  $8_1 = global$0 - 48 | 0;
  HEAP32[($8_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $19_1 = 2;
    HEAPF32[($8_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($8_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 20 | 0) >> 2] | 0) << $19_1 | 0) | 0) >> 2]);
    HEAPF32[($8_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 20 | 0) >> 2] | 0) << $19_1 | 0) | 0) >> 2]) + Math_fround(HEAPF32[(HEAP32[($8_1 + 40 | 0) >> 2] | 0) >> 2]));
    $27_1 = HEAP32[($8_1 + 40 | 0) >> 2] | 0;
    HEAPF32[$27_1 >> 2] = Math_fround(+Math_fround(HEAPF32[($27_1 + 4 | 0) >> 2]) + (+Math_fround(HEAPF32[(HEAP32[($8_1 + 32 | 0) >> 2] | 0) >> 2]) * +Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]) - +Math_fround(HEAPF32[(HEAP32[($8_1 + 28 | 0) >> 2] | 0) >> 2]) * +Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2])));
    HEAPF32[((HEAP32[($8_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(+Math_fround(HEAPF32[((HEAP32[($8_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2]) * +Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]) - +Math_fround(HEAPF32[((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2]) * +Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]));
    HEAPF32[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]);
    HEAP32[($8_1 + 20 | 0) >> 2] = (HEAP32[($8_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $14($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $153 = 0, $196 = 0, $197 = 0, $212 = 0, $213 = 0, $681 = 0.0, $685 = 0.0, $693 = 0.0, $597 = Math_fround(0), $704 = 0.0, $308 = 0, $309 = 0, $338 = 0, $370 = 0, $403 = 0, $644 = Math_fround(0), $673 = 0.0, $555 = 0;
  $10_1 = global$0 - 7600 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 7592 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 7588 | 0) >> 2] = $1_1;
  HEAP32[($10_1 + 7584 | 0) >> 2] = $2_1;
  HEAP32[($10_1 + 7580 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 7576 | 0) >> 2] = $4_1;
  HEAP32[($10_1 + 7572 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 7568 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 7564 | 0) >> 2] = $7_1;
  HEAPF32[($10_1 + 7556 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($10_1 + 7540 | 0) >> 2] = Math_fround(0 | 0);
  $16(HEAP32[($10_1 + 7592 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 7588 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 7580 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 7564 | 0) >> 2] | 0 | 0);
  $118((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 4548 | 0 | 0, ((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 4548 | 0) + 1920 | 0 | 0, Math_imul((((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 4548 | 0) - (((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 4548 | 0) + 1920 | 0) | 0) >> 2 | 0, 0) + 4992 | 0 | 0) | 0;
  $116(((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 4548 | 0) + 4992 | 0 | 0, HEAP32[($10_1 + 7564 | 0) >> 2] | 0 | 0, Math_imul(((((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 4548 | 0) + 4992 | 0) - (HEAP32[($10_1 + 7564 | 0) >> 2] | 0) | 0) >> 2 | 0, 0) + 1920 | 0 | 0) | 0;
  HEAP32[($10_1 + 132 | 0) >> 2] = (HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 4548 | 0;
  $35($10_1 + 132 | 0 | 0, $10_1 + 144 | 0 | 0, 1728 | 0, 1 | 0);
  $40(($10_1 + 144 | 0) + 1536 | 0 | 0, $10_1 + 144 | 0 | 0, 960 | 0, 588 | 0, $10_1 + 140 | 0 | 0);
  HEAP32[($10_1 + 140 | 0) >> 2] = 768 - (HEAP32[($10_1 + 140 | 0) >> 2] | 0) | 0;
  HEAPF32[($10_1 + 136 | 0) >> 2] = Math_fround($42($10_1 + 144 | 0 | 0, 768 | 0, 60 | 0, 960 | 0, $10_1 + 140 | 0 | 0, HEAP32[((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 18376 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 18372 | 0) >> 2]))));
  HEAP32[((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 18376 | 0) >> 2] = HEAP32[($10_1 + 140 | 0) >> 2] | 0;
  HEAPF32[((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 18372 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 136 | 0) >> 2]);
  HEAP32[($10_1 + 7560 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($10_1 + 7560 | 0) >> 2] | 0 | 0) < (960 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF32[(($10_1 + 3600 | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[(((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 4548 | 0) + (((768 - (HEAP32[($10_1 + 140 | 0) >> 2] | 0) | 0) + (HEAP32[($10_1 + 7560 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2]);
    HEAP32[($10_1 + 7560 | 0) >> 2] = (HEAP32[($10_1 + 7560 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $17($10_1 + 3600 | 0 | 0);
  $18(HEAP32[($10_1 + 7584 | 0) >> 2] | 0 | 0, $10_1 + 3600 | 0 | 0);
  $3(HEAP32[($10_1 + 7576 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 7584 | 0) >> 2] | 0 | 0);
  $4(HEAP32[($10_1 + 7572 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 7588 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 7584 | 0) >> 2] | 0 | 0);
  HEAP32[($10_1 + 7560 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($10_1 + 7560 | 0) >> 2] | 0 | 0) < (22 | 0) & 1 | 0)) {
     break label$3
    }
    $153 = (HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0;
    HEAPF32[((HEAP32[($10_1 + 7572 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(+Math_fround(HEAPF32[((HEAP32[($10_1 + 7572 | 0) >> 2] | 0) + $153 | 0) >> 2]) / Math_sqrt(+Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 7580 | 0) >> 2] | 0) + $153 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($10_1 + 7576 | 0) >> 2] | 0) + $153 | 0) >> 2])) + .001));
    HEAP32[($10_1 + 7560 | 0) >> 2] = (HEAP32[($10_1 + 7560 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $19($10_1 + 32 | 0 | 0, HEAP32[($10_1 + 7572 | 0) >> 2] | 0 | 0);
  HEAP32[($10_1 + 7560 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($10_1 + 7560 | 0) >> 2] | 0 | 0) < (6 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF32[((HEAP32[($10_1 + 7568 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) + 34 | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[(($10_1 + 32 | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAP32[($10_1 + 7560 | 0) >> 2] = (HEAP32[($10_1 + 7560 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  $196 = HEAP32[($10_1 + 7568 | 0) >> 2] | 0;
  HEAPF32[($196 + 136 | 0) >> 2] = Math_fround(+Math_fround(HEAPF32[($196 + 136 | 0) >> 2]) + -1.3);
  $197 = HEAP32[($10_1 + 7568 | 0) >> 2] | 0;
  HEAPF32[($197 + 140 | 0) >> 2] = Math_fround(+Math_fround(HEAPF32[($197 + 140 | 0) >> 2]) + -.9);
  HEAPF32[((HEAP32[($10_1 + 7568 | 0) >> 2] | 0) + 160 | 0) >> 2] = Math_fround(+((HEAP32[($10_1 + 140 | 0) >> 2] | 0) + -300 | 0 | 0) * .01);
  HEAPF32[($10_1 + 24 | 0) >> 2] = Math_fround(-2.0);
  HEAPF32[($10_1 + 28 | 0) >> 2] = Math_fround(-2.0);
  HEAP32[($10_1 + 7560 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($10_1 + 7560 | 0) >> 2] | 0 | 0) < (22 | 0) & 1 | 0)) {
     break label$7
    }
    $212 = 2;
    $213 = (HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << $212 | 0;
    HEAPF32[(($10_1 + 7440 | 0) + $213 | 0) >> 2] = Math_fround(+$113(+(+Math_fround(HEAPF32[((HEAP32[($10_1 + 7580 | 0) >> 2] | 0) + $213 | 0) >> 2]) + .01)));
    $673 = +Math_fround(Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]) + Math_fround(-7.0));
    label$9 : {
     label$10 : {
      if (!(+Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]) + -1.5 > +Math_fround(HEAPF32[(($10_1 + 7440 | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << $212 | 0) | 0) >> 2]) & 1 | 0)) {
       break label$10
      }
      $681 = +Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]) - 1.5;
      break label$9;
     }
     $681 = +Math_fround(HEAPF32[(($10_1 + 7440 | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    }
    label$11 : {
     label$12 : {
      if (!($673 > $681 & 1 | 0)) {
       break label$12
      }
      $685 = +Math_fround(Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]) + Math_fround(-7.0));
      break label$11;
     }
     label$13 : {
      label$14 : {
       if (!(+Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]) + -1.5 > +Math_fround(HEAPF32[(($10_1 + 7440 | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) & 1 | 0)) {
        break label$14
       }
       $693 = +Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]) - 1.5;
       break label$13;
      }
      $693 = +Math_fround(HEAPF32[(($10_1 + 7440 | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
     }
     $685 = $693;
    }
    HEAPF32[(($10_1 + 7440 | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround($685);
    label$15 : {
     label$16 : {
      if (!(Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]) > Math_fround(HEAPF32[(($10_1 + 7440 | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) & 1 | 0)) {
       break label$16
      }
      $597 = Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]);
      break label$15;
     }
     $597 = Math_fround(HEAPF32[(($10_1 + 7440 | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    }
    HEAPF32[($10_1 + 24 | 0) >> 2] = $597;
    label$17 : {
     label$18 : {
      if (!(+Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]) + -1.5 > +Math_fround(HEAPF32[(($10_1 + 7440 | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) & 1 | 0)) {
       break label$18
      }
      $704 = +Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]) - 1.5;
      break label$17;
     }
     $704 = +Math_fround(HEAPF32[(($10_1 + 7440 | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    }
    HEAPF32[($10_1 + 28 | 0) >> 2] = Math_fround($704);
    HEAPF32[($10_1 + 7556 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 7556 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($10_1 + 7580 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
    HEAP32[($10_1 + 7560 | 0) >> 2] = (HEAP32[($10_1 + 7560 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  label$19 : {
   label$20 : {
    if (!(+Math_fround(HEAPF32[($10_1 + 7556 | 0) >> 2]) < .04 & 1 | 0)) {
     break label$20
    }
    $117(HEAP32[($10_1 + 7568 | 0) >> 2] | 0 | 0, 0 | 0, 168 | 0) | 0;
    HEAP32[($10_1 + 7596 | 0) >> 2] = 1;
    break label$19;
   }
   $19(HEAP32[($10_1 + 7568 | 0) >> 2] | 0 | 0, $10_1 + 7440 | 0 | 0);
   $308 = HEAP32[($10_1 + 7568 | 0) >> 2] | 0;
   HEAPF32[$308 >> 2] = Math_fround(Math_fround(HEAPF32[$308 >> 2]) - Math_fround(12.0));
   $309 = HEAP32[($10_1 + 7568 | 0) >> 2] | 0;
   HEAPF32[($309 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($309 + 4 | 0) >> 2]) - Math_fround(4.0));
   HEAP32[($10_1 + 7552 | 0) >> 2] = ((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 1920 | 0) + Math_imul(HEAP32[((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 2624 | 0) >> 2] | 0, 88) | 0;
   label$21 : {
    label$22 : {
     if (!((HEAP32[((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 2624 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0)) {
      break label$22
     }
     $338 = ((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 1920 | 0) + Math_imul(((HEAP32[((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 2624 | 0) >> 2] | 0) + 8 | 0) - 1 | 0, 88) | 0;
     break label$21;
    }
    $338 = ((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 1920 | 0) + Math_imul((HEAP32[((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 2624 | 0) >> 2] | 0) - 1 | 0, 88) | 0;
   }
   HEAP32[($10_1 + 7548 | 0) >> 2] = $338;
   label$23 : {
    label$24 : {
     if (!((HEAP32[((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 2624 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
      break label$24
     }
     $370 = ((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 1920 | 0) + Math_imul(((HEAP32[((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 2624 | 0) >> 2] | 0) + 8 | 0) - 2 | 0, 88) | 0;
     break label$23;
    }
    $370 = ((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 1920 | 0) + Math_imul((HEAP32[((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 2624 | 0) >> 2] | 0) - 2 | 0, 88) | 0;
   }
   HEAP32[($10_1 + 7544 | 0) >> 2] = $370;
   HEAP32[($10_1 + 7560 | 0) >> 2] = 0;
   label$25 : {
    label$26 : while (1) {
     if (!((HEAP32[($10_1 + 7560 | 0) >> 2] | 0 | 0) < (22 | 0) & 1 | 0)) {
      break label$25
     }
     HEAPF32[((HEAP32[($10_1 + 7552 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($10_1 + 7568 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
     HEAP32[($10_1 + 7560 | 0) >> 2] = (HEAP32[($10_1 + 7560 | 0) >> 2] | 0) + 1 | 0;
     continue label$26;
    };
   }
   $403 = HEAP32[($10_1 + 7592 | 0) >> 2] | 0;
   HEAP32[($403 + 2624 | 0) >> 2] = (HEAP32[($403 + 2624 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($10_1 + 7560 | 0) >> 2] = 0;
   label$27 : {
    label$28 : while (1) {
     if (!((HEAP32[($10_1 + 7560 | 0) >> 2] | 0 | 0) < (6 | 0) & 1 | 0)) {
      break label$27
     }
     HEAPF32[((HEAP32[($10_1 + 7568 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 7552 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($10_1 + 7548 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($10_1 + 7544 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
     HEAPF32[((HEAP32[($10_1 + 7568 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) + 22 | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 7552 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($10_1 + 7544 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
     HEAPF32[((HEAP32[($10_1 + 7568 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) + 28 | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 7552 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) - Math_fround(Math_fround(2.0) * Math_fround(HEAPF32[((HEAP32[($10_1 + 7548 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]))) + Math_fround(HEAPF32[((HEAP32[($10_1 + 7544 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 7560 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
     HEAP32[($10_1 + 7560 | 0) >> 2] = (HEAP32[($10_1 + 7560 | 0) >> 2] | 0) + 1 | 0;
     continue label$28;
    };
   }
   label$29 : {
    if (!((HEAP32[((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 2624 | 0) >> 2] | 0 | 0) == (8 | 0) & 1 | 0)) {
     break label$29
    }
    HEAP32[((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 2624 | 0) >> 2] = 0;
   }
   HEAP32[($10_1 + 7560 | 0) >> 2] = 0;
   label$30 : {
    label$31 : while (1) {
     if (!((HEAP32[($10_1 + 7560 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
      break label$30
     }
     HEAPF32[($10_1 + 16 | 0) >> 2] = Math_fround(999999986991104.0);
     HEAP32[($10_1 + 20 | 0) >> 2] = 0;
     label$32 : {
      label$33 : while (1) {
       if (!((HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
        break label$32
       }
       HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround(0 | 0);
       HEAP32[($10_1 + 12 | 0) >> 2] = 0;
       label$34 : {
        label$35 : while (1) {
         if (!((HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) < (22 | 0) & 1 | 0)) {
          break label$34
         }
         HEAPF32[($10_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 1920 | 0) + Math_imul(HEAP32[($10_1 + 7560 | 0) >> 2] | 0, 88) | 0) + ((HEAP32[($10_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) - Math_fround(HEAPF32[((((HEAP32[($10_1 + 7592 | 0) >> 2] | 0) + 1920 | 0) + Math_imul(HEAP32[($10_1 + 20 | 0) >> 2] | 0, 88) | 0) + ((HEAP32[($10_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
         HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])));
         HEAP32[($10_1 + 12 | 0) >> 2] = (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 1 | 0;
         continue label$35;
        };
       }
       label$36 : {
        if (!((HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($10_1 + 7560 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$36
        }
        label$37 : {
         label$38 : {
          if (!(Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]) < Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]) & 1 | 0)) {
           break label$38
          }
          $644 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
          break label$37;
         }
         $644 = Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]);
        }
        HEAPF32[($10_1 + 16 | 0) >> 2] = $644;
       }
       HEAP32[($10_1 + 20 | 0) >> 2] = (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + 1 | 0;
       continue label$33;
      };
     }
     HEAPF32[($10_1 + 7540 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 7540 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]));
     HEAP32[($10_1 + 7560 | 0) >> 2] = (HEAP32[($10_1 + 7560 | 0) >> 2] | 0) + 1 | 0;
     continue label$31;
    };
   }
   HEAPF32[((HEAP32[($10_1 + 7568 | 0) >> 2] | 0) + 164 | 0) >> 2] = Math_fround(+Math_fround(Math_fround(HEAPF32[($10_1 + 7540 | 0) >> 2]) / Math_fround(8.0)) + -2.1);
   HEAP32[($10_1 + 7596 | 0) >> 2] = 0;
  }
  $555 = HEAP32[($10_1 + 7596 | 0) >> 2] | 0;
  global$0 = $10_1 + 7600 | 0;
  return $555 | 0;
 }
 
 function $15($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 3872 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 3868 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 3864 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 3860 | 0) >> 2] = $2_1;
  $20($5_1 + 16 | 0 | 0, HEAP32[($5_1 + 3860 | 0) >> 2] | 0 | 0);
  $17($5_1 + 16 | 0 | 0);
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (480 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF32[((HEAP32[($5_1 + 3864 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(($5_1 + 16 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) + Math_fround(HEAPF32[(((HEAP32[($5_1 + 3868 | 0) >> 2] | 0) + 2628 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $116((HEAP32[($5_1 + 3868 | 0) >> 2] | 0) + 2628 | 0 | 0, ($5_1 + 16 | 0) + 1920 | 0 | 0, Math_imul((((HEAP32[($5_1 + 3868 | 0) >> 2] | 0) + 2628 | 0) - (($5_1 + 16 | 0) + 1920 | 0) | 0) >> 2 | 0, 0) + 1920 | 0 | 0) | 0;
  global$0 = $5_1 + 3872 | 0;
  return;
 }
 
 function $16($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 3872 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 3868 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 3864 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 3860 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 3856 | 0) >> 2] = $3_1;
  $116($6_1 | 0, HEAP32[($6_1 + 3868 | 0) >> 2] | 0 | 0, Math_imul(($6_1 - (HEAP32[($6_1 + 3868 | 0) >> 2] | 0) | 0) >> 2 | 0, 0) + 1920 | 0 | 0) | 0;
  HEAP32[($6_1 + 3852 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 3852 | 0) >> 2] | 0 | 0) < (480 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF32[($6_1 + (((HEAP32[($6_1 + 3852 | 0) >> 2] | 0) + 480 | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($6_1 + 3856 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 3852 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAP32[($6_1 + 3852 | 0) >> 2] = (HEAP32[($6_1 + 3852 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $116(HEAP32[($6_1 + 3868 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 3856 | 0) >> 2] | 0 | 0, Math_imul(((HEAP32[($6_1 + 3868 | 0) >> 2] | 0) - (HEAP32[($6_1 + 3856 | 0) >> 2] | 0) | 0) >> 2 | 0, 0) + 1920 | 0 | 0) | 0;
  $17($6_1 | 0);
  $18(HEAP32[($6_1 + 3864 | 0) >> 2] | 0 | 0, $6_1 | 0);
  $3(HEAP32[($6_1 + 3860 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 3864 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 3872 | 0;
  return;
 }
 
 function $17($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $23_1 = 0, $37_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $21();
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (480 | 0) & 1 | 0)) {
     break label$1
    }
    $23_1 = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
    HEAPF32[$23_1 >> 2] = Math_fround(Math_fround(HEAPF32[$23_1 >> 2]) * Math_fround(HEAPF32[((93392 + 8 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
    $37_1 = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + ((959 - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0;
    HEAPF32[$37_1 >> 2] = Math_fround(Math_fround(HEAPF32[$37_1 >> 2]) * Math_fround(HEAPF32[((93392 + 8 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $18($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $186 = 0;
  $4_1 = global$0 - 15376 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 15372 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 15368 | 0) >> 2] = $1_1;
  $21();
  HEAP32[($4_1 + 15364 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 15364 | 0) >> 2] | 0 | 0) < (960 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF32[(($4_1 + 7680 | 0) + ((HEAP32[($4_1 + 15364 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($4_1 + 15368 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 15364 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAPF32[((($4_1 + 7680 | 0) + ((HEAP32[($4_1 + 15364 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = Math_fround(0 | 0);
    HEAP32[($4_1 + 15364 | 0) >> 2] = (HEAP32[($4_1 + 15364 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $34(HEAP32[(0 + 93396 | 0) >> 2] | 0 | 0, $4_1 + 7680 | 0 | 0, $4_1 | 0);
  HEAP32[($4_1 + 15364 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 15364 | 0) >> 2] | 0 | 0) < (481 | 0) & 1 | 0)) {
     break label$3
    }
    i64toi32_i32$2 = $4_1 + ((HEAP32[($4_1 + 15364 | 0) >> 2] | 0) << 3 | 0) | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $186 = i64toi32_i32$0;
    i64toi32_i32$0 = (HEAP32[($4_1 + 15372 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 15364 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $186;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($4_1 + 15364 | 0) >> 2] = (HEAP32[($4_1 + 15364 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  global$0 = $4_1 + 15376 | 0;
  return;
 }
 
 function $19($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $21();
  HEAP32[($4_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < (22 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(0 | 0);
    HEAP32[($4_1 + 16 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < (22 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((93392 + 1928 | 0) + ((Math_imul(HEAP32[($4_1 + 16 | 0) >> 2] | 0, 22) + (HEAP32[($4_1 + 20 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2])));
      HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAPF32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(+Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) * Math_sqrt(.09090909090909091));
    HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $20($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $160 = 0;
  $4_1 = global$0 - 15376 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 15372 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 15368 | 0) >> 2] = $1_1;
  $21();
  HEAP32[($4_1 + 15364 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 15364 | 0) >> 2] | 0 | 0) < (481 | 0) & 1 | 0)) {
     break label$1
    }
    i64toi32_i32$2 = (HEAP32[($4_1 + 15368 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 15364 | 0) >> 2] | 0) << 3 | 0) | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $160 = i64toi32_i32$0;
    i64toi32_i32$0 = ($4_1 + 7680 | 0) + ((HEAP32[($4_1 + 15364 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $160;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($4_1 + 15364 | 0) >> 2] = (HEAP32[($4_1 + 15364 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 15364 | 0) >> 2] | 0 | 0) < (960 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF32[(($4_1 + 7680 | 0) + ((HEAP32[($4_1 + 15364 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] = Math_fround(HEAPF32[(($4_1 + 7680 | 0) + ((960 - (HEAP32[($4_1 + 15364 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 2]);
    HEAPF32[((($4_1 + 7680 | 0) + ((HEAP32[($4_1 + 15364 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[((($4_1 + 7680 | 0) + ((960 - (HEAP32[($4_1 + 15364 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) + 4 | 0) >> 2]));
    HEAP32[($4_1 + 15364 | 0) >> 2] = (HEAP32[($4_1 + 15364 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $34(HEAP32[(0 + 93396 | 0) >> 2] | 0 | 0, $4_1 + 7680 | 0 | 0, $4_1 | 0);
  HEAPF32[(HEAP32[($4_1 + 15372 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(960.0) * Math_fround(HEAPF32[$4_1 >> 2]));
  HEAP32[($4_1 + 15364 | 0) >> 2] = 1;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($4_1 + 15364 | 0) >> 2] | 0 | 0) < (960 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF32[((HEAP32[($4_1 + 15372 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 15364 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(960.0) * Math_fround(HEAPF32[($4_1 + ((960 - (HEAP32[($4_1 + 15364 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 2]));
    HEAP32[($4_1 + 15364 | 0) >> 2] = (HEAP32[($4_1 + 15364 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  global$0 = $4_1 + 15376 | 0;
  return;
 }
 
 function $21() {
  var $2_1 = 0, $6_1 = 0, $80_1 = 0.0, $84_1 = 0.0, $66_1 = 0, $102_1 = Math_fround(0), $103_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 93392 | 0) >> 2] | 0)) {
     break label$2
    }
    break label$1;
   }
   $6_1 = 0;
   HEAP32[(0 + 93396 | 0) >> 2] = $23(960 | 0, $6_1 | 0, $6_1 | 0, $6_1 | 0, $6_1 | 0) | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) < (480 | 0) & 1 | 0)) {
      break label$3
     }
     $80_1 = 1.5707963267948966;
     $84_1 = +$54(+((+(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) + .5) * $80_1 / 480.0));
     $102_1 = Math_fround(+$54(+($84_1 * $80_1 * $84_1)));
     HEAPF32[((93392 + 8 | 0) + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $102_1;
     HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($2_1 + 12 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) < (22 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($2_1 + 8 | 0) >> 2] = 0;
     label$7 : {
      label$8 : while (1) {
       if (!((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) < (22 | 0) & 1 | 0)) {
        break label$7
       }
       $103_1 = Math_fround(+$53(+((+(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) + .5) * +(HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) * 3.141592653589793 / 22.0)));
       HEAPF32[((93392 + 1928 | 0) + ((Math_imul(HEAP32[($2_1 + 12 | 0) >> 2] | 0, 22) + (HEAP32[($2_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] = $103_1;
       label$9 : {
        if (HEAP32[($2_1 + 8 | 0) >> 2] | 0) {
         break label$9
        }
        $66_1 = ((Math_imul(HEAP32[($2_1 + 12 | 0) >> 2] | 0, 22) + (HEAP32[($2_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) + 95320 | 0;
        HEAPF32[$66_1 >> 2] = Math_fround(+Math_fround(HEAPF32[$66_1 >> 2]) * Math_sqrt(.5));
       }
       HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 1 | 0;
       continue label$8;
      };
     }
     HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   HEAP32[(0 + 93392 | 0) >> 2] = 1;
  }
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $22($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 0 | 0;
 }
 
 function $23($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $69_1 = 0, $82_1 = 0, $97_1 = 0, $111_1 = 0, $127_1 = 0, $134 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 56;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($7_1 + 20 | 0) >> 2] = $104(HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    if (!((HEAP32[(HEAP32[($7_1 + 32 | 0) >> 2] | 0) >> 2] | 0) >>> 0 >= (HEAP32[($7_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
   }
   HEAP32[(HEAP32[($7_1 + 32 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
  }
  label$4 : {
   label$5 : {
    label$6 : {
     if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[(HEAP32[($7_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
     HEAPF32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0));
     label$7 : {
      label$8 : {
       if (!((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$8
       }
       HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
       HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
       label$9 : while (1) {
        $69_1 = 0;
        label$10 : {
         if (!((HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) < (32 | 0) & 1 | 0)) {
          break label$10
         }
         $69_1 = ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << (HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0 | 0) != (HEAP32[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0);
        }
        label$11 : {
         if (!($69_1 & 1 | 0)) {
          break label$11
         }
         $82_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
         HEAP32[($82_1 + 8 | 0) >> 2] = (HEAP32[($82_1 + 8 | 0) >> 2] | 0) + 1 | 0;
         continue label$9;
        }
        break label$9;
       };
       label$12 : {
        if (!((HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) >= (32 | 0) & 1 | 0)) {
         break label$12
        }
        break label$5;
       }
       break label$7;
      }
      $97_1 = $104((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
      HEAP32[($7_1 + 8 | 0) >> 2] = $97_1;
      HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] = $97_1;
      $24(HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0);
      HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] = -1;
     }
     label$13 : {
      if ($25(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 12 | 0 | 0) | 0) {
       break label$13
      }
      break label$5;
     }
     $111_1 = $104((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 1 | 0 | 0) | 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $111_1;
     HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 44 | 0) >> 2] = $111_1;
     label$14 : {
      if (!((HEAP32[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
       break label$14
      }
      break label$5;
     }
     $127_1 = 1;
     $26(0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $127_1 | 0, $127_1 | 0, (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0);
     label$15 : {
      if (!($22(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) | 0)) {
       break label$15
      }
      break label$5;
     }
    }
    HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    break label$4;
   }
   $27(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0);
   HEAP32[($7_1 + 44 | 0) >> 2] = 0;
  }
  $134 = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
  global$0 = $7_1 + 48 | 0;
  return $134 | 0;
 }
 
 function $24($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $40_1 = Math_fround(0), $41_1 = Math_fround(0);
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($4_1 + 8 | 0) >> 3] = 3.141592653589793;
    HEAPF64[$4_1 >> 3] = -6.283185307179586 / +(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) * +(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
    $40_1 = Math_fround(+$53(+(+HEAPF64[$4_1 >> 3])));
    HEAPF32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] = $40_1;
    $41_1 = Math_fround(+$54(+(+HEAPF64[$4_1 >> 3])));
    HEAPF32[(((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = $41_1;
    HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $25($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $109_1 = 0, $162 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = 4;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) % (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0)) {
       break label$3
      }
      $13_1 = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + -2 | 0;
      label$5 : {
       label$6 : {
        switch ($13_1 | 0) {
        case 2:
         HEAP32[($4_1 + 16 | 0) >> 2] = 2;
         break label$5;
        case 0:
         HEAP32[($4_1 + 16 | 0) >> 2] = 3;
         break label$5;
        default:
         break label$6;
        };
       }
       HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 2 | 0;
      }
      label$9 : {
       label$10 : {
        if ((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) > (32e3 | 0) & 1 | 0) {
         break label$10
        }
        if (!((Math_imul(HEAP32[($4_1 + 16 | 0) >> 2] | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0) | 0) > (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$9
        }
       }
       HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
      }
      continue label$4;
     };
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) / (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    label$11 : {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) > (5 | 0) & 1 | 0)) {
      break label$11
     }
     HEAP32[($4_1 + 28 | 0) >> 2] = 0;
     break label$1;
    }
    HEAP16[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 1 | 0) << 1 | 0) | 0) >> 1] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    label$12 : {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$12
     }
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP16[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 1 | 0) << 1 | 0) | 0) >> 1] = 4;
     HEAP16[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 1] = 2;
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
   label$13 : {
    label$14 : while (1) {
     if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) < ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0) & 1 | 0)) {
      break label$13
     }
     $109_1 = 16;
     HEAP32[$4_1 >> 2] = ((HEAPU16[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0) << 1 | 0) | 0) >> 1] | 0) << $109_1 | 0) >> $109_1 | 0;
     HEAP16[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0) << 1 | 0) | 0) >> 1] = HEAPU16[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + (((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) - 1 | 0) << 1 | 0) << 1 | 0) | 0) >> 1] | 0;
     HEAP16[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + (((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) - 1 | 0) << 1 | 0) << 1 | 0) | 0) >> 1] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$14;
    };
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
   label$15 : {
    label$16 : while (1) {
     if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$15
     }
     $162 = 16;
     HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) / (((HEAPU16[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0) << 1 | 0) | 0) >> 1] | 0) << $162 | 0) >> $162 | 0 | 0) | 0;
     HEAP16[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0) + 1 | 0) << 1 | 0) | 0) >> 1] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$16;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 1;
  }
  return HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $26($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $9_1 = 0, $13_1 = 0, $16_1 = 0, $20_1 = 0;
  $8_1 = global$0 - 48 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $5_1;
  $9_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
  HEAP32[($8_1 + 28 | 0) >> 2] = $9_1 + 2 | 0;
  $13_1 = 16;
  HEAP32[($8_1 + 20 | 0) >> 2] = ((HEAPU16[$9_1 >> 1] | 0) << $13_1 | 0) >> $13_1 | 0;
  $16_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
  HEAP32[($8_1 + 28 | 0) >> 2] = $16_1 + 2 | 0;
  $20_1 = 16;
  HEAP32[($8_1 + 16 | 0) >> 2] = ((HEAPU16[$16_1 >> 1] | 0) << $20_1 | 0) >> $20_1 | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($8_1 + 12 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAP16[(HEAP32[($8_1 + 40 | 0) >> 2] | 0) >> 1] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) + (HEAP32[($8_1 + 12 | 0) >> 2] | 0) | 0;
      HEAP32[($8_1 + 40 | 0) >> 2] = (HEAP32[($8_1 + 40 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 36 | 0) >> 2] | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0) << 1 | 0) | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    break label$1;
   }
   HEAP32[($8_1 + 8 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     $26(HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($8_1 + 36 | 0) >> 2] | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0) | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0);
     HEAP32[($8_1 + 40 | 0) >> 2] = (HEAP32[($8_1 + 40 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 36 | 0) >> 2] | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0) << 1 | 0) | 0;
     HEAP32[($8_1 + 44 | 0) >> 2] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) + (HEAP32[($8_1 + 16 | 0) >> 2] | 0) | 0;
     HEAP32[($8_1 + 8 | 0) >> 2] = (HEAP32[($8_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
  }
  global$0 = $8_1 + 48 | 0;
  return;
 }
 
 function $27($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $28(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
   $105(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0);
   label$2 : {
    if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$2
    }
    $105(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0);
   }
   $105(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $28($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $29($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $30_1 = 0, $45_1 = 0, $89_1 = 0, $115_1 = 0, $128_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 72 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$2
    }
    $15_1 = HEAP32[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    break label$1;
   }
   $15_1 = 0;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $15_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = 1;
  HEAP32[($4_1 + 56 | 0) >> 2] = 0;
  label$3 : while (1) {
   $30_1 = 16;
   HEAP32[($4_1 + 60 | 0) >> 2] = ((HEAPU16[(((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 12 | 0) + (((HEAP32[($4_1 + 56 | 0) >> 2] | 0) << 1 | 0) << 1 | 0) | 0) >> 1] | 0) << $30_1 | 0) >> $30_1 | 0;
   $45_1 = 16;
   HEAP32[($4_1 + 64 | 0) >> 2] = ((HEAPU16[(((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 12 | 0) + ((((HEAP32[($4_1 + 56 | 0) >> 2] | 0) << 1 | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0) << $45_1 | 0) >> $45_1 | 0;
   HEAP32[(($4_1 + 16 | 0) + (((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = Math_imul(HEAP32[(($4_1 + 16 | 0) + ((HEAP32[($4_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0, HEAP32[($4_1 + 60 | 0) >> 2] | 0);
   HEAP32[($4_1 + 56 | 0) >> 2] = (HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 1 | 0;
   if ((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0) {
    continue label$3
   }
   break label$3;
  };
  $89_1 = 16;
  HEAP32[($4_1 + 64 | 0) >> 2] = ((HEAPU16[(((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 12 | 0) + ((((HEAP32[($4_1 + 56 | 0) >> 2] | 0) << 1 | 0) - 1 | 0) << 1 | 0) | 0) >> 1] | 0) << $89_1 | 0) >> $89_1 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 56 | 0) >> 2] | 0) - 1 | 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$4
    }
    label$6 : {
     label$7 : {
      if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
       break label$7
      }
      $115_1 = 16;
      HEAP32[($4_1 + 68 | 0) >> 2] = ((HEAPU16[(((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 12 | 0) + ((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0) - 1 | 0) << 1 | 0) | 0) >> 1] | 0) << $115_1 | 0) >> $115_1 | 0;
      break label$6;
     }
     HEAP32[($4_1 + 68 | 0) >> 2] = 1;
    }
    $128_1 = (HEAP16[(((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) + 12 | 0) >> 1] | 0) + -2 | 0;
    label$8 : {
     label$9 : {
      switch ($128_1 | 0) {
      case 0:
       $30(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[(($4_1 + 16 | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
       break label$8;
      case 2:
       $31(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, (HEAP32[(($4_1 + 16 | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[(($4_1 + 16 | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0);
       break label$8;
      case 1:
       $32(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, (HEAP32[(($4_1 + 16 | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[(($4_1 + 16 | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0);
       break label$8;
      case 3:
       break label$9;
      default:
       break label$8;
      };
     }
     $33(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, (HEAP32[(($4_1 + 16 | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[(($4_1 + 16 | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + -1 | 0;
    continue label$5;
   };
  }
  global$0 = $4_1 + 80 | 0;
  return;
 }
 
 function $30($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $32_1 = 0, $33_1 = 0, $57_1 = 0, $58_1 = 0, $67_1 = 0, $68_1 = 0, $75_1 = 0, $76_1 = 0, $85_1 = 0, $86_1 = 0, $234 = 0, $328 = 0;
  $5_1 = global$0 - 48 | 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $234 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1 + 16 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $234;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAPF32[(HEAP32[($5_1 + 32 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]));
      HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]));
      $32_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
      HEAPF32[$32_1 >> 2] = Math_fround(Math_fround(HEAPF32[$32_1 >> 2]) + Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]));
      $33_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
      HEAPF32[($33_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($33_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]));
      HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 16 | 0;
      HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    break label$1;
   }
   HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(.7071067690849304);
   HEAP32[($5_1 + 28 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 32 | 0;
     i64toi32_i32$2 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $328 = i64toi32_i32$1;
     i64toi32_i32$1 = $5_1;
     HEAP32[$5_1 >> 2] = $328;
     HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAPF32[(HEAP32[($5_1 + 32 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2]) - Math_fround(HEAPF32[$5_1 >> 2]));
     HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]));
     $57_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     HEAPF32[$57_1 >> 2] = Math_fround(Math_fround(HEAPF32[$57_1 >> 2]) + Math_fround(HEAPF32[$5_1 >> 2]));
     $58_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     HEAPF32[($58_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($58_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]));
     HEAPF32[$5_1 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 12 | 0) >> 2])) * Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]));
     HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 12 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 2])) * Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]));
     HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2]) - Math_fround(HEAPF32[$5_1 >> 2]));
     HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]));
     $67_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     HEAPF32[($67_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($67_1 + 8 | 0) >> 2]) + Math_fround(HEAPF32[$5_1 >> 2]));
     $68_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     HEAPF32[($68_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($68_1 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]));
     HEAPF32[$5_1 >> 2] = Math_fround(HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 20 | 0) >> 2]);
     HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 16 | 0) >> 2]));
     HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2]) - Math_fround(HEAPF32[$5_1 >> 2]));
     HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 20 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]));
     $75_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     HEAPF32[($75_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($75_1 + 16 | 0) >> 2]) + Math_fround(HEAPF32[$5_1 >> 2]));
     $76_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     HEAPF32[($76_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($76_1 + 20 | 0) >> 2]) + Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]));
     HEAPF32[$5_1 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 28 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 24 | 0) >> 2])) * Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]));
     HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(Math_fround(-Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 28 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 24 | 0) >> 2]))) * Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]));
     HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 24 | 0) >> 2]) - Math_fround(HEAPF32[$5_1 >> 2]));
     HEAPF32[((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 28 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]));
     $85_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     HEAPF32[($85_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($85_1 + 24 | 0) >> 2]) + Math_fround(HEAPF32[$5_1 >> 2]));
     $86_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
     HEAPF32[($86_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($86_1 + 28 | 0) >> 2]) + Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]));
     HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 64 | 0;
     HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
  }
  return;
 }
 
 function $31($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $79_1 = 0, $29_1 = 0, $31_1 = 0, $40_1 = 0, $41_1 = 0, $162 = 0, $163 = 0, $195 = 0, $196 = 0;
  $8_1 = global$0 - 144 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 136 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 132 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 128 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 124 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 120 | 0) >> 2] = $5_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 128 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($8_1 + 116 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($8_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF32[($8_1 + 104 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($8_1 + 140 | 0) >> 2] | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 16 | 0) >> 2]));
      HEAPF32[($8_1 + 108 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 4 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 20 | 0) >> 2]));
      $29_1 = HEAP32[($8_1 + 140 | 0) >> 2] | 0;
      HEAPF32[$29_1 >> 2] = Math_fround(Math_fround(HEAPF32[$29_1 >> 2]) + Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 16 | 0) >> 2]));
      $31_1 = HEAP32[($8_1 + 140 | 0) >> 2] | 0;
      HEAPF32[($31_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($31_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 20 | 0) >> 2]));
      HEAPF32[($8_1 + 96 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 8 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 24 | 0) >> 2]));
      HEAPF32[($8_1 + 100 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 12 | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 28 | 0) >> 2]));
      HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($8_1 + 140 | 0) >> 2] | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 96 | 0) >> 2]));
      HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 4 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 100 | 0) >> 2]));
      $40_1 = HEAP32[($8_1 + 140 | 0) >> 2] | 0;
      HEAPF32[$40_1 >> 2] = Math_fround(Math_fround(HEAPF32[$40_1 >> 2]) + Math_fround(HEAPF32[($8_1 + 96 | 0) >> 2]));
      $41_1 = HEAP32[($8_1 + 140 | 0) >> 2] | 0;
      HEAPF32[($41_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($41_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 100 | 0) >> 2]));
      HEAPF32[($8_1 + 96 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 8 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 24 | 0) >> 2]));
      HEAPF32[($8_1 + 100 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 12 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 28 | 0) >> 2]));
      HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 104 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 100 | 0) >> 2]));
      HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 108 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 96 | 0) >> 2]));
      HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 104 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 100 | 0) >> 2]));
      HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 108 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 96 | 0) >> 2]));
      HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 32 | 0;
      HEAP32[($8_1 + 116 | 0) >> 2] = (HEAP32[($8_1 + 116 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    break label$1;
   }
   HEAP32[($8_1 + 16 | 0) >> 2] = (HEAP32[($8_1 + 128 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($8_1 + 12 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 128 | 0) >> 2] | 0, 3);
   HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[($8_1 + 140 | 0) >> 2] | 0;
   HEAP32[($8_1 + 116 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($8_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 8 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 116 | 0) >> 2] | 0, HEAP32[($8_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0;
     $79_1 = HEAP32[((HEAP32[($8_1 + 132 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
     HEAP32[($8_1 + 28 | 0) >> 2] = $79_1;
     HEAP32[($8_1 + 24 | 0) >> 2] = $79_1;
     HEAP32[($8_1 + 20 | 0) >> 2] = $79_1;
     HEAP32[($8_1 + 92 | 0) >> 2] = 0;
     label$7 : {
      label$8 : while (1) {
       if (!((HEAP32[($8_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 128 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$7
       }
       HEAPF32[($8_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2]) * Math_fround(HEAPF32[(HEAP32[($8_1 + 28 | 0) >> 2] | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[(((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2])));
       HEAPF32[($8_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[(((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[(HEAP32[($8_1 + 28 | 0) >> 2] | 0) >> 2])));
       HEAPF32[($8_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2]) * Math_fround(HEAPF32[(HEAP32[($8_1 + 24 | 0) >> 2] | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[(((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2])));
       HEAPF32[($8_1 + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[(((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[(HEAP32[($8_1 + 24 | 0) >> 2] | 0) >> 2])));
       HEAPF32[($8_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2]) * Math_fround(HEAPF32[(HEAP32[($8_1 + 20 | 0) >> 2] | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[(((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2])));
       HEAPF32[($8_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[(((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[(HEAP32[($8_1 + 20 | 0) >> 2] | 0) >> 2])));
       HEAPF32[($8_1 + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($8_1 + 140 | 0) >> 2] | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]));
       HEAPF32[($8_1 + 76 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 4 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 44 | 0) >> 2]));
       $162 = HEAP32[($8_1 + 140 | 0) >> 2] | 0;
       HEAPF32[$162 >> 2] = Math_fround(Math_fround(HEAPF32[$162 >> 2]) + Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]));
       $163 = HEAP32[($8_1 + 140 | 0) >> 2] | 0;
       HEAPF32[($163 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($163 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 44 | 0) >> 2]));
       HEAPF32[($8_1 + 56 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]));
       HEAPF32[($8_1 + 60 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2]));
       HEAPF32[($8_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]));
       HEAPF32[($8_1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2]));
       HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($8_1 + 140 | 0) >> 2] | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2]));
       HEAPF32[(((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 4 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 60 | 0) >> 2]));
       HEAP32[($8_1 + 28 | 0) >> 2] = (HEAP32[($8_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = (HEAP32[($8_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 136 | 0) >> 2] | 0) << 1 | 0) << 3 | 0) | 0;
       HEAP32[($8_1 + 20 | 0) >> 2] = (HEAP32[($8_1 + 20 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 136 | 0) >> 2] | 0, 3) << 3 | 0) | 0;
       $195 = HEAP32[($8_1 + 140 | 0) >> 2] | 0;
       HEAPF32[$195 >> 2] = Math_fround(Math_fround(HEAPF32[$195 >> 2]) + Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2]));
       $196 = HEAP32[($8_1 + 140 | 0) >> 2] | 0;
       HEAPF32[($196 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($196 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 60 | 0) >> 2]));
       HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 72 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]));
       HEAPF32[(((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 76 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]));
       HEAPF32[((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 72 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]));
       HEAPF32[(((HEAP32[($8_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 76 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]));
       HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 8 | 0;
       HEAP32[($8_1 + 92 | 0) >> 2] = (HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 1 | 0;
       continue label$8;
      };
     }
     HEAP32[($8_1 + 116 | 0) >> 2] = (HEAP32[($8_1 + 116 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
  }
  global$0 = $8_1 + 144 | 0;
  return;
 }
 
 function $32($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $40_1 = 0, $114_1 = 0, $115_1 = 0, $161 = 0, i64toi32_i32$1 = 0, $291 = 0;
  $8_1 = global$0 - 112 | 0;
  HEAP32[($8_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 100 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 96 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 92 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 88 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 76 | 0) >> 2] = (HEAP32[($8_1 + 96 | 0) >> 2] | 0) << 1 | 0;
  HEAP32[($8_1 + 4 | 0) >> 2] = HEAP32[($8_1 + 108 | 0) >> 2] | 0;
  i64toi32_i32$2 = (HEAP32[((HEAP32[($8_1 + 100 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 104 | 0) >> 2] | 0, HEAP32[($8_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $291 = i64toi32_i32$0;
  i64toi32_i32$0 = $8_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $291;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($8_1 + 84 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($8_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($8_1 + 108 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 84 | 0) >> 2] | 0, HEAP32[($8_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0;
    $40_1 = HEAP32[((HEAP32[($8_1 + 100 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    HEAP32[($8_1 + 68 | 0) >> 2] = $40_1;
    HEAP32[($8_1 + 72 | 0) >> 2] = $40_1;
    HEAP32[($8_1 + 80 | 0) >> 2] = HEAP32[($8_1 + 96 | 0) >> 2] | 0;
    label$3 : while (1) {
     HEAPF32[($8_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2]) * Math_fround(HEAPF32[(HEAP32[($8_1 + 72 | 0) >> 2] | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[(((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2])));
     HEAPF32[($8_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[(((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[(HEAP32[($8_1 + 72 | 0) >> 2] | 0) >> 2])));
     HEAPF32[($8_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2]) * Math_fround(HEAPF32[(HEAP32[($8_1 + 68 | 0) >> 2] | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[(((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 68 | 0) >> 2] | 0) + 4 | 0) >> 2])));
     HEAPF32[($8_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 68 | 0) >> 2] | 0) + 4 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[(((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[(HEAP32[($8_1 + 68 | 0) >> 2] | 0) >> 2])));
     HEAPF32[($8_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]));
     HEAPF32[($8_1 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 28 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]));
     HEAPF32[($8_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]));
     HEAPF32[($8_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 28 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]));
     HEAP32[($8_1 + 72 | 0) >> 2] = (HEAP32[($8_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAP32[($8_1 + 68 | 0) >> 2] = (HEAP32[($8_1 + 68 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 104 | 0) >> 2] | 0) << 1 | 0) << 3 | 0) | 0;
     HEAPF32[((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($8_1 + 108 | 0) >> 2] | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]) * Math_fround(.5)));
     HEAPF32[(((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + 4 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($8_1 + 44 | 0) >> 2]) * Math_fround(.5)));
     HEAPF32[($8_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]));
     HEAPF32[($8_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]));
     $114_1 = HEAP32[($8_1 + 108 | 0) >> 2] | 0;
     HEAPF32[$114_1 >> 2] = Math_fround(Math_fround(HEAPF32[$114_1 >> 2]) + Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]));
     $115_1 = HEAP32[($8_1 + 108 | 0) >> 2] | 0;
     HEAPF32[($115_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($115_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 44 | 0) >> 2]));
     HEAPF32[((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]));
     HEAPF32[(((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]));
     HEAPF32[((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]));
     HEAPF32[(((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(((HEAP32[($8_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]));
     HEAP32[($8_1 + 108 | 0) >> 2] = (HEAP32[($8_1 + 108 | 0) >> 2] | 0) + 8 | 0;
     $161 = (HEAP32[($8_1 + 80 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($8_1 + 80 | 0) >> 2] = $161;
     if ($161) {
      continue label$3
     }
     break label$3;
    };
    HEAP32[($8_1 + 84 | 0) >> 2] = (HEAP32[($8_1 + 84 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $33($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $504 = 0, $532 = 0, $658 = 0;
  $8_1 = global$0 - 192 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 184 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 176 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 172 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 168 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 4 | 0) >> 2] = HEAP32[($8_1 + 188 | 0) >> 2] | 0;
  i64toi32_i32$2 = (HEAP32[((HEAP32[($8_1 + 180 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 184 | 0) >> 2] | 0, HEAP32[($8_1 + 176 | 0) >> 2] | 0) << 3 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $504 = i64toi32_i32$0;
  i64toi32_i32$0 = $8_1 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $504;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = (HEAP32[((HEAP32[($8_1 + 180 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) + (Math_imul((HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 1 | 0, HEAP32[($8_1 + 176 | 0) >> 2] | 0) << 3 | 0) | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $532 = i64toi32_i32$1;
  i64toi32_i32$1 = $8_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $532;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($8_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($8_1 + 180 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
  HEAP32[($8_1 + 144 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 172 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($8_1 + 188 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 144 | 0) >> 2] | 0, HEAP32[($8_1 + 168 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAP32[($8_1 + 164 | 0) >> 2] = HEAP32[($8_1 + 188 | 0) >> 2] | 0;
    HEAP32[($8_1 + 160 | 0) >> 2] = (HEAP32[($8_1 + 164 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 176 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAP32[($8_1 + 156 | 0) >> 2] = (HEAP32[($8_1 + 164 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 176 | 0) >> 2] | 0) << 1 | 0) << 3 | 0) | 0;
    HEAP32[($8_1 + 152 | 0) >> 2] = (HEAP32[($8_1 + 164 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 176 | 0) >> 2] | 0, 3) << 3 | 0) | 0;
    HEAP32[($8_1 + 148 | 0) >> 2] = (HEAP32[($8_1 + 164 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 176 | 0) >> 2] | 0) << 2 | 0) << 3 | 0) | 0;
    HEAP32[($8_1 + 140 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      i64toi32_i32$2 = HEAP32[($8_1 + 164 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $658 = i64toi32_i32$0;
      i64toi32_i32$0 = $8_1 + 32 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $658;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAPF32[($8_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[($8_1 + 160 | 0) >> 2] | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 160 | 0) >> 2] | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2])));
      HEAPF32[($8_1 + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[($8_1 + 160 | 0) >> 2] | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 160 | 0) >> 2] | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2])));
      HEAPF32[($8_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[($8_1 + 156 | 0) >> 2] | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul((HEAP32[($8_1 + 140 | 0) >> 2] | 0) << 1 | 0, HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul((HEAP32[($8_1 + 140 | 0) >> 2] | 0) << 1 | 0, HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2])));
      HEAPF32[($8_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[($8_1 + 156 | 0) >> 2] | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul((HEAP32[($8_1 + 140 | 0) >> 2] | 0) << 1 | 0, HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul((HEAP32[($8_1 + 140 | 0) >> 2] | 0) << 1 | 0, HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2])));
      HEAPF32[($8_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[($8_1 + 152 | 0) >> 2] | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul(Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, 3), HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul(Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, 3), HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2])));
      HEAPF32[($8_1 + 60 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[($8_1 + 152 | 0) >> 2] | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul(Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, 3), HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul(Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, 3), HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2])));
      HEAPF32[($8_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul((HEAP32[($8_1 + 140 | 0) >> 2] | 0) << 2 | 0, HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul((HEAP32[($8_1 + 140 | 0) >> 2] | 0) << 2 | 0, HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2])));
      HEAPF32[($8_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul((HEAP32[($8_1 + 140 | 0) >> 2] | 0) << 2 | 0, HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (Math_imul((HEAP32[($8_1 + 140 | 0) >> 2] | 0) << 2 | 0, HEAP32[($8_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2])));
      HEAPF32[($8_1 + 88 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]));
      HEAPF32[($8_1 + 92 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 44 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]));
      HEAPF32[($8_1 + 112 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 64 | 0) >> 2]));
      HEAPF32[($8_1 + 116 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 44 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 68 | 0) >> 2]));
      HEAPF32[($8_1 + 96 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2]));
      HEAPF32[($8_1 + 100 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 60 | 0) >> 2]));
      HEAPF32[($8_1 + 104 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2]));
      HEAPF32[($8_1 + 108 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 60 | 0) >> 2]));
      HEAPF32[(HEAP32[($8_1 + 164 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($8_1 + 164 | 0) >> 2] | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($8_1 + 88 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 96 | 0) >> 2])));
      HEAPF32[((HEAP32[($8_1 + 164 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 164 | 0) >> 2] | 0) + 4 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($8_1 + 92 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 100 | 0) >> 2])));
      HEAPF32[($8_1 + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 88 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($8_1 + 96 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]))));
      HEAPF32[($8_1 + 76 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 92 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($8_1 + 100 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]))));
      HEAPF32[($8_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 116 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($8_1 + 108 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2])));
      HEAPF32[($8_1 + 84 | 0) >> 2] = Math_fround(-Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 112 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($8_1 + 104 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]))));
      HEAPF32[(HEAP32[($8_1 + 160 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 72 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 80 | 0) >> 2]));
      HEAPF32[((HEAP32[($8_1 + 160 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 76 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 84 | 0) >> 2]));
      HEAPF32[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 72 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 80 | 0) >> 2]));
      HEAPF32[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 76 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 84 | 0) >> 2]));
      HEAPF32[($8_1 + 120 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 88 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($8_1 + 96 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]))));
      HEAPF32[($8_1 + 124 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 92 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($8_1 + 100 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]))));
      HEAPF32[($8_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 108 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[($8_1 + 116 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2])));
      HEAPF32[($8_1 + 132 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($8_1 + 112 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[($8_1 + 104 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2])));
      HEAPF32[(HEAP32[($8_1 + 156 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 120 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 128 | 0) >> 2]));
      HEAPF32[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 124 | 0) >> 2]) + Math_fround(HEAPF32[($8_1 + 132 | 0) >> 2]));
      HEAPF32[(HEAP32[($8_1 + 152 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 120 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 128 | 0) >> 2]));
      HEAPF32[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 124 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 132 | 0) >> 2]));
      HEAP32[($8_1 + 164 | 0) >> 2] = (HEAP32[($8_1 + 164 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($8_1 + 160 | 0) >> 2] = (HEAP32[($8_1 + 160 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($8_1 + 156 | 0) >> 2] = (HEAP32[($8_1 + 156 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($8_1 + 152 | 0) >> 2] = (HEAP32[($8_1 + 152 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($8_1 + 148 | 0) >> 2] = (HEAP32[($8_1 + 148 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($8_1 + 144 | 0) >> 2] = (HEAP32[($8_1 + 144 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $8_1 + 192 | 0;
  return;
 }
 
 function $34($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, $30_1 = 0, $44_1 = 0, i64toi32_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2]);
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    i64toi32_i32$2 = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    HEAP32[$5_1 >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $30_1 = 16;
    HEAPF32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + ((((HEAPU16[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $30_1 | 0) >> $30_1 | 0) << 3 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[$5_1 >> 2]));
    $44_1 = 16;
    HEAPF32[(((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + ((((HEAPU16[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $44_1 | 0) >> $44_1 | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]));
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $29(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $35($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $284 = 0, $115_1 = 0, $123_1 = 0, $131 = 0, $156 = 0;
  $6_1 = global$0 - 160 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 156 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 152 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 148 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 144 | 0) >> 2] = $3_1;
  HEAPF32[($6_1 + 108 | 0) >> 2] = Math_fround(1.0);
  i64toi32_i32$0 = 0;
  $284 = 0;
  i64toi32_i32$1 = $6_1 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $284;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $284;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround(.800000011920929);
  HEAP32[($6_1 + 140 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 148 | 0) >> 2] | 0) >> 1 | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF32[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 140 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(.5) * Math_fround(Math_fround(Math_fround(.5) * Math_fround(Math_fround(HEAPF32[((HEAP32[(HEAP32[($6_1 + 156 | 0) >> 2] | 0) >> 2] | 0) + ((((HEAP32[($6_1 + 140 | 0) >> 2] | 0) << 1 | 0) - 1 | 0) << 2 | 0) | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[(HEAP32[($6_1 + 156 | 0) >> 2] | 0) >> 2] | 0) + ((((HEAP32[($6_1 + 140 | 0) >> 2] | 0) << 1 | 0) + 1 | 0) << 2 | 0) | 0) >> 2]))) + Math_fround(HEAPF32[((HEAP32[(HEAP32[($6_1 + 156 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($6_1 + 140 | 0) >> 2] | 0) << 1 | 0) << 2 | 0) | 0) >> 2])));
    HEAP32[($6_1 + 140 | 0) >> 2] = (HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF32[(HEAP32[($6_1 + 152 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(.5) * Math_fround(Math_fround(Math_fround(.5) * Math_fround(HEAPF32[((HEAP32[(HEAP32[($6_1 + 156 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2])) + Math_fround(HEAPF32[(HEAP32[(HEAP32[($6_1 + 156 | 0) >> 2] | 0) >> 2] | 0) >> 2])));
  label$3 : {
   if (!((HEAP32[($6_1 + 144 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($6_1 + 140 | 0) >> 2] = 1;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 148 | 0) >> 2] | 0) >> 1 | 0 | 0) & 1 | 0)) {
      break label$4
     }
     $115_1 = (HEAP32[($6_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 140 | 0) >> 2] | 0) << 2 | 0) | 0;
     HEAPF32[$115_1 >> 2] = Math_fround(Math_fround(HEAPF32[$115_1 >> 2]) + Math_fround(Math_fround(.5) * Math_fround(Math_fround(Math_fround(.5) * Math_fround(Math_fround(HEAPF32[((HEAP32[((HEAP32[($6_1 + 156 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((((HEAP32[($6_1 + 140 | 0) >> 2] | 0) << 1 | 0) - 1 | 0) << 2 | 0) | 0) >> 2]) + Math_fround(HEAPF32[((HEAP32[((HEAP32[($6_1 + 156 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((((HEAP32[($6_1 + 140 | 0) >> 2] | 0) << 1 | 0) + 1 | 0) << 2 | 0) | 0) >> 2]))) + Math_fround(HEAPF32[((HEAP32[((HEAP32[($6_1 + 156 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 140 | 0) >> 2] | 0) << 1 | 0) << 2 | 0) | 0) >> 2]))));
     HEAP32[($6_1 + 140 | 0) >> 2] = (HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   $123_1 = HEAP32[($6_1 + 152 | 0) >> 2] | 0;
   HEAPF32[$123_1 >> 2] = Math_fround(Math_fround(HEAPF32[$123_1 >> 2]) + Math_fround(Math_fround(.5) * Math_fround(Math_fround(Math_fround(.5) * Math_fround(HEAPF32[((HEAP32[((HEAP32[($6_1 + 156 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2])) + Math_fround(HEAPF32[(HEAP32[((HEAP32[($6_1 + 156 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2]))));
  }
  $131 = 0;
  $2(HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0, $6_1 + 112 | 0 | 0, $131 | 0, $131 | 0, 4 | 0, (HEAP32[($6_1 + 148 | 0) >> 2] | 0) >> 1 | 0 | 0) | 0;
  HEAPF32[($6_1 + 112 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 112 | 0) >> 2]) * Math_fround(1.000100016593933));
  HEAP32[($6_1 + 140 | 0) >> 2] = 1;
  label$6 : {
   label$7 : while (1) {
    if (!((HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) <= (4 | 0) & 1 | 0)) {
     break label$6
    }
    $156 = ($6_1 + 112 | 0) + ((HEAP32[($6_1 + 140 | 0) >> 2] | 0) << 2 | 0) | 0;
    HEAPF32[$156 >> 2] = Math_fround(Math_fround(HEAPF32[$156 >> 2]) - Math_fround(Math_fround(Math_fround(HEAPF32[(($6_1 + 112 | 0) + ((HEAP32[($6_1 + 140 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(Math_fround(.00800000037997961) * Math_fround(HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0))) * Math_fround(Math_fround(.00800000037997961) * Math_fround(HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0))));
    HEAP32[($6_1 + 140 | 0) >> 2] = (HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 1 | 0;
    continue label$7;
   };
  }
  $1($6_1 + 80 | 0 | 0, $6_1 + 112 | 0 | 0, 4 | 0);
  HEAP32[($6_1 + 140 | 0) >> 2] = 0;
  label$8 : {
   label$9 : while (1) {
    if (!((HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
     break label$8
    }
    HEAPF32[($6_1 + 108 | 0) >> 2] = Math_fround(Math_fround(.8999999761581421) * Math_fround(HEAPF32[($6_1 + 108 | 0) >> 2]));
    HEAPF32[(($6_1 + 80 | 0) + ((HEAP32[($6_1 + 140 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(($6_1 + 80 | 0) + ((HEAP32[($6_1 + 140 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 108 | 0) >> 2]));
    HEAP32[($6_1 + 140 | 0) >> 2] = (HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 1 | 0;
    continue label$9;
   };
  }
  HEAPF32[($6_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 80 | 0) >> 2]) + Math_fround(.800000011920929));
  HEAPF32[($6_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 84 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 80 | 0) >> 2])));
  HEAPF32[($6_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 84 | 0) >> 2])));
  HEAPF32[($6_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 92 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2])));
  HEAPF32[($6_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 92 | 0) >> 2]));
  $36(HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 148 | 0) >> 2] | 0) >> 1 | 0 | 0, $6_1 + 48 | 0 | 0);
  global$0 = $6_1 + 160 | 0;
  return;
 }
 
 function $36($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 80 | 0;
  HEAP32[($7_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $4_1;
  HEAPF32[($7_1 + 52 | 0) >> 2] = Math_fround(HEAPF32[(HEAP32[($7_1 + 72 | 0) >> 2] | 0) >> 2]);
  HEAPF32[($7_1 + 48 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2]);
  HEAPF32[($7_1 + 44 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2]);
  HEAPF32[($7_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2]);
  HEAPF32[($7_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + 16 | 0) >> 2]);
  HEAPF32[($7_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[(HEAP32[($7_1 + 60 | 0) >> 2] | 0) >> 2]);
  HEAPF32[($7_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2]);
  HEAPF32[($7_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 2]);
  HEAPF32[($7_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2]);
  HEAPF32[($7_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 16 | 0) >> 2]);
  HEAP32[($7_1 + 56 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($7_1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2])));
    HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($7_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 28 | 0) >> 2])));
    HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($7_1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2])));
    HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($7_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2])));
    HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($7_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2])));
    HEAPF32[($7_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
    HEAPF32[($7_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
    HEAPF32[($7_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 28 | 0) >> 2]);
    HEAPF32[($7_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]);
    HEAPF32[($7_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAPF32[((HEAP32[($7_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
    HEAP32[($7_1 + 56 | 0) >> 2] = (HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF32[(HEAP32[($7_1 + 60 | 0) >> 2] | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]);
  HEAPF32[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 28 | 0) >> 2]);
  HEAPF32[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
  HEAPF32[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  HEAPF32[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 16 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
  return;
 }
 
 function $37($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $86_1 = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) - 3 | 0 | 0) & 1 | 0)) {
     break label$1
    }
    i64toi32_i32$0 = 0;
    $86_1 = 0;
    i64toi32_i32$1 = $7_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $86_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $86_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $38(HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, $7_1 + 16 | 0 | 0, HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0);
    HEAPF32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
    HEAPF32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
    HEAPF32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 2 | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
    HEAPF32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 3 | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 28 | 0) >> 2]);
    HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 4 | 0;
    continue label$2;
   };
  }
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround($39(HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0));
    HEAPF32[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
    HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  global$0 = $7_1 + 64 | 0;
  return;
 }
 
 function $38($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $14_1 = 0, $27_1 = 0, $30_1 = 0, $41_1 = 0, $44_1 = 0, $55_1 = 0, $58_1 = 0, $69_1 = 0, $72_1 = 0, $86_1 = 0, $95_1 = 0, $98_1 = 0, $109_1 = 0, $118_1 = 0, $121_1 = 0, $139 = 0, $142 = 0;
  $6_1 = global$0 - 64 | 0;
  HEAP32[($6_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $3_1;
  HEAPF32[($6_1 + 28 | 0) >> 2] = Math_fround(0 | 0);
  $8_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
  HEAP32[($6_1 + 56 | 0) >> 2] = $8_1 + 4 | 0;
  HEAPF32[($6_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[$8_1 >> 2]);
  $11_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
  HEAP32[($6_1 + 56 | 0) >> 2] = $11_1 + 4 | 0;
  HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[$11_1 >> 2]);
  $14_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
  HEAP32[($6_1 + 56 | 0) >> 2] = $14_1 + 4 | 0;
  HEAPF32[($6_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[$14_1 >> 2]);
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 48 | 0) >> 2] | 0) - 3 | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $27_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = $27_1 + 4 | 0;
    HEAPF32[($6_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[$27_1 >> 2]);
    $30_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
    HEAP32[($6_1 + 56 | 0) >> 2] = $30_1 + 4 | 0;
    HEAPF32[($6_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[$30_1 >> 2]);
    HEAPF32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2])));
    HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2])));
    HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2])));
    HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2])));
    $41_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = $41_1 + 4 | 0;
    HEAPF32[($6_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[$41_1 >> 2]);
    $44_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
    HEAP32[($6_1 + 56 | 0) >> 2] = $44_1 + 4 | 0;
    HEAPF32[($6_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[$44_1 >> 2]);
    HEAPF32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2])));
    HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2])));
    HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2])));
    HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2])));
    $55_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = $55_1 + 4 | 0;
    HEAPF32[($6_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[$55_1 >> 2]);
    $58_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
    HEAP32[($6_1 + 56 | 0) >> 2] = $58_1 + 4 | 0;
    HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[$58_1 >> 2]);
    HEAPF32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2])));
    HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2])));
    HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2])));
    HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2])));
    $69_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = $69_1 + 4 | 0;
    HEAPF32[($6_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[$69_1 >> 2]);
    $72_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
    HEAP32[($6_1 + 56 | 0) >> 2] = $72_1 + 4 | 0;
    HEAPF32[($6_1 + 32 | 0) >> 2] = Math_fround(HEAPF32[$72_1 >> 2]);
    HEAPF32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2])));
    HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2])));
    HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2])));
    HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2])));
    HEAP32[($6_1 + 44 | 0) >> 2] = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 4 | 0;
    continue label$2;
   };
  }
  $86_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = $86_1 + 1 | 0;
  label$3 : {
   if (!(($86_1 | 0) < (HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$3
   }
   $95_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
   HEAP32[($6_1 + 60 | 0) >> 2] = $95_1 + 4 | 0;
   HEAPF32[($6_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[$95_1 >> 2]);
   $98_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
   HEAP32[($6_1 + 56 | 0) >> 2] = $98_1 + 4 | 0;
   HEAPF32[($6_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[$98_1 >> 2]);
   HEAPF32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2])));
   HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2])));
   HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2])));
   HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2])));
  }
  $109_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = $109_1 + 1 | 0;
  label$4 : {
   if (!(($109_1 | 0) < (HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$4
   }
   $118_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
   HEAP32[($6_1 + 60 | 0) >> 2] = $118_1 + 4 | 0;
   HEAPF32[($6_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[$118_1 >> 2]);
   $121_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
   HEAP32[($6_1 + 56 | 0) >> 2] = $121_1 + 4 | 0;
   HEAPF32[($6_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[$121_1 >> 2]);
   HEAPF32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2])));
   HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2])));
   HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2])));
   HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2])));
  }
  label$5 : {
   if (!((HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$5
   }
   $139 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
   HEAP32[($6_1 + 60 | 0) >> 2] = $139 + 4 | 0;
   HEAPF32[($6_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[$139 >> 2]);
   $142 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
   HEAP32[($6_1 + 56 | 0) >> 2] = $142 + 4 | 0;
   HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[$142 >> 2]);
   HEAPF32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2])));
   HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2])));
   HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2])));
   HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2])));
  }
  return;
 }
 
 function $39($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])));
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]));
 }
 
 function $40($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $8_1 = 0, $38_1 = 0, $7_1 = 0, $30_1 = 0, $13_1 = 0, $18_1 = 0, $20_1 = 0, $23_1 = 0, $12_1 = 0, $16_1 = 0, $24_1 = 0, $33_1 = 0, $231 = Math_fround(0), i64toi32_i32$0 = 0;
  $7_1 = global$0 - 80 | 0;
  $8_1 = $7_1;
  global$0 = $8_1;
  HEAP32[($8_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[($8_1 + 40 | 0) >> 2] = 0;
  HEAP32[($8_1 + 44 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($8_1 + 48 | 0) >> 2] = (HEAP32[($8_1 + 68 | 0) >> 2] | 0) + (HEAP32[($8_1 + 64 | 0) >> 2] | 0) | 0;
  $12_1 = HEAP32[($8_1 + 68 | 0) >> 2] | 0;
  $13_1 = 2;
  HEAP32[($8_1 + 32 | 0) >> 2] = $8_1;
  $16_1 = -4;
  $18_1 = 15;
  $20_1 = -16;
  $23_1 = $8_1 - ((($12_1 & $16_1 | 0) + $18_1 | 0) & $20_1 | 0) | 0;
  $7_1 = $23_1;
  global$0 = $7_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $12_1 >> $13_1 | 0;
  $24_1 = HEAP32[($8_1 + 48 | 0) >> 2] | 0;
  $30_1 = $7_1 - ((($24_1 & $16_1 | 0) + $18_1 | 0) & $20_1 | 0) | 0;
  $7_1 = $30_1;
  global$0 = $7_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $24_1 >> $13_1 | 0;
  $33_1 = (HEAP32[($8_1 + 64 | 0) >> 2] | 0) >> 1 | 0;
  $38_1 = $7_1 - ((($33_1 << $13_1 | 0) + $18_1 | 0) & $20_1 | 0) | 0;
  $7_1 = $38_1;
  global$0 = $38_1;
  HEAP32[($8_1 + 20 | 0) >> 2] = $33_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) < ((HEAP32[($8_1 + 68 | 0) >> 2] | 0) >> 2 | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF32[($23_1 + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($8_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 1 | 0) << 2 | 0) | 0) >> 2]);
    HEAP32[($8_1 + 52 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($8_1 + 52 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) < ((HEAP32[($8_1 + 48 | 0) >> 2] | 0) >> 2 | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF32[($30_1 + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($8_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 1 | 0) << 2 | 0) | 0) >> 2]);
    HEAP32[($8_1 + 52 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $37($23_1 | 0, $30_1 | 0, $38_1 | 0, (HEAP32[($8_1 + 68 | 0) >> 2] | 0) >> 2 | 0 | 0, (HEAP32[($8_1 + 64 | 0) >> 2] | 0) >> 2 | 0 | 0);
  $41($38_1 | 0, $30_1 | 0, (HEAP32[($8_1 + 68 | 0) >> 2] | 0) >> 2 | 0 | 0, (HEAP32[($8_1 + 64 | 0) >> 2] | 0) >> 2 | 0 | 0, $8_1 + 40 | 0 | 0);
  HEAP32[($8_1 + 56 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) < ((HEAP32[($8_1 + 64 | 0) >> 2] | 0) >> 1 | 0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF32[($38_1 + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(0 | 0);
    label$7 : {
     label$8 : {
      if (!(($84((HEAP32[($8_1 + 56 | 0) >> 2] | 0) - ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 1 | 0) | 0 | 0) | 0 | 0) > (2 | 0) & 1 | 0)) {
       break label$8
      }
      if (!(($84((HEAP32[($8_1 + 56 | 0) >> 2] | 0) - ((HEAP32[($8_1 + 44 | 0) >> 2] | 0) << 1 | 0) | 0 | 0) | 0 | 0) > (2 | 0) & 1 | 0)) {
       break label$8
      }
      break label$7;
     }
     HEAPF32[($8_1 + 16 | 0) >> 2] = Math_fround($39(HEAP32[($8_1 + 76 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, (HEAP32[($8_1 + 68 | 0) >> 2] | 0) >> 1 | 0 | 0));
     label$9 : {
      label$10 : {
       if (!(Math_fround(-1.0) > Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]) & 1 | 0)) {
        break label$10
       }
       $231 = Math_fround(-1.0);
       break label$9;
      }
      $231 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
     }
     HEAPF32[($38_1 + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $231;
    }
    HEAP32[($8_1 + 56 | 0) >> 2] = (HEAP32[($8_1 + 56 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  $41($38_1 | 0, HEAP32[($8_1 + 72 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 68 | 0) >> 2] | 0) >> 1 | 0 | 0, (HEAP32[($8_1 + 64 | 0) >> 2] | 0) >> 1 | 0 | 0, $8_1 + 40 | 0 | 0);
  label$11 : {
   label$12 : {
    if (!((HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$12
    }
    if (!((HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) < (((HEAP32[($8_1 + 64 | 0) >> 2] | 0) >> 1 | 0) - 1 | 0 | 0) & 1 | 0)) {
     break label$12
    }
    HEAPF32[($8_1 + 12 | 0) >> 2] = Math_fround(HEAPF32[($38_1 + (((HEAP32[($8_1 + 40 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2]);
    HEAPF32[($8_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($38_1 + ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAPF32[($8_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($38_1 + (((HEAP32[($8_1 + 40 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2]);
    label$13 : {
     label$14 : {
      if (!(Math_fround(Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2])) > Math_fround(Math_fround(.699999988079071) * Math_fround(Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]))) & 1 | 0)) {
       break label$14
      }
      HEAP32[($8_1 + 36 | 0) >> 2] = 1;
      break label$13;
     }
     label$15 : {
      label$16 : {
       if (!(Math_fround(Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2])) > Math_fround(Math_fround(.699999988079071) * Math_fround(Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]))) & 1 | 0)) {
        break label$16
       }
       HEAP32[($8_1 + 36 | 0) >> 2] = -1;
       break label$15;
      }
      HEAP32[($8_1 + 36 | 0) >> 2] = 0;
     }
    }
    break label$11;
   }
   HEAP32[($8_1 + 36 | 0) >> 2] = 0;
  }
  HEAP32[(HEAP32[($8_1 + 60 | 0) >> 2] | 0) >> 2] = ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 1 | 0) - (HEAP32[($8_1 + 36 | 0) >> 2] | 0) | 0;
  $7_1 = HEAP32[($8_1 + 32 | 0) >> 2] | 0;
  global$0 = $8_1 + 80 | 0;
  return;
 }
 
 function $41($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $149 = Math_fround(0);
  $7_1 = global$0 - 64 | 0;
  HEAP32[($7_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $4_1;
  HEAPF32[($7_1 + 32 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($7_1 + 24 | 0) >> 2] = Math_fround(-1.0);
  HEAPF32[($7_1 + 28 | 0) >> 2] = Math_fround(-1.0);
  HEAPF32[($7_1 + 16 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7_1 + 20 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[(HEAP32[($7_1 + 44 | 0) >> 2] | 0) >> 2] = 0;
  HEAP32[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] = 1;
  HEAP32[($7_1 + 36 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF32[($7_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])));
    HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($7_1 + 40 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     if (!(Math_fround(HEAPF32[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAPF32[($7_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
     HEAPF32[($7_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]) * Math_fround(9.999999960041972e-13));
     HEAPF32[($7_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]));
     label$6 : {
      if (!(Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2])) > Math_fround(Math_fround(HEAPF32[($7_1 + 28 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2])) & 1 | 0)) {
       break label$6
      }
      label$7 : {
       label$8 : {
        if (!(Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2])) > Math_fround(Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2])) & 1 | 0)) {
         break label$8
        }
        HEAPF32[($7_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
        HEAPF32[($7_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
        HEAP32[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[(HEAP32[($7_1 + 44 | 0) >> 2] | 0) >> 2] | 0;
        HEAPF32[($7_1 + 24 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
        HEAPF32[($7_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]);
        HEAP32[(HEAP32[($7_1 + 44 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
        break label$7;
       }
       HEAPF32[($7_1 + 28 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
       HEAPF32[($7_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]);
       HEAP32[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
      }
     }
    }
    HEAPF32[($7_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (HEAP32[($7_1 + 52 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (HEAP32[($7_1 + 52 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]))));
    label$9 : {
     label$10 : {
      if (!(Math_fround(1.0) > Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]) & 1 | 0)) {
       break label$10
      }
      $149 = Math_fround(1.0);
      break label$9;
     }
     $149 = Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]);
    }
    HEAPF32[($7_1 + 32 | 0) >> 2] = $149;
    HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  return;
 }
 
 function $42($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  var $10_1 = 0, $58_1 = 0, $9_1 = 0, $18_1 = 0, $46_1 = 0, $49_1 = 0, $368 = Math_fround(0), $377 = Math_fround(0), $405 = Math_fround(0), $419 = Math_fround(0), $433 = Math_fround(0), $448 = Math_fround(0), $459 = Math_fround(0), $479 = Math_fround(0);
  $9_1 = global$0 - 128 | 0;
  $10_1 = $9_1;
  global$0 = $10_1;
  HEAP32[($10_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($10_1 + 116 | 0) >> 2] = $2_1;
  HEAP32[($10_1 + 112 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 108 | 0) >> 2] = $4_1;
  HEAP32[($10_1 + 104 | 0) >> 2] = $5_1;
  HEAPF32[($10_1 + 100 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 28 | 0) >> 2] = HEAP32[($10_1 + 116 | 0) >> 2] | 0;
  HEAP32[($10_1 + 120 | 0) >> 2] = (HEAP32[($10_1 + 120 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
  HEAP32[($10_1 + 116 | 0) >> 2] = (HEAP32[($10_1 + 116 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
  $18_1 = HEAP32[($10_1 + 108 | 0) >> 2] | 0;
  HEAP32[$18_1 >> 2] = (HEAP32[$18_1 >> 2] | 0 | 0) / (2 | 0) | 0;
  HEAP32[($10_1 + 104 | 0) >> 2] = (HEAP32[($10_1 + 104 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
  HEAP32[($10_1 + 112 | 0) >> 2] = (HEAP32[($10_1 + 112 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
  HEAP32[($10_1 + 124 | 0) >> 2] = (HEAP32[($10_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 120 | 0) >> 2] | 0) << 2 | 0) | 0;
  label$1 : {
   if (!((HEAP32[(HEAP32[($10_1 + 108 | 0) >> 2] | 0) >> 2] | 0 | 0) >= (HEAP32[($10_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(HEAP32[($10_1 + 108 | 0) >> 2] | 0) >> 2] = (HEAP32[($10_1 + 120 | 0) >> 2] | 0) - 1 | 0;
  }
  $46_1 = HEAP32[(HEAP32[($10_1 + 108 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($10_1 + 84 | 0) >> 2] = $46_1;
  HEAP32[($10_1 + 88 | 0) >> 2] = $46_1;
  $49_1 = (HEAP32[($10_1 + 120 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($10_1 + 24 | 0) >> 2] = $9_1;
  $58_1 = $9_1 - ((($49_1 << 2 | 0) + 15 | 0) & -16 | 0) | 0;
  $9_1 = $58_1;
  global$0 = $58_1;
  HEAP32[($10_1 + 20 | 0) >> 2] = $49_1;
  $43(HEAP32[($10_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 124 | 0) >> 2] | 0 | 0, (HEAP32[($10_1 + 124 | 0) >> 2] | 0) + ((0 - (HEAP32[($10_1 + 84 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0, HEAP32[($10_1 + 112 | 0) >> 2] | 0 | 0, $10_1 + 64 | 0 | 0, $10_1 + 68 | 0 | 0);
  HEAPF32[$58_1 >> 2] = Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]);
  HEAPF32[($10_1 + 60 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2]);
  HEAP32[($10_1 + 92 | 0) >> 2] = 1;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($10_1 + 92 | 0) >> 2] | 0 | 0) <= (HEAP32[($10_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF32[($10_1 + 60 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 124 | 0) >> 2] | 0) + ((0 - (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($10_1 + 124 | 0) >> 2] | 0) + ((0 - (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2]))) - Math_fround(Math_fround(HEAPF32[((HEAP32[($10_1 + 124 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 112 | 0) >> 2] | 0) - (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($10_1 + 124 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 112 | 0) >> 2] | 0) - (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2])));
    label$4 : {
     label$5 : {
      if (!(Math_fround(0 | 0) > Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]) & 1 | 0)) {
       break label$5
      }
      $368 = Math_fround(0 | 0);
      break label$4;
     }
     $368 = Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]);
    }
    HEAPF32[($58_1 + ((HEAP32[($10_1 + 92 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $368;
    HEAP32[($10_1 + 92 | 0) >> 2] = (HEAP32[($10_1 + 92 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  HEAPF32[($10_1 + 60 | 0) >> 2] = Math_fround(HEAPF32[($58_1 + ((HEAP32[($10_1 + 84 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
  HEAPF32[($10_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 68 | 0) >> 2]);
  HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]);
  $377 = Math_fround($44(Math_fround(Math_fround(HEAPF32[($10_1 + 68 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]))));
  HEAPF32[($10_1 + 76 | 0) >> 2] = $377;
  HEAPF32[($10_1 + 80 | 0) >> 2] = $377;
  HEAP32[($10_1 + 96 | 0) >> 2] = 2;
  label$6 : {
   label$7 : while (1) {
    if (!((HEAP32[($10_1 + 96 | 0) >> 2] | 0 | 0) <= (15 | 0) & 1 | 0)) {
     break label$6
    }
    HEAPF32[($10_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
    HEAP32[($10_1 + 16 | 0) >> 2] = (((HEAP32[($10_1 + 84 | 0) >> 2] | 0) << 1 | 0) + (HEAP32[($10_1 + 96 | 0) >> 2] | 0) | 0 | 0) / ((HEAP32[($10_1 + 96 | 0) >> 2] | 0) << 1 | 0 | 0) | 0;
    label$8 : {
     if (!((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     break label$6;
    }
    label$9 : {
     label$10 : {
      if (!((HEAP32[($10_1 + 96 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$10
      }
      label$11 : {
       label$12 : {
        if (!(((HEAP32[($10_1 + 16 | 0) >> 2] | 0) + (HEAP32[($10_1 + 84 | 0) >> 2] | 0) | 0 | 0) > (HEAP32[($10_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$12
        }
        HEAP32[($10_1 + 12 | 0) >> 2] = HEAP32[($10_1 + 84 | 0) >> 2] | 0;
        break label$11;
       }
       HEAP32[($10_1 + 12 | 0) >> 2] = (HEAP32[($10_1 + 84 | 0) >> 2] | 0) + (HEAP32[($10_1 + 16 | 0) >> 2] | 0) | 0;
      }
      break label$9;
     }
     HEAP32[($10_1 + 12 | 0) >> 2] = (Math_imul((HEAP32[(1088 + ((HEAP32[($10_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 1 | 0, HEAP32[($10_1 + 84 | 0) >> 2] | 0) + (HEAP32[($10_1 + 96 | 0) >> 2] | 0) | 0 | 0) / ((HEAP32[($10_1 + 96 | 0) >> 2] | 0) << 1 | 0 | 0) | 0;
    }
    $43(HEAP32[($10_1 + 124 | 0) >> 2] | 0 | 0, (HEAP32[($10_1 + 124 | 0) >> 2] | 0) + ((0 - (HEAP32[($10_1 + 16 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0, (HEAP32[($10_1 + 124 | 0) >> 2] | 0) + ((0 - (HEAP32[($10_1 + 12 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0, HEAP32[($10_1 + 112 | 0) >> 2] | 0 | 0, $10_1 + 68 | 0 | 0, $10_1 + 56 | 0 | 0);
    HEAPF32[($10_1 + 68 | 0) >> 2] = Math_fround(Math_fround(.5) * Math_fround(Math_fround(HEAPF32[($10_1 + 68 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2])));
    HEAPF32[($10_1 + 60 | 0) >> 2] = Math_fround(Math_fround(.5) * Math_fround(Math_fround(HEAPF32[($58_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) + Math_fround(HEAPF32[($58_1 + ((HEAP32[($10_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])));
    HEAPF32[($10_1 + 8 | 0) >> 2] = Math_fround($44(Math_fround(Math_fround(HEAPF32[($10_1 + 68 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 64 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]))));
    label$13 : {
     label$14 : {
      if (!(($84((HEAP32[($10_1 + 16 | 0) >> 2] | 0) - (HEAP32[($10_1 + 104 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) <= (1 | 0) & 1 | 0)) {
       break label$14
      }
      HEAPF32[($10_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2]);
      break label$13;
     }
     label$15 : {
      label$16 : {
       if (!(($84((HEAP32[($10_1 + 16 | 0) >> 2] | 0) - (HEAP32[($10_1 + 104 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) <= (2 | 0) & 1 | 0)) {
        break label$16
       }
       if (!((Math_imul(Math_imul(HEAP32[($10_1 + 96 | 0) >> 2] | 0, 5), HEAP32[($10_1 + 96 | 0) >> 2] | 0) | 0) < (HEAP32[($10_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$16
       }
       HEAPF32[($10_1 + 4 | 0) >> 2] = Math_fround(Math_fround(.5) * Math_fround(HEAPF32[($10_1 + 100 | 0) >> 2]));
       break label$15;
      }
      HEAPF32[($10_1 + 4 | 0) >> 2] = Math_fround(0 | 0);
     }
    }
    label$17 : {
     label$18 : {
      if (!(Math_fround(.30000001192092896) > Math_fround(Math_fround(Math_fround(.699999988079071) * Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2])) - Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) & 1 | 0)) {
       break label$18
      }
      $405 = Math_fround(.30000001192092896);
      break label$17;
     }
     $405 = Math_fround(Math_fround(Math_fround(.699999988079071) * Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2])) - Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]));
    }
    HEAPF32[$10_1 >> 2] = $405;
    label$19 : {
     label$20 : {
      if (!((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($10_1 + 116 | 0) >> 2] | 0, 3) | 0) & 1 | 0)) {
       break label$20
      }
      label$21 : {
       label$22 : {
        if (!(Math_fround(.4000000059604645) > Math_fround(Math_fround(Math_fround(.8500000238418579) * Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2])) - Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) & 1 | 0)) {
         break label$22
        }
        $419 = Math_fround(.4000000059604645);
        break label$21;
       }
       $419 = Math_fround(Math_fround(Math_fround(.8500000238418579) * Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2])) - Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]));
      }
      HEAPF32[$10_1 >> 2] = $419;
      break label$19;
     }
     label$23 : {
      if (!((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) < ((HEAP32[($10_1 + 116 | 0) >> 2] | 0) << 1 | 0 | 0) & 1 | 0)) {
       break label$23
      }
      label$24 : {
       label$25 : {
        if (!(Math_fround(.5) > Math_fround(Math_fround(Math_fround(.8999999761581421) * Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2])) - Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2])) & 1 | 0)) {
         break label$25
        }
        $433 = Math_fround(.5);
        break label$24;
       }
       $433 = Math_fround(Math_fround(Math_fround(.8999999761581421) * Math_fround(HEAPF32[($10_1 + 76 | 0) >> 2])) - Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]));
      }
      HEAPF32[$10_1 >> 2] = $433;
     }
    }
    label$26 : {
     if (!(Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]) > Math_fround(HEAPF32[$10_1 >> 2]) & 1 | 0)) {
      break label$26
     }
     HEAPF32[($10_1 + 40 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 68 | 0) >> 2]);
     HEAPF32[($10_1 + 36 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 60 | 0) >> 2]);
     HEAP32[($10_1 + 88 | 0) >> 2] = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
     HEAPF32[($10_1 + 80 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]);
    }
    HEAP32[($10_1 + 96 | 0) >> 2] = (HEAP32[($10_1 + 96 | 0) >> 2] | 0) + 1 | 0;
    continue label$7;
   };
  }
  label$27 : {
   label$28 : {
    if (!(Math_fround(0 | 0) > Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]) & 1 | 0)) {
     break label$28
    }
    $448 = Math_fround(0 | 0);
    break label$27;
   }
   $448 = Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]);
  }
  HEAPF32[($10_1 + 40 | 0) >> 2] = $448;
  label$29 : {
   label$30 : {
    if (!(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]) <= Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]) & 1 | 0)) {
     break label$30
    }
    HEAPF32[($10_1 + 72 | 0) >> 2] = Math_fround(1.0);
    break label$29;
   }
   HEAPF32[($10_1 + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]) / Math_fround(Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]) + Math_fround(1.0)));
  }
  HEAP32[($10_1 + 96 | 0) >> 2] = 0;
  label$31 : {
   label$32 : while (1) {
    if (!((HEAP32[($10_1 + 96 | 0) >> 2] | 0 | 0) < (3 | 0) & 1 | 0)) {
     break label$31
    }
    $459 = Math_fround($39(HEAP32[($10_1 + 124 | 0) >> 2] | 0 | 0, (HEAP32[($10_1 + 124 | 0) >> 2] | 0) + ((0 - (((HEAP32[($10_1 + 88 | 0) >> 2] | 0) + (HEAP32[($10_1 + 96 | 0) >> 2] | 0) | 0) - 1 | 0) | 0) << 2 | 0) | 0 | 0, HEAP32[($10_1 + 112 | 0) >> 2] | 0 | 0));
    HEAPF32[(($10_1 + 44 | 0) + ((HEAP32[($10_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $459;
    HEAP32[($10_1 + 96 | 0) >> 2] = (HEAP32[($10_1 + 96 | 0) >> 2] | 0) + 1 | 0;
    continue label$32;
   };
  }
  label$33 : {
   label$34 : {
    if (!(Math_fround(Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2])) > Math_fround(Math_fround(.699999988079071) * Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2]))) & 1 | 0)) {
     break label$34
    }
    HEAP32[($10_1 + 32 | 0) >> 2] = 1;
    break label$33;
   }
   label$35 : {
    label$36 : {
     if (!(Math_fround(Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2])) > Math_fround(Math_fround(.699999988079071) * Math_fround(Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]))) & 1 | 0)) {
      break label$36
     }
     HEAP32[($10_1 + 32 | 0) >> 2] = -1;
     break label$35;
    }
    HEAP32[($10_1 + 32 | 0) >> 2] = 0;
   }
  }
  label$37 : {
   if (!(Math_fround(HEAPF32[($10_1 + 72 | 0) >> 2]) > Math_fround(HEAPF32[($10_1 + 80 | 0) >> 2]) & 1 | 0)) {
    break label$37
   }
   HEAPF32[($10_1 + 72 | 0) >> 2] = Math_fround(HEAPF32[($10_1 + 80 | 0) >> 2]);
  }
  HEAP32[(HEAP32[($10_1 + 108 | 0) >> 2] | 0) >> 2] = ((HEAP32[($10_1 + 88 | 0) >> 2] | 0) << 1 | 0) + (HEAP32[($10_1 + 32 | 0) >> 2] | 0) | 0;
  label$38 : {
   if (!((HEAP32[(HEAP32[($10_1 + 108 | 0) >> 2] | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$38
   }
   HEAP32[(HEAP32[($10_1 + 108 | 0) >> 2] | 0) >> 2] = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
  }
  $479 = Math_fround(HEAPF32[($10_1 + 72 | 0) >> 2]);
  $9_1 = HEAP32[($10_1 + 24 | 0) >> 2] | 0;
  global$0 = $10_1 + 128 | 0;
  return Math_fround($479);
 }
 
 function $43($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 48 | 0;
  HEAP32[($8_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $5_1;
  HEAPF32[($8_1 + 16 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($8_1 + 12 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[($8_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF32[($8_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])));
    HEAPF32[($8_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($8_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])));
    HEAP32[($8_1 + 20 | 0) >> 2] = (HEAP32[($8_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF32[(HEAP32[($8_1 + 28 | 0) >> 2] | 0) >> 2] = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
  HEAPF32[(HEAP32[($8_1 + 24 | 0) >> 2] | 0) >> 2] = Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]);
  return;
 }
 
 function $44($0_1, $1_1, $2_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAPF32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($5_1 + 4 | 0) >> 2] = $2_1;
  return Math_fround(Math_fround(+Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) / Math_sqrt(+Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])) + Math_fround(1.0)))));
 }
 
 function $45($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $41_1 = 0, $141 = 0, $154 = Math_fround(0), $156 = Math_fround(0), $158 = Math_fround(0);
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(HEAP8[((HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0) >> 0] | 0 | 0);
    HEAP32[($5_1 + 28 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      $41_1 = 24;
      HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(((HEAPU8[((HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) << $41_1 | 0) >> $41_1 | 0 | 0) * Math_fround(HEAPF32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])));
      HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAPF32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(.00390625) * Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]));
    HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($5_1 + 32 | 0) >> 2] = 0;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      $154 = Math_fround($46(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]))));
      HEAPF32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $154;
      HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     };
    }
    break label$5;
   }
   label$9 : {
    label$10 : {
     if (HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) {
      break label$10
     }
     HEAP32[($5_1 + 32 | 0) >> 2] = 0;
     label$11 : {
      label$12 : while (1) {
       if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$11
       }
       $156 = Math_fround($47(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]))));
       HEAPF32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $156;
       HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       continue label$12;
      };
     }
     break label$9;
    }
    label$13 : {
     label$14 : {
      if (!((HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$14
      }
      HEAP32[($5_1 + 32 | 0) >> 2] = 0;
      label$15 : {
       label$16 : while (1) {
        if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$15
        }
        $158 = Math_fround($48(Math_fround(Math_fround(HEAPF32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]))));
        HEAPF32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $158;
        HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
        continue label$16;
       };
      }
      break label$13;
     }
     $141 = 0;
     HEAP32[$141 >> 2] = $141;
    }
   }
  }
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $46($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $11_1 = 0.0, $9_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  $11_1 = .5;
  $9_1 = Math_fround(+Math_fround($47(Math_fround(Math_fround(+Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) * $11_1)))) * $11_1 + $11_1);
  global$0 = $3_1 + 16 | 0;
  return Math_fround($9_1);
 }
 
 function $47($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $77_1 = 0.0, $21_1 = 0;
  $3_1 = global$0 - 32 | 0;
  HEAPF32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround(1.0);
  label$1 : {
   label$2 : {
    if (Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) < Math_fround(8.0) & 1 | 0) {
     break label$2
    }
    HEAPF32[($3_1 + 28 | 0) >> 2] = Math_fround(1.0);
    break label$1;
   }
   label$3 : {
    if (Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) > Math_fround(-8.0) & 1 | 0) {
     break label$3
    }
    HEAPF32[($3_1 + 28 | 0) >> 2] = Math_fround(-1.0);
    break label$1;
   }
   label$4 : {
    if (!(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) != Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) & 1 | 0)) {
     break label$4
    }
    HEAPF32[($3_1 + 28 | 0) >> 2] = Math_fround(0 | 0);
    break label$1;
   }
   label$5 : {
    if (!(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF32[($3_1 + 24 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]));
    HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround(-1.0);
   }
   $77_1 = Math_floor(+Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) * Math_fround(25.0)) + Math_fround(.5)));
   label$6 : {
    label$7 : {
     if (!(Math_abs($77_1) < 2147483648.0)) {
      break label$7
     }
     $21_1 = ~~$77_1;
     break label$6;
    }
    $21_1 = -2147483648;
   }
   HEAP32[($3_1 + 20 | 0) >> 2] = $21_1;
   HEAPF32[($3_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) - Math_fround(Math_fround(.03999999910593033) * Math_fround(HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0)));
   HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[(88896 + ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
   HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])));
   HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2])) * Math_fround(Math_fround(1.0) - Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])))));
   HEAPF32[($3_1 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]));
  }
  return Math_fround(Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]));
 }
 
 function $48($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $12_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
     break label$2
    }
    $12_1 = Math_fround(0 | 0);
    break label$1;
   }
   $12_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
  }
  return Math_fround($12_1);
 }
 
 function $49($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $43_1 = 0, $71_1 = 0, $126_1 = 0, $156 = 0, $215 = 0, $247 = 0, $283 = 0, $352 = Math_fround(0), $367 = Math_fround(0);
  $5_1 = global$0 - 1584 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 1580 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 1576 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 1572 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 1556 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 1580 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 1560 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 1580 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($5_1 + 1552 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 1560 | 0) >> 2] | 0, 3);
  HEAP32[($5_1 + 1568 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 1568 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 1560 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(HEAP8[((HEAP32[(HEAP32[($5_1 + 1580 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($5_1 + 1568 | 0) >> 2] | 0) | 0) >> 0] | 0 | 0);
    HEAP32[($5_1 + 1564 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($5_1 + 1564 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 1556 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      $43_1 = 24;
      HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(((HEAPU8[((HEAP32[((HEAP32[($5_1 + 1580 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (Math_imul(HEAP32[($5_1 + 1564 | 0) >> 2] | 0, HEAP32[($5_1 + 1552 | 0) >> 2] | 0) + (HEAP32[($5_1 + 1568 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) << $43_1 | 0) >> $43_1 | 0 | 0) * Math_fround(HEAPF32[((HEAP32[($5_1 + 1572 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 1564 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])));
      HEAP32[($5_1 + 1564 | 0) >> 2] = (HEAP32[($5_1 + 1564 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($5_1 + 1564 | 0) >> 2] = 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($5_1 + 1564 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 1560 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      $71_1 = 24;
      HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(((HEAPU8[((HEAP32[((HEAP32[($5_1 + 1580 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + (Math_imul(HEAP32[($5_1 + 1564 | 0) >> 2] | 0, HEAP32[($5_1 + 1552 | 0) >> 2] | 0) + (HEAP32[($5_1 + 1568 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) << $71_1 | 0) >> $71_1 | 0 | 0) * Math_fround(HEAPF32[((HEAP32[($5_1 + 1576 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 1564 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])));
      HEAP32[($5_1 + 1564 | 0) >> 2] = (HEAP32[($5_1 + 1564 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    $352 = Math_fround($46(Math_fround(Math_fround(Math_fround(.00390625) * Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2])))));
    HEAPF32[(($5_1 + 1040 | 0) + ((HEAP32[($5_1 + 1568 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $352;
    HEAP32[($5_1 + 1568 | 0) >> 2] = (HEAP32[($5_1 + 1568 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($5_1 + 1568 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($5_1 + 1568 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 1560 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(HEAP8[((HEAP32[(HEAP32[($5_1 + 1580 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 1560 | 0) >> 2] | 0) + (HEAP32[($5_1 + 1568 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0 | 0);
    HEAP32[($5_1 + 1564 | 0) >> 2] = 0;
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($5_1 + 1564 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 1556 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      $126_1 = 24;
      HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]) + Math_fround(Math_fround(((HEAPU8[((HEAP32[((HEAP32[($5_1 + 1580 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 1560 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 1564 | 0) >> 2] | 0, HEAP32[($5_1 + 1552 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 1568 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) << $126_1 | 0) >> $126_1 | 0 | 0) * Math_fround(HEAPF32[((HEAP32[($5_1 + 1572 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 1564 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])));
      HEAP32[($5_1 + 1564 | 0) >> 2] = (HEAP32[($5_1 + 1564 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
    HEAP32[($5_1 + 1564 | 0) >> 2] = 0;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[($5_1 + 1564 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 1560 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      $156 = 24;
      HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]) + Math_fround(Math_fround(((HEAPU8[((HEAP32[((HEAP32[($5_1 + 1580 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 1560 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 1564 | 0) >> 2] | 0, HEAP32[($5_1 + 1552 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 1568 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) << $156 | 0) >> $156 | 0 | 0) * Math_fround(HEAPF32[((HEAP32[($5_1 + 1576 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 1564 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])));
      HEAP32[($5_1 + 1564 | 0) >> 2] = (HEAP32[($5_1 + 1564 | 0) >> 2] | 0) + 1 | 0;
      continue label$12;
     };
    }
    $367 = Math_fround($46(Math_fround(Math_fround(Math_fround(.00390625) * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])))));
    HEAPF32[(($5_1 + 528 | 0) + ((HEAP32[($5_1 + 1568 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $367;
    HEAP32[($5_1 + 1568 | 0) >> 2] = (HEAP32[($5_1 + 1568 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAP32[($5_1 + 1568 | 0) >> 2] = 0;
  label$13 : {
   label$14 : while (1) {
    if (!((HEAP32[($5_1 + 1568 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 1560 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$13
    }
    HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(HEAP8[((HEAP32[(HEAP32[($5_1 + 1580 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($5_1 + 1560 | 0) >> 2] | 0) << 1 | 0) + (HEAP32[($5_1 + 1568 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0 | 0);
    HEAP32[($5_1 + 1564 | 0) >> 2] = 0;
    label$15 : {
     label$16 : while (1) {
      if (!((HEAP32[($5_1 + 1564 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 1556 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$15
      }
      $215 = 24;
      HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) + Math_fround(Math_fround(((HEAPU8[((HEAP32[((HEAP32[($5_1 + 1580 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 1560 | 0) >> 2] | 0) << 1 | 0) + Math_imul(HEAP32[($5_1 + 1564 | 0) >> 2] | 0, HEAP32[($5_1 + 1552 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 1568 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) << $215 | 0) >> $215 | 0 | 0) * Math_fround(HEAPF32[((HEAP32[($5_1 + 1572 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 1564 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])));
      HEAP32[($5_1 + 1564 | 0) >> 2] = (HEAP32[($5_1 + 1564 | 0) >> 2] | 0) + 1 | 0;
      continue label$16;
     };
    }
    HEAP32[($5_1 + 1564 | 0) >> 2] = 0;
    label$17 : {
     label$18 : while (1) {
      if (!((HEAP32[($5_1 + 1564 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 1560 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$17
      }
      $247 = 24;
      HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(((HEAPU8[((HEAP32[((HEAP32[($5_1 + 1580 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 1560 | 0) >> 2] | 0) << 1 | 0) + Math_imul(HEAP32[($5_1 + 1564 | 0) >> 2] | 0, HEAP32[($5_1 + 1552 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 1568 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) << $247 | 0) >> $247 | 0 | 0) * Math_fround(HEAPF32[((HEAP32[($5_1 + 1576 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 1564 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])) * Math_fround(HEAPF32[(($5_1 + 528 | 0) + ((HEAP32[($5_1 + 1564 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])));
      HEAP32[($5_1 + 1564 | 0) >> 2] = (HEAP32[($5_1 + 1564 | 0) >> 2] | 0) + 1 | 0;
      continue label$18;
     };
    }
    label$19 : {
     label$20 : {
      if (!((HEAP32[((HEAP32[($5_1 + 1580 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$20
      }
      HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround($46(Math_fround(Math_fround(Math_fround(.00390625) * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])))));
      break label$19;
     }
     label$21 : {
      label$22 : {
       if (HEAP32[((HEAP32[($5_1 + 1580 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) {
        break label$22
       }
       HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround($47(Math_fround(Math_fround(Math_fround(.00390625) * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])))));
       break label$21;
      }
      label$23 : {
       label$24 : {
        if (!((HEAP32[((HEAP32[($5_1 + 1580 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
         break label$24
        }
        HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround($48(Math_fround(Math_fround(Math_fround(.00390625) * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])))));
        break label$23;
       }
       $283 = 0;
       HEAP32[$283 >> 2] = $283;
      }
     }
    }
    HEAPF32[(($5_1 + 16 | 0) + ((HEAP32[($5_1 + 1568 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(($5_1 + 1040 | 0) + ((HEAP32[($5_1 + 1568 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5_1 + 1576 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 1568 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])) + Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[(($5_1 + 1040 | 0) + ((HEAP32[($5_1 + 1568 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2])) * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])));
    HEAP32[($5_1 + 1568 | 0) >> 2] = (HEAP32[($5_1 + 1568 | 0) >> 2] | 0) + 1 | 0;
    continue label$14;
   };
  }
  HEAP32[($5_1 + 1568 | 0) >> 2] = 0;
  label$25 : {
   label$26 : while (1) {
    if (!((HEAP32[($5_1 + 1568 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 1560 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$25
    }
    HEAPF32[((HEAP32[($5_1 + 1576 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 1568 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[(($5_1 + 16 | 0) + ((HEAP32[($5_1 + 1568 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAP32[($5_1 + 1568 | 0) >> 2] = (HEAP32[($5_1 + 1568 | 0) >> 2] | 0) + 1 | 0;
    continue label$26;
   };
  }
  global$0 = $5_1 + 1584 | 0;
  return;
 }
 
 function $50($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 3616 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 3612 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 3608 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 3604 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 3600 | 0) >> 2] = $3_1;
  $45(HEAP32[((HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, $6_1 + 3072 | 0 | 0, HEAP32[($6_1 + 3600 | 0) >> 2] | 0 | 0);
  $49(HEAP32[((HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 3612 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, $6_1 + 3072 | 0 | 0);
  $45(HEAP32[((HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 3604 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 3612 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 3596 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 3596 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF32[(($6_1 + 1536 | 0) + ((HEAP32[($6_1 + 3596 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[(($6_1 + 3072 | 0) + ((HEAP32[($6_1 + 3596 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAP32[($6_1 + 3596 | 0) >> 2] = (HEAP32[($6_1 + 3596 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($6_1 + 3596 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($6_1 + 3596 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF32[(($6_1 + 1536 | 0) + (((HEAP32[($6_1 + 3596 | 0) >> 2] | 0) + (HEAP32[(HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($6_1 + 3612 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 3596 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAP32[($6_1 + 3596 | 0) >> 2] = (HEAP32[($6_1 + 3596 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($6_1 + 3596 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($6_1 + 3596 | 0) >> 2] | 0 | 0) < (42 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF32[(($6_1 + 1536 | 0) + ((((HEAP32[($6_1 + 3596 | 0) >> 2] | 0) + (HEAP32[(HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($6_1 + 3600 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 3596 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAP32[($6_1 + 3596 | 0) >> 2] = (HEAP32[($6_1 + 3596 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  $49(HEAP32[((HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 3612 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, $6_1 + 1536 | 0 | 0);
  HEAP32[($6_1 + 3596 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($6_1 + 3596 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAPF32[($6_1 + ((HEAP32[($6_1 + 3596 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($6_1 + 3612 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 3596 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAP32[($6_1 + 3596 | 0) >> 2] = (HEAP32[($6_1 + 3596 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAP32[($6_1 + 3596 | 0) >> 2] = 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($6_1 + 3596 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$9
    }
    HEAPF32[($6_1 + (((HEAP32[($6_1 + 3596 | 0) >> 2] | 0) + (HEAP32[((HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[((HEAP32[($6_1 + 3612 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 3596 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAP32[($6_1 + 3596 | 0) >> 2] = (HEAP32[($6_1 + 3596 | 0) >> 2] | 0) + 1 | 0;
    continue label$10;
   };
  }
  HEAP32[($6_1 + 3596 | 0) >> 2] = 0;
  label$11 : {
   label$12 : while (1) {
    if (!((HEAP32[($6_1 + 3596 | 0) >> 2] | 0 | 0) < (42 | 0) & 1 | 0)) {
     break label$11
    }
    HEAPF32[($6_1 + ((((HEAP32[($6_1 + 3596 | 0) >> 2] | 0) + (HEAP32[((HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($6_1 + 3600 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 3596 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
    HEAP32[($6_1 + 3596 | 0) >> 2] = (HEAP32[($6_1 + 3596 | 0) >> 2] | 0) + 1 | 0;
    continue label$12;
   };
  }
  $49(HEAP32[((HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 3612 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, $6_1 | 0);
  $45(HEAP32[((HEAP32[(HEAP32[($6_1 + 3612 | 0) >> 2] | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 3608 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 3612 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 3616 | 0;
  return;
 }
 
 function $51($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $217 = 0, $420 = 0, $690 = 0, $960 = 0, $1230 = 0, $1435 = 0, $4_1 = 0, $120_1 = 0, $151 = 0, $185 = 0, $256 = 0, $301 = 0, $323 = 0, $354 = 0, $388 = 0, $463 = 0, $520 = 0, $571 = 0, $593 = 0, $624 = 0, $658 = 0, $733 = 0, $790 = 0, $841 = 0, $863 = 0, $894 = 0, $928 = 0, $1003 = 0, $1060 = 0, $1111 = 0, $1133 = 0, $1164 = 0, $1198 = 0, $1269 = 0, $1316 = 0, $1338 = 0, $1369 = 0, $1403 = 0, $1474 = 0, $1521 = 0, $1544 = 0;
  $3_1 = global$0 - 672 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 664 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
  HEAP32[($3_1 + 528 | 0) >> 2] = $3_1 + 656 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($60($4_1 | 0, 89716 | 0, $3_1 + 528 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$3
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 652 | 0) >> 2] = $106(1 | 0, 48 | 0) | 0;
   label$4 : {
    if ((HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$4
    }
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 648 | 0) >> 2] = $106(1 | 0, 20 | 0) | 0;
   label$5 : {
    if ((HEAP32[($3_1 + 648 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$5
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 652 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 648 | 0) >> 2] | 0;
   HEAP32[($3_1 + 644 | 0) >> 2] = $106(1 | 0, 24 | 0) | 0;
   label$6 : {
    if ((HEAP32[($3_1 + 644 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$6
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 652 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($3_1 + 644 | 0) >> 2] | 0;
   HEAP32[($3_1 + 640 | 0) >> 2] = $106(1 | 0, 24 | 0) | 0;
   label$7 : {
    if ((HEAP32[($3_1 + 640 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$7
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 652 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($3_1 + 640 | 0) >> 2] | 0;
   HEAP32[($3_1 + 636 | 0) >> 2] = $106(1 | 0, 24 | 0) | 0;
   label$8 : {
    if ((HEAP32[($3_1 + 636 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$8
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 652 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($3_1 + 636 | 0) >> 2] | 0;
   HEAP32[($3_1 + 632 | 0) >> 2] = $106(1 | 0, 20 | 0) | 0;
   label$9 : {
    if ((HEAP32[($3_1 + 632 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$9
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 652 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($3_1 + 632 | 0) >> 2] | 0;
   HEAP32[($3_1 + 628 | 0) >> 2] = $106(1 | 0, 20 | 0) | 0;
   label$10 : {
    if ((HEAP32[($3_1 + 628 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$10
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 652 | 0) >> 2] | 0) + 44 | 0) >> 2] = HEAP32[($3_1 + 628 | 0) >> 2] | 0;
   $120_1 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 512 | 0) >> 2] = $3_1 + 656 | 0;
   label$11 : {
    label$12 : {
     if (($60($120_1 | 0, 89713 | 0, $3_1 + 512 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$12
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$12
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$11
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 648 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   $151 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 496 | 0) >> 2] = $3_1 + 656 | 0;
   label$13 : {
    label$14 : {
     if (($60($151 | 0, 89713 | 0, $3_1 + 496 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$14
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$14
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$13
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 648 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   HEAP32[(HEAP32[($3_1 + 652 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 648 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   $185 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 480 | 0) >> 2] = $3_1 + 656 | 0;
   label$15 : {
    label$16 : {
     if (($60($185 | 0, 89713 | 0, $3_1 + 480 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$16
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$16
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$15
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 624 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   $217 = (HEAP32[($3_1 + 624 | 0) >> 2] | 0) + -1 | 0;
   label$17 : {
    label$18 : {
     switch ($217 | 0) {
     case 0:
      HEAP32[((HEAP32[($3_1 + 648 | 0) >> 2] | 0) + 16 | 0) >> 2] = 1;
      break label$17;
     case 1:
      HEAP32[((HEAP32[($3_1 + 648 | 0) >> 2] | 0) + 16 | 0) >> 2] = 2;
      break label$17;
     default:
      break label$18;
     };
    }
    HEAP32[((HEAP32[($3_1 + 648 | 0) >> 2] | 0) + 16 | 0) >> 2] = 0;
   }
   HEAP32[($3_1 + 620 | 0) >> 2] = $104(Math_imul(HEAP32[((HEAP32[($3_1 + 648 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 648 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) << 0 | 0 | 0) | 0;
   label$21 : {
    if ((HEAP32[($3_1 + 620 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$21
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 648 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 620 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$22 : {
    label$23 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[((HEAP32[($3_1 + 648 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 648 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0) & 1 | 0)) {
      break label$22
     }
     $256 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = $3_1 + 656 | 0;
     label$24 : {
      if (!(($60($256 | 0, 89713 | 0, $3_1 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$24
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 620 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$23;
    };
   }
   HEAP32[($3_1 + 616 | 0) >> 2] = $104((HEAP32[((HEAP32[($3_1 + 648 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) << 0 | 0 | 0) | 0;
   label$25 : {
    if ((HEAP32[($3_1 + 616 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$25
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[(HEAP32[($3_1 + 648 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 616 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$26 : {
    label$27 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 648 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$26
     }
     $301 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = $3_1 + 656 | 0;
     label$28 : {
      if (!(($60($301 | 0, 89713 | 0, $3_1 + 16 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$28
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 616 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$27;
    };
   }
   $323 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 464 | 0) >> 2] = $3_1 + 656 | 0;
   label$29 : {
    label$30 : {
     if (($60($323 | 0, 89713 | 0, $3_1 + 464 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$30
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$30
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$29
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   $354 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 448 | 0) >> 2] = $3_1 + 656 | 0;
   label$31 : {
    label$32 : {
     if (($60($354 | 0, 89713 | 0, $3_1 + 448 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$32
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$32
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$31
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($3_1 + 652 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $388 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 432 | 0) >> 2] = $3_1 + 656 | 0;
   label$33 : {
    label$34 : {
     if (($60($388 | 0, 89713 | 0, $3_1 + 432 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$34
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$34
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$33
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 612 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   $420 = (HEAP32[($3_1 + 612 | 0) >> 2] | 0) + -1 | 0;
   label$35 : {
    label$36 : {
     switch ($420 | 0) {
     case 0:
      HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 20 | 0) >> 2] = 1;
      break label$35;
     case 1:
      HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 20 | 0) >> 2] = 2;
      break label$35;
     default:
      break label$36;
     };
    }
    HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 20 | 0) >> 2] = 0;
   }
   HEAP32[($3_1 + 608 | 0) >> 2] = $104(Math_imul(Math_imul(HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0), 3) << 0 | 0 | 0) | 0;
   label$39 : {
    if ((HEAP32[($3_1 + 608 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$39
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 608 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$40 : {
    label$41 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (Math_imul(Math_imul(HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0), 3) | 0) & 1 | 0)) {
      break label$40
     }
     $463 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[($3_1 + 32 | 0) >> 2] = $3_1 + 656 | 0;
     label$42 : {
      if (!(($60($463 | 0, 89713 | 0, $3_1 + 32 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$42
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 608 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$41;
    };
   }
   HEAP32[($3_1 + 604 | 0) >> 2] = $104(Math_imul(Math_imul(HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0), 3) << 0 | 0 | 0) | 0;
   label$43 : {
    if ((HEAP32[($3_1 + 604 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$43
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($3_1 + 604 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$44 : {
    label$45 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (Math_imul(Math_imul(HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0), 3) | 0) & 1 | 0)) {
      break label$44
     }
     $520 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[($3_1 + 48 | 0) >> 2] = $3_1 + 656 | 0;
     label$46 : {
      if (!(($60($520 | 0, 89713 | 0, $3_1 + 48 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$46
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 604 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$45;
    };
   }
   HEAP32[($3_1 + 600 | 0) >> 2] = $104(Math_imul(HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0, 3) << 0 | 0 | 0) | 0;
   label$47 : {
    if ((HEAP32[($3_1 + 600 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$47
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[(HEAP32[($3_1 + 644 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 600 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$48 : {
    label$49 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[((HEAP32[($3_1 + 644 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0, 3) | 0) & 1 | 0)) {
      break label$48
     }
     $571 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[($3_1 + 64 | 0) >> 2] = $3_1 + 656 | 0;
     label$50 : {
      if (!(($60($571 | 0, 89713 | 0, $3_1 + 64 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$50
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 600 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$49;
    };
   }
   $593 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 416 | 0) >> 2] = $3_1 + 656 | 0;
   label$51 : {
    label$52 : {
     if (($60($593 | 0, 89713 | 0, $3_1 + 416 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$52
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$52
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$51
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   $624 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 400 | 0) >> 2] = $3_1 + 656 | 0;
   label$53 : {
    label$54 : {
     if (($60($624 | 0, 89713 | 0, $3_1 + 400 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$54
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$54
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$53
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($3_1 + 652 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $658 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 384 | 0) >> 2] = $3_1 + 656 | 0;
   label$55 : {
    label$56 : {
     if (($60($658 | 0, 89713 | 0, $3_1 + 384 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$56
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$56
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$55
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 596 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   $690 = (HEAP32[($3_1 + 596 | 0) >> 2] | 0) + -1 | 0;
   label$57 : {
    label$58 : {
     switch ($690 | 0) {
     case 0:
      HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 20 | 0) >> 2] = 1;
      break label$57;
     case 1:
      HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 20 | 0) >> 2] = 2;
      break label$57;
     default:
      break label$58;
     };
    }
    HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 20 | 0) >> 2] = 0;
   }
   HEAP32[($3_1 + 592 | 0) >> 2] = $104(Math_imul(Math_imul(HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0), 3) << 0 | 0 | 0) | 0;
   label$61 : {
    if ((HEAP32[($3_1 + 592 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$61
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 592 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$62 : {
    label$63 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (Math_imul(Math_imul(HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0), 3) | 0) & 1 | 0)) {
      break label$62
     }
     $733 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[($3_1 + 80 | 0) >> 2] = $3_1 + 656 | 0;
     label$64 : {
      if (!(($60($733 | 0, 89713 | 0, $3_1 + 80 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$64
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 592 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$63;
    };
   }
   HEAP32[($3_1 + 588 | 0) >> 2] = $104(Math_imul(Math_imul(HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0), 3) << 0 | 0 | 0) | 0;
   label$65 : {
    if ((HEAP32[($3_1 + 588 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$65
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($3_1 + 588 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$66 : {
    label$67 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (Math_imul(Math_imul(HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0), 3) | 0) & 1 | 0)) {
      break label$66
     }
     $790 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[($3_1 + 96 | 0) >> 2] = $3_1 + 656 | 0;
     label$68 : {
      if (!(($60($790 | 0, 89713 | 0, $3_1 + 96 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$68
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 588 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$67;
    };
   }
   HEAP32[($3_1 + 584 | 0) >> 2] = $104(Math_imul(HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0, 3) << 0 | 0 | 0) | 0;
   label$69 : {
    if ((HEAP32[($3_1 + 584 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$69
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[(HEAP32[($3_1 + 640 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 584 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$70 : {
    label$71 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[((HEAP32[($3_1 + 640 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0, 3) | 0) & 1 | 0)) {
      break label$70
     }
     $841 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[($3_1 + 112 | 0) >> 2] = $3_1 + 656 | 0;
     label$72 : {
      if (!(($60($841 | 0, 89713 | 0, $3_1 + 112 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$72
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 584 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$71;
    };
   }
   $863 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 368 | 0) >> 2] = $3_1 + 656 | 0;
   label$73 : {
    label$74 : {
     if (($60($863 | 0, 89713 | 0, $3_1 + 368 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$74
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$74
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$73
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   $894 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 352 | 0) >> 2] = $3_1 + 656 | 0;
   label$75 : {
    label$76 : {
     if (($60($894 | 0, 89713 | 0, $3_1 + 352 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$76
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$76
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$75
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($3_1 + 652 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $928 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 336 | 0) >> 2] = $3_1 + 656 | 0;
   label$77 : {
    label$78 : {
     if (($60($928 | 0, 89713 | 0, $3_1 + 336 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$78
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$78
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$77
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 580 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   $960 = (HEAP32[($3_1 + 580 | 0) >> 2] | 0) + -1 | 0;
   label$79 : {
    label$80 : {
     switch ($960 | 0) {
     case 0:
      HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 20 | 0) >> 2] = 1;
      break label$79;
     case 1:
      HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 20 | 0) >> 2] = 2;
      break label$79;
     default:
      break label$80;
     };
    }
    HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 20 | 0) >> 2] = 0;
   }
   HEAP32[($3_1 + 576 | 0) >> 2] = $104(Math_imul(Math_imul(HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0), 3) << 0 | 0 | 0) | 0;
   label$83 : {
    if ((HEAP32[($3_1 + 576 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$83
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 576 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$84 : {
    label$85 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (Math_imul(Math_imul(HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0), 3) | 0) & 1 | 0)) {
      break label$84
     }
     $1003 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[($3_1 + 128 | 0) >> 2] = $3_1 + 656 | 0;
     label$86 : {
      if (!(($60($1003 | 0, 89713 | 0, $3_1 + 128 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$86
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 576 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$85;
    };
   }
   HEAP32[($3_1 + 572 | 0) >> 2] = $104(Math_imul(Math_imul(HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0), 3) << 0 | 0 | 0) | 0;
   label$87 : {
    if ((HEAP32[($3_1 + 572 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$87
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($3_1 + 572 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$88 : {
    label$89 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (Math_imul(Math_imul(HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0), 3) | 0) & 1 | 0)) {
      break label$88
     }
     $1060 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[($3_1 + 144 | 0) >> 2] = $3_1 + 656 | 0;
     label$90 : {
      if (!(($60($1060 | 0, 89713 | 0, $3_1 + 144 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$90
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 572 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$89;
    };
   }
   HEAP32[($3_1 + 568 | 0) >> 2] = $104(Math_imul(HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0, 3) << 0 | 0 | 0) | 0;
   label$91 : {
    if ((HEAP32[($3_1 + 568 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$91
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[(HEAP32[($3_1 + 636 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 568 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$92 : {
    label$93 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[((HEAP32[($3_1 + 636 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0, 3) | 0) & 1 | 0)) {
      break label$92
     }
     $1111 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[($3_1 + 160 | 0) >> 2] = $3_1 + 656 | 0;
     label$94 : {
      if (!(($60($1111 | 0, 89713 | 0, $3_1 + 160 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$94
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 568 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$93;
    };
   }
   $1133 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 320 | 0) >> 2] = $3_1 + 656 | 0;
   label$95 : {
    label$96 : {
     if (($60($1133 | 0, 89713 | 0, $3_1 + 320 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$96
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$96
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$95
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 632 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   $1164 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 304 | 0) >> 2] = $3_1 + 656 | 0;
   label$97 : {
    label$98 : {
     if (($60($1164 | 0, 89713 | 0, $3_1 + 304 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$98
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$98
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$97
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 632 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($3_1 + 652 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 632 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   $1198 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 288 | 0) >> 2] = $3_1 + 656 | 0;
   label$99 : {
    label$100 : {
     if (($60($1198 | 0, 89713 | 0, $3_1 + 288 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$100
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$100
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$99
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 564 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   $1230 = (HEAP32[($3_1 + 564 | 0) >> 2] | 0) + -1 | 0;
   label$101 : {
    label$102 : {
     switch ($1230 | 0) {
     case 0:
      HEAP32[((HEAP32[($3_1 + 632 | 0) >> 2] | 0) + 16 | 0) >> 2] = 1;
      break label$101;
     case 1:
      HEAP32[((HEAP32[($3_1 + 632 | 0) >> 2] | 0) + 16 | 0) >> 2] = 2;
      break label$101;
     default:
      break label$102;
     };
    }
    HEAP32[((HEAP32[($3_1 + 632 | 0) >> 2] | 0) + 16 | 0) >> 2] = 0;
   }
   HEAP32[($3_1 + 560 | 0) >> 2] = $104(Math_imul(HEAP32[((HEAP32[($3_1 + 632 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 632 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) << 0 | 0 | 0) | 0;
   label$105 : {
    if ((HEAP32[($3_1 + 560 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$105
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 632 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 560 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$106 : {
    label$107 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[((HEAP32[($3_1 + 632 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 632 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0) & 1 | 0)) {
      break label$106
     }
     $1269 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[($3_1 + 176 | 0) >> 2] = $3_1 + 656 | 0;
     label$108 : {
      if (!(($60($1269 | 0, 89713 | 0, $3_1 + 176 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$108
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 560 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$107;
    };
   }
   HEAP32[($3_1 + 556 | 0) >> 2] = $104((HEAP32[((HEAP32[($3_1 + 632 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) << 0 | 0 | 0) | 0;
   label$109 : {
    if ((HEAP32[($3_1 + 556 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$109
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[(HEAP32[($3_1 + 632 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 556 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$110 : {
    label$111 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 632 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$110
     }
     $1316 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[($3_1 + 192 | 0) >> 2] = $3_1 + 656 | 0;
     label$112 : {
      if (!(($60($1316 | 0, 89713 | 0, $3_1 + 192 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$112
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 556 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$111;
    };
   }
   $1338 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 272 | 0) >> 2] = $3_1 + 656 | 0;
   label$113 : {
    label$114 : {
     if (($60($1338 | 0, 89713 | 0, $3_1 + 272 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$114
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$114
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$113
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 628 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   $1369 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 256 | 0) >> 2] = $3_1 + 656 | 0;
   label$115 : {
    label$116 : {
     if (($60($1369 | 0, 89713 | 0, $3_1 + 256 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$116
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$116
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$115
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 628 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($3_1 + 652 | 0) >> 2] | 0) + 40 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 628 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   $1403 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
   HEAP32[($3_1 + 240 | 0) >> 2] = $3_1 + 656 | 0;
   label$117 : {
    label$118 : {
     if (($60($1403 | 0, 89713 | 0, $3_1 + 240 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0) {
      break label$118
     }
     if ((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$118
     }
     if (!((HEAP32[($3_1 + 656 | 0) >> 2] | 0 | 0) > (128 | 0) & 1 | 0)) {
      break label$117
     }
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 552 | 0) >> 2] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
   $1435 = (HEAP32[($3_1 + 552 | 0) >> 2] | 0) + -1 | 0;
   label$119 : {
    label$120 : {
     switch ($1435 | 0) {
     case 0:
      HEAP32[((HEAP32[($3_1 + 628 | 0) >> 2] | 0) + 16 | 0) >> 2] = 1;
      break label$119;
     case 1:
      HEAP32[((HEAP32[($3_1 + 628 | 0) >> 2] | 0) + 16 | 0) >> 2] = 2;
      break label$119;
     default:
      break label$120;
     };
    }
    HEAP32[((HEAP32[($3_1 + 628 | 0) >> 2] | 0) + 16 | 0) >> 2] = 0;
   }
   HEAP32[($3_1 + 548 | 0) >> 2] = $104(Math_imul(HEAP32[((HEAP32[($3_1 + 628 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 628 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) << 0 | 0 | 0) | 0;
   label$123 : {
    if ((HEAP32[($3_1 + 548 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$123
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($3_1 + 628 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 548 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$124 : {
    label$125 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[((HEAP32[($3_1 + 628 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0, HEAP32[((HEAP32[($3_1 + 628 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0) & 1 | 0)) {
      break label$124
     }
     $1474 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[($3_1 + 208 | 0) >> 2] = $3_1 + 656 | 0;
     label$126 : {
      if (!(($60($1474 | 0, 89713 | 0, $3_1 + 208 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$126
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 548 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$125;
    };
   }
   HEAP32[($3_1 + 544 | 0) >> 2] = $104((HEAP32[((HEAP32[($3_1 + 628 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) << 0 | 0 | 0) | 0;
   label$127 : {
    if ((HEAP32[($3_1 + 544 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$127
    }
    $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 668 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[(HEAP32[($3_1 + 628 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 544 | 0) >> 2] | 0;
   HEAP32[($3_1 + 660 | 0) >> 2] = 0;
   label$128 : {
    label$129 : while (1) {
     if (!((HEAP32[($3_1 + 660 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 628 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$128
     }
     $1521 = HEAP32[($3_1 + 664 | 0) >> 2] | 0;
     HEAP32[($3_1 + 224 | 0) >> 2] = $3_1 + 656 | 0;
     label$130 : {
      if (!(($60($1521 | 0, 89713 | 0, $3_1 + 224 | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$130
      }
      $52(HEAP32[($3_1 + 652 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 668 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP8[((HEAP32[($3_1 + 544 | 0) >> 2] | 0) + (HEAP32[($3_1 + 660 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($3_1 + 656 | 0) >> 2] | 0;
     HEAP32[($3_1 + 660 | 0) >> 2] = (HEAP32[($3_1 + 660 | 0) >> 2] | 0) + 1 | 0;
     continue label$129;
    };
   }
   HEAP32[($3_1 + 668 | 0) >> 2] = HEAP32[($3_1 + 652 | 0) >> 2] | 0;
  }
  $1544 = HEAP32[($3_1 + 668 | 0) >> 2] | 0;
  global$0 = $3_1 + 672 | 0;
  return $1544 | 0;
 }
 
 function $52($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $105(HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
    $105(HEAP32[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0 | 0);
    $105(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   }
   label$4 : {
    if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    $105(HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
    $105(HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
    $105(HEAP32[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
    $105(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
   }
   label$5 : {
    if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    $105(HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
    $105(HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
    $105(HEAP32[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) >> 2] | 0 | 0);
    $105(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
   }
   label$6 : {
    if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    $105(HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
    $105(HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
    $105(HEAP32[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) >> 2] | 0 | 0);
    $105(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0);
   }
   label$7 : {
    if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$7
    }
    $105(HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
    $105(HEAP32[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0) >> 2] | 0 | 0);
    $105(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0);
   }
   label$8 : {
    if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$8
    }
    $105(HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
    $105(HEAP32[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) >> 2] | 0 | 0);
    $105(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0);
   }
   $105(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $53($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0, $3_1 = 0.0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $9_1 = 0, i64toi32_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $9_1 & 2147483647 | 0;
    if ($2_1 >>> 0 > 1072243195 >>> 0) {
     break label$2
    }
    $3_1 = 1.0;
    if ($2_1 >>> 0 < 1044816030 >>> 0) {
     break label$1
    }
    $3_1 = +$55(+$0_1, +(0.0));
    break label$1;
   }
   label$3 : {
    if ($2_1 >>> 0 < 2146435072 >>> 0) {
     break label$3
    }
    $3_1 = $0_1 - $0_1;
    break label$1;
   }
   label$4 : {
    switch (($56(+$0_1, $1_1 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $3_1 = +$55(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]));
     break label$1;
    case 1:
     $3_1 = -+$59(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]), 1 | 0);
     break label$1;
    case 2:
     $3_1 = -+$55(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]));
     break label$1;
    default:
     break label$4;
    };
   }
   $3_1 = +$59(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]), 1 | 0);
  }
  global$0 = $1_1 + 16 | 0;
  return +$3_1;
 }
 
 function $54($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, i64toi32_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $8_1 & 2147483647 | 0;
    if ($2_1 >>> 0 > 1072243195 >>> 0) {
     break label$2
    }
    if ($2_1 >>> 0 < 1045430272 >>> 0) {
     break label$1
    }
    $0_1 = +$59(+$0_1, +(0.0), 0 | 0);
    break label$1;
   }
   label$3 : {
    if ($2_1 >>> 0 < 2146435072 >>> 0) {
     break label$3
    }
    $0_1 = $0_1 - $0_1;
    break label$1;
   }
   label$4 : {
    switch (($56(+$0_1, $1_1 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $0_1 = +$59(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]), 1 | 0);
     break label$1;
    case 1:
     $0_1 = +$55(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]));
     break label$1;
    case 2:
     $0_1 = -+$59(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]), 1 | 0);
     break label$1;
    default:
     break label$4;
    };
   }
   $0_1 = -+$55(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]));
  }
  global$0 = $1_1 + 16 | 0;
  return +$0_1;
 }
 
 function $55($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $2_1 = 0.0, $3_1 = 0.0, $4_1 = 0.0, $16_1 = 0.0;
  $2_1 = $0_1 * $0_1;
  $3_1 = $2_1 * .5;
  $4_1 = 1.0 - $3_1;
  $16_1 = 1.0 - $4_1 - $3_1;
  $3_1 = $2_1 * $2_1;
  return +($4_1 + ($16_1 + ($2_1 * ($2_1 * ($2_1 * ($2_1 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + $3_1 * $3_1 * ($2_1 * ($2_1 * -1.1359647557788195e-11 + 2.087572321298175e-09) + -2.7557314351390663e-07)) - $0_1 * $1_1)));
 }
 
 function $56($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $8_1 = 0.0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $9_1 = 0.0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $7$hi = 0, $10_1 = 0.0, $11_1 = 0.0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $152 = 0, $185 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $20_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3_1 = $20_1;
      $4_1 = $3_1 & 2147483647 | 0;
      if ($4_1 >>> 0 > 1074752122 >>> 0) {
       break label$4
      }
      if (($3_1 & 1048575 | 0 | 0) == (598523 | 0)) {
       break label$3
      }
      label$5 : {
       if ($4_1 >>> 0 > 1073928572 >>> 0) {
        break label$5
       }
       label$6 : {
        i64toi32_i32$1 = $7$hi;
        i64toi32_i32$0 = $7_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $21_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $22_1 = 0
          } else {
           $22_1 = 1
          }
          $23_1 = $22_1;
         } else {
          $23_1 = 0
         }
         $21_1 = $23_1;
        }
        if ($21_1) {
         break label$6
        }
        $0_1 = $0_1 + -1.5707963267341256;
        $8_1 = $0_1 + -6.077100506506192e-11;
        HEAPF64[$1_1 >> 3] = $8_1;
        HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -6.077100506506192e-11;
        $3_1 = 1;
        break label$1;
       }
       $0_1 = $0_1 + 1.5707963267341256;
       $8_1 = $0_1 + 6.077100506506192e-11;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 6.077100506506192e-11;
       $3_1 = -1;
       break label$1;
      }
      label$7 : {
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$3 = $7_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $24_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $25_1 = 0
         } else {
          $25_1 = 1
         }
         $26_1 = $25_1;
        } else {
         $26_1 = 0
        }
        $24_1 = $26_1;
       }
       if ($24_1) {
        break label$7
       }
       $0_1 = $0_1 + -3.1415926534682512;
       $8_1 = $0_1 + -1.2154201013012384e-10;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -1.2154201013012384e-10;
       $3_1 = 2;
       break label$1;
      }
      $0_1 = $0_1 + 3.1415926534682512;
      $8_1 = $0_1 + 1.2154201013012384e-10;
      HEAPF64[$1_1 >> 3] = $8_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 1.2154201013012384e-10;
      $3_1 = -2;
      break label$1;
     }
     label$8 : {
      if ($4_1 >>> 0 > 1075594811 >>> 0) {
       break label$8
      }
      label$9 : {
       if ($4_1 >>> 0 > 1075183036 >>> 0) {
        break label$9
       }
       if (($4_1 | 0) == (1074977148 | 0)) {
        break label$3
       }
       label$10 : {
        i64toi32_i32$3 = $7$hi;
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
         $27_1 = 1
        } else {
         if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $28_1 = 0
          } else {
           $28_1 = 1
          }
          $29_1 = $28_1;
         } else {
          $29_1 = 0
         }
         $27_1 = $29_1;
        }
        if ($27_1) {
         break label$10
        }
        $0_1 = $0_1 + -4.712388980202377;
        $8_1 = $0_1 + -1.8231301519518578e-10;
        HEAPF64[$1_1 >> 3] = $8_1;
        HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -1.8231301519518578e-10;
        $3_1 = 3;
        break label$1;
       }
       $0_1 = $0_1 + 4.712388980202377;
       $8_1 = $0_1 + 1.8231301519518578e-10;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 1.8231301519518578e-10;
       $3_1 = -3;
       break label$1;
      }
      if (($4_1 | 0) == (1075388923 | 0)) {
       break label$3
      }
      label$11 : {
       i64toi32_i32$2 = $7$hi;
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
        $30_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $31_1 = 0
         } else {
          $31_1 = 1
         }
         $32_1 = $31_1;
        } else {
         $32_1 = 0
        }
        $30_1 = $32_1;
       }
       if ($30_1) {
        break label$11
       }
       $0_1 = $0_1 + -6.2831853069365025;
       $8_1 = $0_1 + -2.430840202602477e-10;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -2.430840202602477e-10;
       $3_1 = 4;
       break label$1;
      }
      $0_1 = $0_1 + 6.2831853069365025;
      $8_1 = $0_1 + 2.430840202602477e-10;
      HEAPF64[$1_1 >> 3] = $8_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 2.430840202602477e-10;
      $3_1 = -4;
      break label$1;
     }
     if ($4_1 >>> 0 > 1094263290 >>> 0) {
      break label$2
     }
    }
    $8_1 = $0_1 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $9_1 = $0_1 + $8_1 * -1.5707963267341256;
    $10_1 = $8_1 * 6.077100506506192e-11;
    $0_1 = $9_1 - $10_1;
    HEAPF64[$1_1 >> 3] = $0_1;
    $5_1 = $4_1 >>> 20 | 0;
    $152 = $5_1;
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $33_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $33_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = ($152 - ($33_1 & 2047 | 0) | 0 | 0) < (17 | 0);
    label$12 : {
     label$13 : {
      if (!(Math_abs($8_1) < 2147483648.0)) {
       break label$13
      }
      $3_1 = ~~$8_1;
      break label$12;
     }
     $3_1 = -2147483648;
    }
    label$14 : {
     if ($6_1) {
      break label$14
     }
     $0_1 = $8_1 * 6.077100506303966e-11;
     $11_1 = $9_1 - $0_1;
     $10_1 = $8_1 * 2.0222662487959506e-21 - ($9_1 - $11_1 - $0_1);
     $0_1 = $11_1 - $10_1;
     HEAPF64[$1_1 >> 3] = $0_1;
     label$15 : {
      $185 = $5_1;
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 52;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $34_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $34_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      if (($185 - ($34_1 & 2047 | 0) | 0 | 0) >= (50 | 0)) {
       break label$15
      }
      $9_1 = $11_1;
      break label$14;
     }
     $0_1 = $8_1 * 2.0222662487111665e-21;
     $9_1 = $11_1 - $0_1;
     $10_1 = $8_1 * 8.4784276603689e-32 - ($11_1 - $9_1 - $0_1);
     $0_1 = $9_1 - $10_1;
     HEAPF64[$1_1 >> 3] = $0_1;
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $9_1 - $0_1 - $10_1;
    break label$1;
   }
   label$16 : {
    if ($4_1 >>> 0 < 2146435072 >>> 0) {
     break label$16
    }
    $0_1 = $0_1 - $0_1;
    HEAPF64[$1_1 >> 3] = $0_1;
    HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
    $3_1 = 0;
    break label$1;
   }
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 1096810496;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $3_1 = 0;
   $6_1 = 1;
   label$17 : while (1) {
    $3_1 = ($2_1 + 16 | 0) + ($3_1 << 3 | 0) | 0;
    label$18 : {
     label$19 : {
      if (!(Math_abs($0_1) < 2147483648.0)) {
       break label$19
      }
      $5_1 = ~~$0_1;
      break label$18;
     }
     $5_1 = -2147483648;
    }
    $8_1 = +($5_1 | 0);
    HEAPF64[$3_1 >> 3] = $8_1;
    $0_1 = ($0_1 - $8_1) * 16777216.0;
    $3_1 = 1;
    $5_1 = $6_1 & 1 | 0;
    $6_1 = 0;
    if ($5_1) {
     continue label$17
    }
    break label$17;
   };
   HEAPF64[($2_1 + 32 | 0) >> 3] = $0_1;
   label$20 : {
    label$21 : {
     if ($0_1 == 0.0) {
      break label$21
     }
     $3_1 = 2;
     break label$20;
    }
    $6_1 = 1;
    label$22 : while (1) {
     $3_1 = $6_1;
     $6_1 = $3_1 + -1 | 0;
     if (+HEAPF64[(($2_1 + 16 | 0) + ($3_1 << 3 | 0) | 0) >> 3] == 0.0) {
      continue label$22
     }
     break label$22;
    };
   }
   $3_1 = $58($2_1 + 16 | 0 | 0, $2_1 | 0, ($4_1 >>> 20 | 0) + -1046 | 0 | 0, $3_1 + 1 | 0 | 0, 1 | 0) | 0;
   $0_1 = +HEAPF64[$2_1 >> 3];
   label$23 : {
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$23
    }
    HEAPF64[$1_1 >> 3] = -$0_1;
    HEAPF64[($1_1 + 8 | 0) >> 3] = -+HEAPF64[($2_1 + 8 | 0) >> 3];
    $3_1 = 0 - $3_1 | 0;
    break label$1;
   }
   HEAPF64[$1_1 >> 3] = $0_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = +HEAPF64[($2_1 + 8 | 0) >> 3];
  }
  global$0 = $2_1 + 48 | 0;
  return $3_1 | 0;
 }
 
 function $57($0_1) {
  $0_1 = +$0_1;
  return +Math_floor($0_1);
 }
 
 function $58($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $21_1 = 0.0, $11_1 = 0, $6_1 = 0, $5_1 = 0, $22_1 = 0.0, $10_1 = 0, $13_1 = 0, $8_1 = 0, $20_1 = 0, $9_1 = 0, $18_1 = 0, $12_1 = 0, $17_1 = 0, $23_1 = 0.0, $7_1 = 0, $15_1 = 0, $19_1 = 0, $14_1 = 0, $16_1 = 0, $204 = 0, $207 = 0, $515 = 0.0, $553 = 0.0;
  $5_1 = global$0 - 560 | 0;
  global$0 = $5_1;
  $6_1 = ($2_1 + -3 | 0 | 0) / (24 | 0) | 0;
  $7_1 = ($6_1 | 0) > (0 | 0) ? $6_1 : 0;
  $8_1 = Math_imul($7_1, -24) + $2_1 | 0;
  label$1 : {
   $9_1 = HEAP32[(($4_1 << 2 | 0) + 89760 | 0) >> 2] | 0;
   $10_1 = $3_1 + -1 | 0;
   if (($9_1 + $10_1 | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $11_1 = $9_1 + $3_1 | 0;
   $2_1 = $7_1 - $10_1 | 0;
   $6_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) >= (0 | 0)) {
       break label$4
      }
      $21_1 = 0.0;
      break label$3;
     }
     $21_1 = +(HEAP32[(($2_1 << 2 | 0) + 89776 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = $21_1;
    $2_1 = $2_1 + 1 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($11_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $12_1 = $8_1 + -24 | 0;
  $13_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
  $11_1 = 0;
  label$5 : while (1) {
   $21_1 = 0.0;
   label$6 : {
    if (($3_1 | 0) <= (0 | 0)) {
     break label$6
    }
    $6_1 = $11_1 + $10_1 | 0;
    $2_1 = 0;
    label$7 : while (1) {
     $21_1 = $21_1 + +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3];
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$7
     }
     break label$7;
    };
   }
   HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $21_1;
   $2_1 = ($11_1 | 0) == ($13_1 | 0);
   $11_1 = $11_1 + 1 | 0;
   if (!$2_1) {
    continue label$5
   }
   break label$5;
  };
  $14_1 = 47 - $8_1 | 0;
  $15_1 = 48 - $8_1 | 0;
  $16_1 = $8_1 + -25 | 0;
  $11_1 = $9_1;
  label$8 : {
   label$9 : while (1) {
    $21_1 = +HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3];
    $2_1 = 0;
    $6_1 = $11_1;
    label$10 : {
     $17_1 = ($11_1 | 0) < (1 | 0);
     if ($17_1) {
      break label$10
     }
     label$11 : while (1) {
      $13_1 = $2_1 << 2 | 0;
      label$12 : {
       label$13 : {
        $22_1 = $21_1 * 5.9604644775390625e-08;
        if (!(Math_abs($22_1) < 2147483648.0)) {
         break label$13
        }
        $10_1 = ~~$22_1;
        break label$12;
       }
       $10_1 = -2147483648;
      }
      $13_1 = ($5_1 + 480 | 0) + $13_1 | 0;
      label$14 : {
       label$15 : {
        $22_1 = +($10_1 | 0);
        $21_1 = $21_1 + $22_1 * -16777216.0;
        if (!(Math_abs($21_1) < 2147483648.0)) {
         break label$15
        }
        $10_1 = ~~$21_1;
        break label$14;
       }
       $10_1 = -2147483648;
      }
      HEAP32[$13_1 >> 2] = $10_1;
      $6_1 = $6_1 + -1 | 0;
      $21_1 = +HEAPF64[($5_1 + ($6_1 << 3 | 0) | 0) >> 3] + $22_1;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($11_1 | 0)) {
       continue label$11
      }
      break label$11;
     };
    }
    $21_1 = +$114(+$21_1, $12_1 | 0);
    label$16 : {
     label$17 : {
      $21_1 = $21_1 + +$57(+($21_1 * .125)) * -8.0;
      if (!(Math_abs($21_1) < 2147483648.0)) {
       break label$17
      }
      $18_1 = ~~$21_1;
      break label$16;
     }
     $18_1 = -2147483648;
    }
    $21_1 = $21_1 - +($18_1 | 0);
    label$18 : {
     label$19 : {
      label$20 : {
       label$21 : {
        label$22 : {
         $19_1 = ($12_1 | 0) < (1 | 0);
         if ($19_1) {
          break label$22
         }
         $2_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
         $204 = $2_1;
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         $207 = $2_1;
         $2_1 = $2_1 >> $15_1 | 0;
         $6_1 = $207 - ($2_1 << $15_1 | 0) | 0;
         HEAP32[$204 >> 2] = $6_1;
         $20_1 = $6_1 >> $14_1 | 0;
         $18_1 = $2_1 + $18_1 | 0;
         break label$21;
        }
        if ($12_1) {
         break label$20
        }
        $20_1 = (HEAP32[((($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($20_1 | 0) < (1 | 0)) {
        break label$18
       }
       break label$19;
      }
      $20_1 = 2;
      if ($21_1 >= .5) {
       break label$19
      }
      $20_1 = 0;
      break label$18;
     }
     $2_1 = 0;
     $10_1 = 0;
     label$23 : {
      if ($17_1) {
       break label$23
      }
      label$24 : while (1) {
       $17_1 = ($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0;
       $6_1 = HEAP32[$17_1 >> 2] | 0;
       $13_1 = 16777215;
       label$25 : {
        label$26 : {
         if ($10_1) {
          break label$26
         }
         $13_1 = 16777216;
         if ($6_1) {
          break label$26
         }
         $10_1 = 0;
         break label$25;
        }
        HEAP32[$17_1 >> 2] = $13_1 - $6_1 | 0;
        $10_1 = 1;
       }
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) != ($11_1 | 0)) {
        continue label$24
       }
       break label$24;
      };
     }
     label$27 : {
      if ($19_1) {
       break label$27
      }
      $2_1 = 8388607;
      label$28 : {
       switch ($16_1 | 0) {
       case 1:
        $2_1 = 4194303;
        break;
       case 0:
        break label$28;
       default:
        break label$27;
       };
      }
      $6_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) & $2_1 | 0;
     }
     $18_1 = $18_1 + 1 | 0;
     if (($20_1 | 0) != (2 | 0)) {
      break label$18
     }
     $21_1 = 1.0 - $21_1;
     $20_1 = 2;
     if (!$10_1) {
      break label$18
     }
     $21_1 = $21_1 - +$114(+(1.0), $12_1 | 0);
    }
    label$30 : {
     if ($21_1 != 0.0) {
      break label$30
     }
     $6_1 = 0;
     $2_1 = $11_1;
     label$31 : {
      if (($2_1 | 0) <= ($9_1 | 0)) {
       break label$31
      }
      label$32 : while (1) {
       $2_1 = $2_1 + -1 | 0;
       $6_1 = HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | $6_1 | 0;
       if (($2_1 | 0) > ($9_1 | 0)) {
        continue label$32
       }
       break label$32;
      };
      if (!$6_1) {
       break label$31
      }
      $8_1 = $12_1;
      label$33 : while (1) {
       $8_1 = $8_1 + -24 | 0;
       $11_1 = $11_1 + -1 | 0;
       if (!(HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0)) {
        continue label$33
       }
       break label$8;
      };
     }
     $2_1 = 1;
     label$34 : while (1) {
      $6_1 = $2_1;
      $2_1 = $2_1 + 1 | 0;
      if (!(HEAP32[(($5_1 + 480 | 0) + (($9_1 - $6_1 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label$34
      }
      break label$34;
     };
     $13_1 = $6_1 + $11_1 | 0;
     label$35 : while (1) {
      $6_1 = $11_1 + $3_1 | 0;
      $11_1 = $11_1 + 1 | 0;
      HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11_1 + $7_1 | 0) << 2 | 0) + 89776 | 0) >> 2] | 0 | 0);
      $2_1 = 0;
      $21_1 = 0.0;
      label$36 : {
       if (($3_1 | 0) < (1 | 0)) {
        break label$36
       }
       label$37 : while (1) {
        $21_1 = $21_1 + +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3];
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != ($3_1 | 0)) {
         continue label$37
        }
        break label$37;
       };
      }
      HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $21_1;
      if (($11_1 | 0) < ($13_1 | 0)) {
       continue label$35
      }
      break label$35;
     };
     $11_1 = $13_1;
     continue label$9;
    }
    break label$9;
   };
   label$38 : {
    label$39 : {
     $21_1 = +$114(+$21_1, 24 - $8_1 | 0 | 0);
     if (!($21_1 >= 16777216.0)) {
      break label$39
     }
     $3_1 = $11_1 << 2 | 0;
     label$40 : {
      label$41 : {
       $22_1 = $21_1 * 5.9604644775390625e-08;
       if (!(Math_abs($22_1) < 2147483648.0)) {
        break label$41
       }
       $2_1 = ~~$22_1;
       break label$40;
      }
      $2_1 = -2147483648;
     }
     $3_1 = ($5_1 + 480 | 0) + $3_1 | 0;
     label$42 : {
      label$43 : {
       $21_1 = $21_1 + +($2_1 | 0) * -16777216.0;
       if (!(Math_abs($21_1) < 2147483648.0)) {
        break label$43
       }
       $6_1 = ~~$21_1;
       break label$42;
      }
      $6_1 = -2147483648;
     }
     HEAP32[$3_1 >> 2] = $6_1;
     $11_1 = $11_1 + 1 | 0;
     break label$38;
    }
    label$44 : {
     label$45 : {
      if (!(Math_abs($21_1) < 2147483648.0)) {
       break label$45
      }
      $2_1 = ~~$21_1;
      break label$44;
     }
     $2_1 = -2147483648;
    }
    $8_1 = $12_1;
   }
   HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
  $21_1 = +$114(+(1.0), $8_1 | 0);
  label$46 : {
   if (($11_1 | 0) <= (-1 | 0)) {
    break label$46
   }
   $2_1 = $11_1;
   label$47 : while (1) {
    HEAPF64[($5_1 + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 * +(HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
    $21_1 = $21_1 * 5.9604644775390625e-08;
    $3_1 = ($2_1 | 0) > (0 | 0);
    $2_1 = $2_1 + -1 | 0;
    if ($3_1) {
     continue label$47
    }
    break label$47;
   };
   if (($11_1 | 0) <= (-1 | 0)) {
    break label$46
   }
   $2_1 = $11_1;
   label$48 : while (1) {
    $6_1 = $2_1;
    $0_1 = $11_1 - $2_1 | 0;
    $21_1 = 0.0;
    $2_1 = 0;
    label$49 : {
     label$50 : while (1) {
      $21_1 = $21_1 + +HEAPF64[(($2_1 << 3 | 0) + 92544 | 0) >> 3] * +HEAPF64[($5_1 + (($2_1 + $6_1 | 0) << 3 | 0) | 0) >> 3];
      if (($2_1 | 0) >= ($9_1 | 0)) {
       break label$49
      }
      $3_1 = $2_1 >>> 0 < $0_1 >>> 0;
      $2_1 = $2_1 + 1 | 0;
      if ($3_1) {
       continue label$50
      }
      break label$50;
     };
    }
    HEAPF64[(($5_1 + 160 | 0) + ($0_1 << 3 | 0) | 0) >> 3] = $21_1;
    $2_1 = $6_1 + -1 | 0;
    if (($6_1 | 0) > (0 | 0)) {
     continue label$48
    }
    break label$48;
   };
  }
  label$51 : {
   label$52 : {
    label$53 : {
     switch ($4_1 | 0) {
     case 3:
      $23_1 = 0.0;
      label$56 : {
       if (($11_1 | 0) < (1 | 0)) {
        break label$56
       }
       $21_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label$57 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $22_1 = +HEAPF64[$6_1 >> 3];
        $515 = $22_1;
        $22_1 = $22_1 + $21_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 + ($515 - $22_1);
        HEAPF64[$6_1 >> 3] = $22_1;
        $6_1 = ($2_1 | 0) > (1 | 0);
        $21_1 = $22_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$57
        }
        break label$57;
       };
       if (($11_1 | 0) < (2 | 0)) {
        break label$56
       }
       $21_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label$58 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $22_1 = +HEAPF64[$6_1 >> 3];
        $553 = $22_1;
        $22_1 = $22_1 + $21_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 + ($553 - $22_1);
        HEAPF64[$6_1 >> 3] = $22_1;
        $6_1 = ($2_1 | 0) > (2 | 0);
        $21_1 = $22_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$58
        }
        break label$58;
       };
       $23_1 = 0.0;
       if (($11_1 | 0) <= (1 | 0)) {
        break label$56
       }
       label$59 : while (1) {
        $23_1 = $23_1 + +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
        $2_1 = ($11_1 | 0) > (2 | 0);
        $11_1 = $11_1 + -1 | 0;
        if ($2_1) {
         continue label$59
        }
        break label$59;
       };
      }
      $21_1 = +HEAPF64[($5_1 + 160 | 0) >> 3];
      if ($20_1) {
       break label$52
      }
      HEAPF64[$1_1 >> 3] = $21_1;
      $21_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
      HEAPF64[($1_1 + 16 | 0) >> 3] = $23_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $21_1;
      break label$51;
     case 0:
      $21_1 = 0.0;
      label$60 : {
       if (($11_1 | 0) < (0 | 0)) {
        break label$60
       }
       label$61 : while (1) {
        $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
        $2_1 = ($11_1 | 0) > (0 | 0);
        $11_1 = $11_1 + -1 | 0;
        if ($2_1) {
         continue label$61
        }
        break label$61;
       };
      }
      HEAPF64[$1_1 >> 3] = $20_1 ? -$21_1 : $21_1;
      break label$51;
     case 1:
     case 2:
      break label$53;
     default:
      break label$51;
     };
    }
    $21_1 = 0.0;
    label$62 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$62
     }
     $2_1 = $11_1;
     label$63 : while (1) {
      $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      $3_1 = ($2_1 | 0) > (0 | 0);
      $2_1 = $2_1 + -1 | 0;
      if ($3_1) {
       continue label$63
      }
      break label$63;
     };
    }
    HEAPF64[$1_1 >> 3] = $20_1 ? -$21_1 : $21_1;
    $21_1 = +HEAPF64[($5_1 + 160 | 0) >> 3] - $21_1;
    $2_1 = 1;
    label$64 : {
     if (($11_1 | 0) < (1 | 0)) {
      break label$64
     }
     label$65 : while (1) {
      $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      $3_1 = ($2_1 | 0) != ($11_1 | 0);
      $2_1 = $2_1 + 1 | 0;
      if ($3_1) {
       continue label$65
      }
      break label$65;
     };
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $20_1 ? -$21_1 : $21_1;
    break label$51;
   }
   HEAPF64[$1_1 >> 3] = -$21_1;
   $21_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
   HEAPF64[($1_1 + 16 | 0) >> 3] = -$23_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = -$21_1;
  }
  global$0 = $5_1 + 560 | 0;
  return $18_1 & 7 | 0 | 0;
 }
 
 function $59($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $3_1 = 0.0, $5_1 = 0.0, $4_1 = 0.0;
  $3_1 = $0_1 * $0_1;
  $4_1 = $3_1 * ($3_1 * $3_1) * ($3_1 * 1.58969099521155e-10 + -2.5050760253406863e-08) + ($3_1 * ($3_1 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
  $5_1 = $3_1 * $0_1;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return +($5_1 * ($3_1 * $4_1 + -.16666666666666632) + $0_1);
  }
  return +($0_1 - ($3_1 * ($1_1 * .5 - $5_1 * $4_1) - $1_1 + $5_1 * .16666666666666632));
 }
 
 function $60($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $77($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $61($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $62($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $21_1 = 0, $22_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2_1 - $3_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $1$hi;
  $21_1 = $3_1 + $1_1 | 0;
  $22_1 = $2_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$3 = $1_1;
  if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
   $14_1 = 1
  } else {
   if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
    if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $15_1 = 0
    } else {
     $15_1 = 1
    }
    $16_1 = $15_1;
   } else {
    $16_1 = 0
   }
   $14_1 = $16_1;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  HEAP32[($17_1 + 104 | 0) >> 2] = ($1_1 | 0) != (i64toi32_i32$1 | 0) | ($1$hi | 0) != (i64toi32_i32$0 | 0) | 0 ? ($14_1 ? $21_1 : $22_1) : $2_1;
 }
 
 function $63($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $1$hi = 0, i64toi32_i32$4 = 0, $4_1 = 0, $1_1 = 0, $3_1 = 0, $2_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $5_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $11$hi = 0, $30_1 = 0, $30$hi = 0, $38_1 = 0, $38$hi = 0, $50_1 = 0, $52_1 = 0, $52$hi = 0, $57_1 = 0, $57$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$3 = $1_1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $23_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $24_1 = 0
       } else {
        $24_1 = 1
       }
       $25_1 = $24_1;
      } else {
       $25_1 = 0
      }
      $23_1 = $25_1;
     }
     if ($23_1) {
      break label$2
     }
    }
    $2_1 = $83($0_1 | 0) | 0;
    if (($2_1 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $4_1 = $3_1;
  label$4 : {
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$2 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$0;
   if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
    break label$4
   }
   $4_1 = $3_1;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $30_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $30$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$3 = $30$hi;
   i64toi32_i32$1 = $30_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1_1 = i64toi32_i32$4;
   $1$hi = i64toi32_i32$5;
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3_1 - $5_1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
   $38_1 = i64toi32_i32$2;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $38$hi;
   i64toi32_i32$1 = $38_1;
   if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
    $26_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      $27_1 = 0
     } else {
      $27_1 = 1
     }
     $28_1 = $27_1;
    } else {
     $28_1 = 0
    }
    $26_1 = $28_1;
   }
   if ($26_1) {
    break label$4
   }
   i64toi32_i32$0 = $1$hi;
   $4_1 = $5_1 + $1_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $4_1;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$5 : {
   if (!$3_1) {
    break label$5
   }
   $50_1 = $0_1;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   $52_1 = i64toi32_i32$0;
   $52$hi = i64toi32_i32$5;
   i64toi32_i32$0 = ($3_1 - $4_1 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
   $57_1 = i64toi32_i32$0;
   $57$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $52$hi;
   i64toi32_i32$1 = $52_1;
   i64toi32_i32$0 = $57$hi;
   i64toi32_i32$2 = $57_1;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$1 = $50_1;
   HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = i64toi32_i32$3;
   HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$6 : {
   $0_1 = $4_1 + -1 | 0;
   if (($2_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
    break label$6
   }
   HEAP8[$0_1 >> 0] = $2_1;
  }
  return $2_1 | 0;
 }
 
 function $64($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $65() {
  return 97256 | 0;
 }
 
 function $66($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11_1 | ($23_1 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $67($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $70_1 = 0, $71_1 = 0, $71$hi = 0, $72_1 = 0, $72$hi = 0, $76$hi = 0, $80_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $99($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if (($3_1 | 0) >= (32767 | 0)) {
      break label$3
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $99($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 65536;
   $99($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if (($3_1 | 0) <= (-32765 | 0)) {
     break label$4
    }
    $3_1 = $3_1 + 16382 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   $99($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = (($3_1 | 0) > (-49146 | 0) ? $3_1 : -49146) + 32764 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $71_1 = $1_1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72_1 = $2_1;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  $99($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $68($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $69($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $9_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $10_1 = 0, $10$hi = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2 | 0;
    $6_1 = HEAP32[($2_1 + 92668 | 0) >> 2] | 0;
    $7_1 = HEAP32[($2_1 + 92656 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$4;
      }
      $2_1 = $63($1_1 | 0) | 0;
     }
     if ($61($2_1 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $8_1 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $8_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$6;
     }
     $2_1 = $63($1_1 | 0) | 0;
    }
    $9_1 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 89700 | 0) >> 0] | 0 | 0)) {
         break label$11
        }
        label$13 : {
         if ($9_1 >>> 0 > 6 >>> 0) {
          break label$13
         }
         label$14 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$14
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$13;
         }
         $2_1 = $63($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (8 | 0)) {
         continue label$12
        }
        break label$10;
       };
      }
      label$15 : {
       if (($9_1 | 0) == (3 | 0)) {
        break label$15
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
       if ($9_1 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (!$3_1) {
        break label$9
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       $1_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$16
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$10
      }
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$10
      }
      label$17 : while (1) {
       label$18 : {
        if (!$1_1) {
         break label$18
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       $9_1 = $9_1 + -1 | 0;
       if ($9_1 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     $93($4_1 | 0, Math_fround(Math_fround(Math_fround($8_1 | 0) * Math_fround(infinity))));
     i64toi32_i32$2 = $4_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($9_1) {
        break label$21
       }
       $9_1 = 0;
       label$22 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 89709 | 0) >> 0] | 0 | 0)) {
         break label$21
        }
        label$23 : {
         if ($9_1 >>> 0 > 1 >>> 0) {
          break label$23
         }
         label$24 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$24
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$23;
         }
         $2_1 = $63($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (3 | 0)) {
         continue label$22
        }
        break label$20;
       };
      }
      label$25 : {
       switch ($9_1 | 0) {
       case 0:
        label$27 : {
         if (($2_1 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $9_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($9_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$29
           }
           HEAP32[$5_1 >> 2] = $9_1 + 1 | 0;
           $9_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$28;
          }
          $9_1 = $63($1_1 | 0) | 0;
         }
         label$30 : {
          if (($9_1 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          $70($4_1 + 16 | 0 | 0, $1_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
          i64toi32_i32$2 = $4_1 + 24 | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $11_1 = i64toi32_i32$0;
          $11$hi = i64toi32_i32$1;
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$1;
          $10$hi = i64toi32_i32$0;
          break label$1;
         }
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$27
         }
         HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
        }
        $71($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
        i64toi32_i32$2 = $4_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$1;
        $10$hi = i64toi32_i32$0;
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      label$31 : {
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$31
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      HEAP32[($65() | 0) >> 2] = 28;
      break label$19;
     }
     label$32 : {
      label$33 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$33
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$32;
      }
      $2_1 = $63($1_1 | 0) | 0;
     }
     label$34 : {
      label$35 : {
       if (($2_1 | 0) != (40 | 0)) {
        break label$35
       }
       $9_1 = 1;
       break label$34;
      }
      i64toi32_i32$0 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$1
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      break label$1;
     }
     label$36 : while (1) {
      label$37 : {
       label$38 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$38
        }
        HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$37;
       }
       $2_1 = $63($1_1 | 0) | 0;
      }
      $8_1 = $2_1 + -65 | 0;
      label$39 : {
       label$40 : {
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$40
        }
        if ($8_1 >>> 0 < 26 >>> 0) {
         break label$40
        }
        $8_1 = $2_1 + -97 | 0;
        if (($2_1 | 0) == (95 | 0)) {
         break label$40
        }
        if ($8_1 >>> 0 >= 26 >>> 0) {
         break label$39
        }
       }
       $9_1 = $9_1 + 1 | 0;
       continue label$36;
      }
      break label$36;
     };
     i64toi32_i32$0 = 2147450880;
     $11_1 = 0;
     $11$hi = i64toi32_i32$0;
     if (($2_1 | 0) == (41 | 0)) {
      break label$1
     }
     label$41 : {
      $2_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$41
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
     }
     label$42 : {
      if (!$3_1) {
       break label$42
      }
      if (!$9_1) {
       break label$1
      }
      label$43 : while (1) {
       $9_1 = $9_1 + -1 | 0;
       label$44 : {
        if (!$2_1) {
         break label$44
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       if ($9_1) {
        continue label$43
       }
       break label$1;
      };
     }
     HEAP32[($65() | 0) >> 2] = 28;
    }
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $62($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   }
   i64toi32_i32$0 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $70($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $16$hi = 0, $19$hi = 0, $16_1 = 0, $19_1 = 0, $15$hi = 0, $17$hi = 0, $14$hi = 0, $15_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $20_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $106_1 = 0, $107_1 = 0, $108_1 = 0, $109_1 = 0, $110_1 = 0, $111_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $133 = 0, $133$hi = 0, $137 = 0, $137$hi = 0, $142 = 0, $142$hi = 0, $146 = 0, $146$hi = 0, $164 = 0, $164$hi = 0, $168 = 0, $168$hi = 0, $253$hi = 0, $260$hi = 0, $269 = 0, $269$hi = 0, $273 = 0, $273$hi = 0, $277 = 0, $277$hi = 0, $281 = 0, $281$hi = 0, $291 = 0, $291$hi = 0, $308 = 0, $308$hi = 0, $312 = 0, $312$hi = 0, $317 = 0, $317$hi = 0, $319 = 0, $319$hi = 0, $337$hi = 0, $345 = 0, $346 = 0, $349$hi = 0, $373 = 0, $373$hi = 0, $377 = 0, $377$hi = 0, $413 = 0, $413$hi = 0, $417 = 0, $417$hi = 0, $421 = 0, $421$hi = 0, $425 = 0, $425$hi = 0, $432 = 0, $432$hi = 0, $435 = 0, $435$hi = 0, $441 = 0, $441$hi = 0, $445 = 0, $445$hi = 0, $447 = 0, $447$hi = 0, $451 = 0, $451$hi = 0, $455 = 0, $455$hi = 0, $459 = 0, $459$hi = 0, $491 = 0, $491$hi = 0, $495 = 0, $495$hi = 0, $499 = 0, $499$hi = 0, $503 = 0, $503$hi = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$1;
   }
   $7_1 = $63($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$8
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$6;
      }
      $9_1 = 1;
      $7_1 = $63($1_1 | 0) | 0;
      continue label$6;
     };
    }
    $7_1 = $63($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   if (($7_1 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$10;
     }
     $7_1 = $63($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  label$12 : {
   label$13 : {
    label$14 : while (1) {
     $12_1 = $7_1 | 32 | 0;
     label$15 : {
      label$16 : {
       $13_1 = $7_1 + -48 | 0;
       if ($13_1 >>> 0 < 10 >>> 0) {
        break label$16
       }
       label$17 : {
        if (($12_1 + -97 | 0) >>> 0 < 6 >>> 0) {
         break label$17
        }
        if (($7_1 | 0) != (46 | 0)) {
         break label$12
        }
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$16
       }
       if ($8_1) {
        break label$13
       }
       $8_1 = 1;
       i64toi32_i32$5 = $19$hi;
       $14_1 = $19_1;
       $14$hi = i64toi32_i32$5;
       break label$15;
      }
      $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
      label$18 : {
       label$19 : {
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$0 = $19_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 7;
        if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
         $106_1 = 1
        } else {
         if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $107_1 = 0
          } else {
           $107_1 = 1
          }
          $108_1 = $107_1;
         } else {
          $108_1 = 0
         }
         $106_1 = $108_1;
        }
        if ($106_1) {
         break label$19
        }
        $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
        break label$18;
       }
       label$20 : {
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$3 = $19_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = 28;
        if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
         $109_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
          if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
           $110_1 = 0
          } else {
           $110_1 = 1
          }
          $111_1 = $110_1;
         } else {
          $111_1 = 0
         }
         $109_1 = $111_1;
        }
        if ($109_1) {
         break label$20
        }
        $94($6_1 + 48 | 0 | 0, $7_1 | 0);
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$3 = $15$hi;
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$0 = $15$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$5 = 1073414144;
        $99($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$5;
        $18$hi = i64toi32_i32$2;
        i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $15_1 = i64toi32_i32$2;
        $15$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
        $133 = i64toi32_i32$5;
        $133$hi = i64toi32_i32$2;
        i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $137 = i64toi32_i32$2;
        $137$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$0 = $133$hi;
        i64toi32_i32$3 = $137$hi;
        $99($6_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, $133 | 0, i64toi32_i32$0 | 0, $137 | 0, i64toi32_i32$3 | 0);
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$3 = $17$hi;
        i64toi32_i32$2 = $6_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
        $142 = i64toi32_i32$3;
        $142$hi = i64toi32_i32$0;
        i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $146 = i64toi32_i32$0;
        $146$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$2 = $142$hi;
        i64toi32_i32$5 = $146$hi;
        $87($6_1 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $142 | 0, i64toi32_i32$2 | 0, $146 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$0 = $6_1 + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$5;
        $17$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$5;
        break label$18;
       }
       if (!$7_1) {
        break label$18
       }
       if ($11_1) {
        break label$18
       }
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$5 = $15$hi;
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$2 = $15$hi;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 1073610752;
       $99($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
       $164 = i64toi32_i32$3;
       $164$hi = i64toi32_i32$0;
       i64toi32_i32$2 = (i64toi32_i32$2 + 80 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $168 = i64toi32_i32$0;
       $168$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = $164$hi;
       i64toi32_i32$5 = $168$hi;
       $87($6_1 + 64 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $164 | 0, i64toi32_i32$2 | 0, $168 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       $11_1 = 1;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
      }
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$4;
      $9_1 = 1;
     }
     label$21 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$21
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      continue label$14;
     }
     $7_1 = $63($1_1 | 0) | 0;
     continue label$14;
    };
   }
   $7_1 = 46;
  }
  label$22 : {
   label$23 : {
    label$24 : {
     label$25 : {
      if ($9_1) {
       break label$25
      }
      label$26 : {
       if (HEAP32[($1_1 + 104 | 0) >> 2] | 0) {
        break label$26
       }
       if ($5_1) {
        break label$23
       }
       break label$24;
      }
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
      if (!$5_1) {
       break label$24
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
      if (!$8_1) {
       break label$23
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
      break label$23;
     }
     label$27 : {
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = $19_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 7;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
       $112_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $113_1 = 0
        } else {
         $113_1 = 1
        }
        $114_1 = $113_1;
       } else {
        $114_1 = 0
       }
       $112_1 = $114_1;
      }
      if ($112_1) {
       break label$27
      }
      i64toi32_i32$5 = $19$hi;
      $15_1 = $19_1;
      $15$hi = i64toi32_i32$5;
      label$28 : while (1) {
       $10_1 = $10_1 << 4 | 0;
       i64toi32_i32$5 = $15$hi;
       i64toi32_i32$3 = $15_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 8;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        continue label$28
       }
       break label$28;
      };
     }
     label$29 : {
      label$30 : {
       label$31 : {
        label$32 : {
         if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
          break label$32
         }
         i64toi32_i32$5 = $72($1_1 | 0, $5_1 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
         $15_1 = i64toi32_i32$5;
         $15$hi = i64toi32_i32$1;
         i64toi32_i32$0 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$3 = 0;
         if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break label$29
         }
         label$33 : {
          if (!$5_1) {
           break label$33
          }
          if (HEAP32[($1_1 + 104 | 0) >> 2] | 0) {
           break label$31
          }
          break label$30;
         }
         i64toi32_i32$0 = 0;
         $16_1 = 0;
         $16$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $62($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
         i64toi32_i32$0 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$0;
         break label$22;
        }
        if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
         break label$30
        }
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      i64toi32_i32$0 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$0;
     }
     label$34 : {
      if ($10_1) {
       break label$34
      }
      $92($6_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
      i64toi32_i32$3 = $6_1 + 120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$1 = HEAP32[($6_1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 116 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$0;
      break label$22;
     }
     label$35 : {
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $14_1 : $19_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 2;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
       $115_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
       $115_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
      }
      $253$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $253$hi;
      i64toi32_i32$3 = $115_1;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$1 = $15_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = -32;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $260$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $260$hi;
      i64toi32_i32$1 = 0 - $3_1 | 0;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$5 | 0)) {
       $116_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
         $117_1 = 0
        } else {
         $117_1 = 1
        }
        $118_1 = $117_1;
       } else {
        $118_1 = 0
       }
       $116_1 = $118_1;
      }
      if ($116_1) {
       break label$35
      }
      HEAP32[($65() | 0) >> 2] = 68;
      $94($6_1 + 160 | 0 | 0, $4_1 | 0);
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$2 = HEAP32[($6_1 + 160 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 164 | 0) >> 2] | 0;
      $269 = i64toi32_i32$2;
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$1 = ($6_1 + 160 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $273 = i64toi32_i32$0;
      $273$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$0 = $273$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$5 = 2147418111;
      $99($6_1 + 144 | 0 | 0, $269 | 0, i64toi32_i32$2 | 0, $273 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] | 0;
      $277 = i64toi32_i32$5;
      $277$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 144 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $281 = i64toi32_i32$1;
      $281$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $277$hi;
      i64toi32_i32$1 = $281$hi;
      i64toi32_i32$0 = -1;
      i64toi32_i32$2 = 2147418111;
      $99($6_1 + 128 | 0 | 0, $277 | 0, i64toi32_i32$5 | 0, $281 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$1 = ($6_1 + 128 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$0 = HEAP32[($6_1 + 128 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($6_1 + 132 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$0;
      $16$hi = i64toi32_i32$2;
      break label$22;
     }
     label$36 : {
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$0 = $3_1 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $291 = i64toi32_i32$0;
      $291$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$1 = $19_1;
      i64toi32_i32$0 = $291$hi;
      i64toi32_i32$5 = $291;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
       $119_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $120_1 = 0
        } else {
         $120_1 = 1
        }
        $121_1 = $120_1;
       } else {
        $121_1 = 0
       }
       $119_1 = $121_1;
      }
      if ($119_1) {
       break label$36
      }
      label$37 : {
       if (($10_1 | 0) <= (-1 | 0)) {
        break label$37
       }
       label$38 : while (1) {
        i64toi32_i32$1 = $16$hi;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$1 = $16$hi;
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$0 = -1073807360;
        $87($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = 1073610752;
        $7_1 = $90($16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$5;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 420 | 0) >> 2] | 0;
        $308 = i64toi32_i32$1;
        $308$hi = i64toi32_i32$2;
        $1_1 = ($7_1 | 0) < (0 | 0);
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$1 = $308$hi;
        i64toi32_i32$0 = i64toi32_i32$3 ? $16_1 : $308;
        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$1;
        $312 = i64toi32_i32$0;
        $312$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$3 = ($6_1 + 416 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $317 = i64toi32_i32$5;
        $317$hi = i64toi32_i32$0;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$5 = $317$hi;
        i64toi32_i32$1 = i64toi32_i32$2 ? $17_1 : $317;
        i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$0 : i64toi32_i32$5;
        $319 = i64toi32_i32$1;
        $319$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$2 = $312$hi;
        i64toi32_i32$5 = $319$hi;
        $87($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $312 | 0, i64toi32_i32$2 | 0, $319 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$1 = $19_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $19_1 = i64toi32_i32$0;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$5 = ($6_1 + 400 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$4;
        $17$hi = i64toi32_i32$1;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 400 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 404 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$1;
        $16$hi = i64toi32_i32$4;
        $10_1 = $10_1 << 1 | 0 | ($7_1 | 0) > (-1 | 0) | 0;
        if (($10_1 | 0) > (-1 | 0)) {
         continue label$38
        }
        break label$38;
       };
      }
      label$39 : {
       label$40 : {
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
        $337$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$5 = $19_1;
        i64toi32_i32$1 = $337$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        i64toi32_i32$0 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $14_1 = i64toi32_i32$1;
        $14$hi = i64toi32_i32$2;
        $7_1 = i64toi32_i32$1;
        $345 = (i64toi32_i32$1 | 0) > (0 | 0) ? i64toi32_i32$1 : 0;
        $346 = $2_1;
        i64toi32_i32$2 = 0;
        $349$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$4 = $349$hi;
        i64toi32_i32$3 = $2_1;
        if ((i64toi32_i32$2 | 0) < (i64toi32_i32$4 | 0)) {
         $122_1 = 1
        } else {
         if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $123_1 = 0
          } else {
           $123_1 = 1
          }
          $124_1 = $123_1;
         } else {
          $124_1 = 0
         }
         $122_1 = $124_1;
        }
        $7_1 = $122_1 ? $345 : $346;
        if (($7_1 | 0) < (113 | 0)) {
         break label$40
        }
        $94($6_1 + 384 | 0 | 0, $4_1 | 0);
        i64toi32_i32$3 = $6_1 + 392 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $14_1 = i64toi32_i32$0;
        $14$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$2;
        i64toi32_i32$3 = $6_1;
        i64toi32_i32$2 = HEAP32[($6_1 + 384 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($6_1 + 388 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $20_1 = 0;
        $20$hi = i64toi32_i32$0;
        break label$39;
       }
       $92($6_1 + 352 | 0 | 0, +(+$114(+(1.0), 144 - $7_1 | 0 | 0)));
       $94($6_1 + 336 | 0 | 0, $4_1 | 0);
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$0 = HEAP32[($6_1 + 352 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($6_1 + 356 | 0) >> 2] | 0;
       $373 = i64toi32_i32$0;
       $373$hi = i64toi32_i32$2;
       i64toi32_i32$3 = ($6_1 + 352 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $377 = i64toi32_i32$2;
       $377$hi = i64toi32_i32$0;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$0 = HEAP32[($6_1 + 336 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($6_1 + 340 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$0;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$3 = ($6_1 + 336 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $14_1 = i64toi32_i32$2;
       $14$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $373$hi;
       i64toi32_i32$2 = $377$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$4 = $14$hi;
       $66($6_1 + 368 | 0 | 0, $373 | 0, i64toi32_i32$0 | 0, $377 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$2 = ($6_1 + 368 | 0) + 8 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $20_1 = i64toi32_i32$4;
       $20$hi = i64toi32_i32$3;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 368 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 372 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$3;
       $15$hi = i64toi32_i32$4;
      }
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 0;
      $7_1 = (($7_1 | 0) < (32 | 0) & ($89($16_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0 | 0) != (0 | 0) | 0) & !($10_1 & 1 | 0) | 0;
      $95($6_1 + 320 | 0 | 0, $10_1 + $7_1 | 0 | 0);
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$0 = HEAP32[($6_1 + 320 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($6_1 + 324 | 0) >> 2] | 0;
      $413 = i64toi32_i32$0;
      $413$hi = i64toi32_i32$2;
      i64toi32_i32$3 = ($6_1 + 320 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $417 = i64toi32_i32$2;
      $417$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$3 = $413$hi;
      i64toi32_i32$4 = $417$hi;
      $99($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$2 | 0, $413 | 0, i64toi32_i32$3 | 0, $417 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 304 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 308 | 0) >> 2] | 0;
      $421 = i64toi32_i32$4;
      $421$hi = i64toi32_i32$3;
      i64toi32_i32$2 = (i64toi32_i32$2 + 304 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $425 = i64toi32_i32$3;
      $425$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $421$hi;
      i64toi32_i32$3 = $425$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = $20$hi;
      $87($6_1 + 272 | 0 | 0, $421 | 0, i64toi32_i32$4 | 0, $425 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$2 | 0, $20_1 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$4 = i64toi32_i32$5 ? 0 : $16_1;
      i64toi32_i32$3 = i64toi32_i32$5 ? i64toi32_i32$0 : i64toi32_i32$2;
      $432 = i64toi32_i32$4;
      $432$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$2 = i64toi32_i32$0 ? 0 : $17_1;
      i64toi32_i32$5 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
      $435 = i64toi32_i32$2;
      $435$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $14$hi;
      i64toi32_i32$5 = $432$hi;
      i64toi32_i32$2 = $435$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$4 = $14$hi;
      $99($6_1 + 288 | 0 | 0, $432 | 0, i64toi32_i32$5 | 0, $435 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 288 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 292 | 0) >> 2] | 0;
      $441 = i64toi32_i32$4;
      $441$hi = i64toi32_i32$0;
      i64toi32_i32$2 = (i64toi32_i32$2 + 288 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $445 = i64toi32_i32$0;
      $445$hi = i64toi32_i32$4;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 272 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 276 | 0) >> 2] | 0;
      $447 = i64toi32_i32$4;
      $447$hi = i64toi32_i32$0;
      i64toi32_i32$2 = (i64toi32_i32$2 + 272 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $451 = i64toi32_i32$0;
      $451$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $441$hi;
      i64toi32_i32$0 = $445$hi;
      i64toi32_i32$2 = $447$hi;
      i64toi32_i32$5 = $451$hi;
      $87($6_1 + 256 | 0 | 0, $441 | 0, i64toi32_i32$4 | 0, $445 | 0, i64toi32_i32$0 | 0, $447 | 0, i64toi32_i32$2 | 0, $451 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] | 0;
      $455 = i64toi32_i32$5;
      $455$hi = i64toi32_i32$2;
      i64toi32_i32$0 = (i64toi32_i32$0 + 256 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $459 = i64toi32_i32$2;
      $459$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = $455$hi;
      i64toi32_i32$2 = $459$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      $101($6_1 + 240 | 0 | 0, $455 | 0, i64toi32_i32$5 | 0, $459 | 0, i64toi32_i32$2 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$4 | 0);
      label$41 : {
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 240 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 244 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$4;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$2 = (i64toi32_i32$2 + 240 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$0;
       $17$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 0;
       if ($89($16_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0) {
        break label$41
       }
       HEAP32[($65() | 0) >> 2] = 68;
      }
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$2 = $17$hi;
      $67($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$5 | 0, $17_1 | 0, i64toi32_i32$2 | 0, $19_1 | 0);
      i64toi32_i32$0 = ($6_1 + 224 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 224 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 228 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$5;
      $16$hi = i64toi32_i32$2;
      break label$22;
     }
     HEAP32[($65() | 0) >> 2] = 68;
     $94($6_1 + 208 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
     $491 = i64toi32_i32$2;
     $491$hi = i64toi32_i32$5;
     i64toi32_i32$0 = (i64toi32_i32$0 + 208 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $495 = i64toi32_i32$5;
     $495$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $491$hi;
     i64toi32_i32$5 = $495$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 65536;
     $99($6_1 + 192 | 0 | 0, $491 | 0, i64toi32_i32$2 | 0, $495 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 192 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 196 | 0) >> 2] | 0;
     $499 = i64toi32_i32$4;
     $499$hi = i64toi32_i32$0;
     i64toi32_i32$5 = (i64toi32_i32$5 + 192 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $503 = i64toi32_i32$0;
     $503$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $499$hi;
     i64toi32_i32$0 = $503$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 65536;
     $99($6_1 + 176 | 0 | 0, $499 | 0, i64toi32_i32$4 | 0, $503 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0);
     i64toi32_i32$0 = ($6_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$5;
     $16$hi = i64toi32_i32$2;
     break label$22;
    }
    i64toi32_i32$2 = 0;
    $62($1_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
   }
   $92($6_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
   i64toi32_i32$0 = $6_1 + 104 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$2;
   $19$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$5;
   $16$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $16$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $19$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $71($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $19$hi = 0, i64toi32_i32$4 = 0, $19_1 = 0, $14_1 = 0, $20$hi = 0, $13_1 = 0, $20_1 = 0, $8_1 = 0, $11_1 = 0, $15_1 = 0, $22$hi = 0, $21$hi = 0, $12_1 = 0, $22_1 = 0, $21_1 = 0, $16_1 = 0, $23$hi = 0, $24$hi = 0, $23_1 = 0, $24_1 = 0, $17_1 = 0, $9_1 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18_1 = 0, $25_1 = 0.0, $10_1 = 0, $128_1 = 0, $236 = 0, $236$hi = 0, $240 = 0, $240$hi = 0, $242 = 0, $242$hi = 0, $246 = 0, $246$hi = 0, $256$hi = 0, $265 = 0, $265$hi = 0, $269 = 0, $269$hi = 0, $273 = 0, $273$hi = 0, $277 = 0, $277$hi = 0, $287 = 0, $287$hi = 0, $296 = 0, $296$hi = 0, $300 = 0, $300$hi = 0, $304 = 0, $304$hi = 0, $308 = 0, $308$hi = 0, $357 = 0, $357$hi = 0, $361 = 0, $361$hi = 0, $363 = 0, $363$hi = 0, $367 = 0, $367$hi = 0, $386 = 0, $386$hi = 0, $390 = 0, $390$hi = 0, $392 = 0, $392$hi = 0, $396 = 0, $396$hi = 0, $407 = 0, $407$hi = 0, $411 = 0, $411$hi = 0, $413 = 0, $413$hi = 0, $417 = 0, $417$hi = 0, $445 = 0, $445$hi = 0, $449 = 0, $449$hi = 0, $451 = 0, $451$hi = 0, $455 = 0, $455$hi = 0, $465 = 0, $465$hi = 0, $469 = 0, $469$hi = 0, $471 = 0, $471$hi = 0, $475 = 0, $475$hi = 0, $514 = 0, $590$hi = 0, $592$hi = 0, $600 = 0, $600$hi = 0, $646 = 0, $648 = 0, $742 = 0, $742$hi = 0, $746 = 0, $746$hi = 0, $748 = 0, $748$hi = 0, $752 = 0, $752$hi = 0, $771 = 0, $771$hi = 0, $775 = 0, $775$hi = 0, $817 = 0, $879 = 0, $879$hi = 0, $883 = 0, $883$hi = 0, $902 = 0, $902$hi = 0, $906 = 0, $906$hi = 0, $924 = 0, $924$hi = 0, $928 = 0, $928$hi = 0, $965 = 0, $965$hi = 0, $969 = 0, $969$hi = 0, $988 = 0, $988$hi = 0, $992 = 0, $992$hi = 0, $1015 = 0, $1015$hi = 0, $1019 = 0, $1019$hi = 0, $1035 = 0, $1035$hi = 0, $1039 = 0, $1039$hi = 0, $1053 = 0, $1053$hi = 0, $1057 = 0, $1057$hi = 0, $1078 = 0, $1078$hi = 0, $1082 = 0, $1082$hi = 0, $1117 = 0, $1117$hi = 0, $1124 = 0, $1124$hi = 0;
  $7_1 = global$0 - 8976 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = $4_1 + $3_1 | 0;
  $10_1 = 0 - $9_1 | 0;
  i64toi32_i32$0 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$3
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$6
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label$4;
      }
      $11_1 = 1;
      $2_1 = $63($1_1 | 0) | 0;
      continue label$4;
     };
    }
    $2_1 = $63($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $19_1 = 0;
   $19$hi = i64toi32_i32$0;
   if (($2_1 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$9
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$8;
     }
     $2_1 = $63($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$5;
    if (($2_1 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $11_1 = 1;
   $8_1 = 1;
  }
  $12_1 = 0;
  HEAP32[($7_1 + 784 | 0) >> 2] = 0;
  $13_1 = $2_1 + -48 | 0;
  i64toi32_i32$5 = 0;
  $20_1 = 0;
  $20$hi = i64toi32_i32$5;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         label$17 : {
          label$18 : {
           $14_1 = ($2_1 | 0) == (46 | 0);
           if (!$14_1) {
            break label$18
           }
           $15_1 = 0;
           $16_1 = 0;
           break label$17;
          }
          $15_1 = 0;
          $16_1 = 0;
          if ($13_1 >>> 0 > 9 >>> 0) {
           break label$16
          }
         }
         label$19 : while (1) {
          label$20 : {
           label$21 : {
            if (!($14_1 & 1 | 0)) {
             break label$21
            }
            label$22 : {
             if ($8_1) {
              break label$22
             }
             i64toi32_i32$5 = $20$hi;
             $19_1 = $20_1;
             $19$hi = i64toi32_i32$5;
             $8_1 = 1;
             break label$20;
            }
            $14_1 = !$11_1;
            break label$15;
           }
           i64toi32_i32$5 = $20$hi;
           i64toi32_i32$0 = $20_1;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 1;
           i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           $20_1 = i64toi32_i32$1;
           $20$hi = i64toi32_i32$4;
           label$23 : {
            if (($15_1 | 0) > (2044 | 0)) {
             break label$23
            }
            $11_1 = ($2_1 | 0) == (48 | 0);
            i64toi32_i32$4 = $20$hi;
            $17_1 = $20_1;
            $14_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
            label$24 : {
             if (!$12_1) {
              break label$24
             }
             $13_1 = ($2_1 + Math_imul(HEAP32[$14_1 >> 2] | 0, 10) | 0) + -48 | 0;
            }
            $16_1 = $11_1 ? $16_1 : $17_1;
            HEAP32[$14_1 >> 2] = $13_1;
            $11_1 = 1;
            $2_1 = $12_1 + 1 | 0;
            $128_1 = $2_1;
            $2_1 = ($2_1 | 0) == (9 | 0);
            $12_1 = $2_1 ? 0 : $128_1;
            $15_1 = $15_1 + $2_1 | 0;
            break label$20;
           }
           if (($2_1 | 0) == (48 | 0)) {
            break label$20
           }
           HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
           $16_1 = 18396;
          }
          label$25 : {
           label$26 : {
            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$26
            }
            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
            $2_1 = HEAPU8[$2_1 >> 0] | 0;
            break label$25;
           }
           $2_1 = $63($1_1 | 0) | 0;
          }
          $13_1 = $2_1 + -48 | 0;
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
           continue label$19
          }
          if ($13_1 >>> 0 < 10 >>> 0) {
           continue label$19
          }
          break label$19;
         };
        }
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$0 = $20$hi;
        i64toi32_i32$3 = i64toi32_i32$2 ? $19_1 : $20_1;
        i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
        $19_1 = i64toi32_i32$3;
        $19$hi = i64toi32_i32$5;
        label$27 : {
         if (!$11_1) {
          break label$27
         }
         if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
          break label$27
         }
         label$28 : {
          i64toi32_i32$5 = $72($1_1 | 0, $6_1 | 0) | 0;
          i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
          $21_1 = i64toi32_i32$5;
          $21$hi = i64toi32_i32$3;
          i64toi32_i32$2 = i64toi32_i32$5;
          i64toi32_i32$5 = -2147483648;
          i64toi32_i32$0 = 0;
          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
           break label$28
          }
          if (!$6_1) {
           break label$12
          }
          i64toi32_i32$2 = 0;
          $21_1 = 0;
          $21$hi = i64toi32_i32$2;
          if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
           break label$28
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         if (!$11_1) {
          break label$13
         }
         i64toi32_i32$2 = $21$hi;
         i64toi32_i32$2 = $19$hi;
         i64toi32_i32$2 = $21$hi;
         i64toi32_i32$0 = $21_1;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$5 = $19_1;
         i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
         i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
         }
         $19_1 = i64toi32_i32$4;
         $19$hi = i64toi32_i32$1;
         break label$11;
        }
        $14_1 = !$11_1;
        if (($2_1 | 0) < (0 | 0)) {
         break label$14
        }
       }
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$14
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$14_1) {
       break label$11
      }
     }
     HEAP32[($65() | 0) >> 2] = 28;
    }
    i64toi32_i32$1 = 0;
    $20_1 = 0;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $62($1_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$1;
    break label$10;
   }
   label$29 : {
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    if ($1_1) {
     break label$29
    }
    $92($7_1 | 0, +(+($5_1 | 0) * 0.0));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$0;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$30 : {
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$2 = $20_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 9;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $166 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $167 = 0
      } else {
       $167 = 1
      }
      $168 = $167;
     } else {
      $168 = 0
     }
     $166 = $168;
    }
    if ($166) {
     break label$30
    }
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$0 = $20_1;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$30
    }
    label$31 : {
     if (($3_1 | 0) > (30 | 0)) {
      break label$31
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$30
     }
    }
    $94($7_1 + 48 | 0 | 0, $5_1 | 0);
    $95($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
    $236 = i64toi32_i32$5;
    $236$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($7_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $240 = i64toi32_i32$2;
    $240$hi = i64toi32_i32$5;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
    $242 = i64toi32_i32$5;
    $242$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($7_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $246 = i64toi32_i32$2;
    $246$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $236$hi;
    i64toi32_i32$2 = $240$hi;
    i64toi32_i32$0 = $242$hi;
    i64toi32_i32$1 = $246$hi;
    $99($7_1 + 16 | 0 | 0, $236 | 0, i64toi32_i32$5 | 0, $240 | 0, i64toi32_i32$2 | 0, $242 | 0, i64toi32_i32$0 | 0, $246 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$0;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$32 : {
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = 0;
    $256$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$0 = $256$hi;
    i64toi32_i32$5 = ($4_1 | 0) / (-2 | 0) | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $169 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $170 = 0
      } else {
       $170 = 1
      }
      $171 = $170;
     } else {
      $171 = 0
     }
     $169 = $171;
    }
    if ($169) {
     break label$32
    }
    HEAP32[($65() | 0) >> 2] = 68;
    $94($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 100 | 0) >> 2] | 0;
    $265 = i64toi32_i32$2;
    $265$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $269 = i64toi32_i32$1;
    $269$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $265$hi;
    i64toi32_i32$1 = $269$hi;
    i64toi32_i32$5 = -1;
    i64toi32_i32$0 = 2147418111;
    $99($7_1 + 80 | 0 | 0, $265 | 0, i64toi32_i32$2 | 0, $269 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
    $273 = i64toi32_i32$0;
    $273$hi = i64toi32_i32$5;
    i64toi32_i32$1 = (i64toi32_i32$1 + 80 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $277 = i64toi32_i32$5;
    $277$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $273$hi;
    i64toi32_i32$5 = $277$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $99($7_1 + 64 | 0 | 0, $273 | 0, i64toi32_i32$0 | 0, $277 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$5 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$2;
    break label$10;
   }
   label$33 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $287 = i64toi32_i32$1;
    $287$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $287$hi;
    i64toi32_i32$0 = $287;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $172 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
       $173 = 0
      } else {
       $173 = 1
      }
      $174 = $173;
     } else {
      $174 = 0
     }
     $172 = $174;
    }
    if ($172) {
     break label$33
    }
    HEAP32[($65() | 0) >> 2] = 68;
    $94($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 148 | 0) >> 2] | 0;
    $296 = i64toi32_i32$5;
    $296$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($7_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $300 = i64toi32_i32$2;
    $300$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $296$hi;
    i64toi32_i32$2 = $300$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 65536;
    $99($7_1 + 128 | 0 | 0, $296 | 0, i64toi32_i32$5 | 0, $300 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $304 = i64toi32_i32$1;
    $304$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $308 = i64toi32_i32$0;
    $308$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $304$hi;
    i64toi32_i32$0 = $308$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 65536;
    $99($7_1 + 112 | 0 | 0, $304 | 0, i64toi32_i32$1 | 0, $308 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$0 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 116 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$2;
    $20$hi = i64toi32_i32$5;
    break label$10;
   }
   label$34 : {
    if (!$12_1) {
     break label$34
    }
    label$35 : {
     if (($12_1 | 0) > (8 | 0)) {
      break label$35
     }
     $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$36 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $12_1 = $12_1 + 1 | 0;
      if (($12_1 | 0) != (9 | 0)) {
       continue label$36
      }
      break label$36;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $15_1 = $15_1 + 1 | 0;
   }
   i64toi32_i32$5 = $19$hi;
   $8_1 = $19_1;
   label$37 : {
    if (($16_1 | 0) >= (9 | 0)) {
     break label$37
    }
    if (($16_1 | 0) > ($8_1 | 0)) {
     break label$37
    }
    if (($8_1 | 0) > (17 | 0)) {
     break label$37
    }
    label$38 : {
     if (($8_1 | 0) != (9 | 0)) {
      break label$38
     }
     $94($7_1 + 192 | 0 | 0, $5_1 | 0);
     $95($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 196 | 0) >> 2] | 0;
     $357 = i64toi32_i32$5;
     $357$hi = i64toi32_i32$2;
     i64toi32_i32$0 = ($7_1 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $361 = i64toi32_i32$2;
     $361$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
     $363 = i64toi32_i32$5;
     $363$hi = i64toi32_i32$2;
     i64toi32_i32$0 = ($7_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $367 = i64toi32_i32$2;
     $367$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $357$hi;
     i64toi32_i32$2 = $361$hi;
     i64toi32_i32$0 = $363$hi;
     i64toi32_i32$1 = $367$hi;
     $99($7_1 + 160 | 0 | 0, $357 | 0, i64toi32_i32$5 | 0, $361 | 0, i64toi32_i32$2 | 0, $363 | 0, i64toi32_i32$0 | 0, $367 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$0 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$0;
     $20$hi = i64toi32_i32$1;
     break label$10;
    }
    label$39 : {
     if (($8_1 | 0) > (8 | 0)) {
      break label$39
     }
     $94($7_1 + 272 | 0 | 0, $5_1 | 0);
     $95($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
     $386 = i64toi32_i32$1;
     $386$hi = i64toi32_i32$0;
     i64toi32_i32$2 = ($7_1 + 272 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $390 = i64toi32_i32$0;
     $390$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     $392 = i64toi32_i32$1;
     $392$hi = i64toi32_i32$0;
     i64toi32_i32$2 = ($7_1 + 256 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $396 = i64toi32_i32$0;
     $396$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $386$hi;
     i64toi32_i32$0 = $390$hi;
     i64toi32_i32$2 = $392$hi;
     i64toi32_i32$5 = $396$hi;
     $99($7_1 + 240 | 0 | 0, $386 | 0, i64toi32_i32$1 | 0, $390 | 0, i64toi32_i32$0 | 0, $392 | 0, i64toi32_i32$2 | 0, $396 | 0, i64toi32_i32$5 | 0);
     $94($7_1 + 224 | 0 | 0, HEAP32[(((8 - $8_1 | 0) << 2 | 0) + 92624 | 0) >> 2] | 0 | 0);
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 244 | 0) >> 2] | 0;
     $407 = i64toi32_i32$5;
     $407$hi = i64toi32_i32$2;
     i64toi32_i32$0 = ($7_1 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $411 = i64toi32_i32$2;
     $411$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 228 | 0) >> 2] | 0;
     $413 = i64toi32_i32$5;
     $413$hi = i64toi32_i32$2;
     i64toi32_i32$0 = ($7_1 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $417 = i64toi32_i32$2;
     $417$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $407$hi;
     i64toi32_i32$2 = $411$hi;
     i64toi32_i32$0 = $413$hi;
     i64toi32_i32$1 = $417$hi;
     $91($7_1 + 208 | 0 | 0, $407 | 0, i64toi32_i32$5 | 0, $411 | 0, i64toi32_i32$2 | 0, $413 | 0, i64toi32_i32$0 | 0, $417 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$0 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$0;
     $20$hi = i64toi32_i32$1;
     break label$10;
    }
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    label$40 : {
     $2_1 = ($3_1 + Math_imul($8_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$40
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$37
     }
    }
    $94($7_1 + 352 | 0 | 0, $5_1 | 0);
    $95($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 352 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7_1 + 356 | 0) >> 2] | 0;
    $445 = i64toi32_i32$1;
    $445$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($7_1 + 352 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $449 = i64toi32_i32$0;
    $449$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 336 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7_1 + 340 | 0) >> 2] | 0;
    $451 = i64toi32_i32$1;
    $451$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($7_1 + 336 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $455 = i64toi32_i32$0;
    $455$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $445$hi;
    i64toi32_i32$0 = $449$hi;
    i64toi32_i32$2 = $451$hi;
    i64toi32_i32$5 = $455$hi;
    $99($7_1 + 320 | 0 | 0, $445 | 0, i64toi32_i32$1 | 0, $449 | 0, i64toi32_i32$0 | 0, $451 | 0, i64toi32_i32$2 | 0, $455 | 0, i64toi32_i32$5 | 0);
    $94($7_1 + 304 | 0 | 0, HEAP32[(($8_1 << 2 | 0) + 92584 | 0) >> 2] | 0 | 0);
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 324 | 0) >> 2] | 0;
    $465 = i64toi32_i32$5;
    $465$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($7_1 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $469 = i64toi32_i32$2;
    $469$hi = i64toi32_i32$5;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 308 | 0) >> 2] | 0;
    $471 = i64toi32_i32$5;
    $471$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($7_1 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $475 = i64toi32_i32$2;
    $475$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $465$hi;
    i64toi32_i32$2 = $469$hi;
    i64toi32_i32$0 = $471$hi;
    i64toi32_i32$1 = $475$hi;
    $99($7_1 + 288 | 0 | 0, $465 | 0, i64toi32_i32$5 | 0, $469 | 0, i64toi32_i32$2 | 0, $471 | 0, i64toi32_i32$0 | 0, $475 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$0;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$41 : while (1) {
    $2_1 = $15_1;
    $15_1 = $2_1 + -1 | 0;
    if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$41
    }
    break label$41;
   };
   $12_1 = 0;
   label$42 : {
    label$43 : {
     $1_1 = ($8_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break label$43
     }
     $14_1 = 0;
     break label$42;
    }
    $6_1 = ($8_1 | 0) > (-1 | 0) ? $1_1 : $1_1 + 9 | 0;
    label$44 : {
     label$45 : {
      if ($2_1) {
       break label$45
      }
      $14_1 = 0;
      $2_1 = 0;
      break label$44;
     }
     $11_1 = HEAP32[(((8 - $6_1 | 0) << 2 | 0) + 92624 | 0) >> 2] | 0;
     $17_1 = (1e9 | 0) / ($11_1 | 0) | 0;
     $13_1 = 0;
     $1_1 = 0;
     $14_1 = 0;
     label$46 : while (1) {
      $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
      $514 = $15_1;
      $15_1 = HEAP32[$15_1 >> 2] | 0;
      $16_1 = ($15_1 >>> 0) / ($11_1 >>> 0) | 0;
      $13_1 = $16_1 + $13_1 | 0;
      HEAP32[$514 >> 2] = $13_1;
      $13_1 = ($1_1 | 0) == ($14_1 | 0) & !$13_1 | 0;
      $14_1 = $13_1 ? ($14_1 + 1 | 0) & 2047 | 0 : $14_1;
      $8_1 = $13_1 ? $8_1 + -9 | 0 : $8_1;
      $13_1 = Math_imul($17_1, $15_1 - Math_imul($16_1, $11_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($2_1 | 0)) {
       continue label$46
      }
      break label$46;
     };
     if (!$13_1) {
      break label$44
     }
     HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $13_1;
     $2_1 = $2_1 + 1 | 0;
    }
    $8_1 = ($8_1 - $6_1 | 0) + 9 | 0;
   }
   label$47 : while (1) {
    $16_1 = ($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0;
    label$48 : {
     label$49 : while (1) {
      label$50 : {
       if (($8_1 | 0) < (36 | 0)) {
        break label$50
       }
       if (($8_1 | 0) != (36 | 0)) {
        break label$48
       }
       if ((HEAP32[$16_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$48
       }
      }
      $11_1 = $2_1 + 2047 | 0;
      $13_1 = 0;
      label$51 : while (1) {
       label$52 : {
        label$53 : {
         $1_1 = $11_1 & 2047 | 0;
         $11_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $11_1;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$5 = 29;
         i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $175 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
          $175 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $590$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $592$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $590$hi;
         i64toi32_i32$0 = $175;
         i64toi32_i32$2 = $592$hi;
         i64toi32_i32$5 = $13_1;
         i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
         i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $19_1 = i64toi32_i32$3;
         $19$hi = i64toi32_i32$4;
         i64toi32_i32$1 = i64toi32_i32$3;
         i64toi32_i32$0 = 0;
         i64toi32_i32$5 = 1000000001;
         if (i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
          break label$53
         }
         $13_1 = 0;
         break label$52;
        }
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$4 = 0;
        i64toi32_i32$4 = __wasm_i64_udiv($19_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $20_1 = i64toi32_i32$4;
        $20$hi = i64toi32_i32$1;
        i64toi32_i32$4 = 0;
        i64toi32_i32$4 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $600 = i64toi32_i32$4;
        $600$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$5 = $19_1;
        i64toi32_i32$4 = $600$hi;
        i64toi32_i32$0 = $600;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
        i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $19_1 = i64toi32_i32$2;
        $19$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $20$hi;
        $13_1 = $20_1;
       }
       i64toi32_i32$3 = $19$hi;
       $15_1 = $19_1;
       HEAP32[$11_1 >> 2] = $19_1;
       $2_1 = ($1_1 | 0) != (($2_1 + -1 | 0) & 2047 | 0 | 0) ? $2_1 : ($1_1 | 0) == ($14_1 | 0) ? $2_1 : $19_1 ? $2_1 : $1_1;
       $11_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($14_1 | 0)) {
        continue label$51
       }
       break label$51;
      };
      $12_1 = $12_1 + -29 | 0;
      if (!$13_1) {
       continue label$49
      }
      break label$49;
     };
     label$54 : {
      $14_1 = ($14_1 + -1 | 0) & 2047 | 0;
      if (($14_1 | 0) != ($2_1 | 0)) {
       break label$54
      }
      $1_1 = ($7_1 + 784 | 0) + ((($2_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $646 = $1_1;
      $648 = HEAP32[$1_1 >> 2] | 0;
      $1_1 = ($2_1 + -1 | 0) & 2047 | 0;
      HEAP32[$646 >> 2] = $648 | (HEAP32[(($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0) | 0;
      $2_1 = $1_1;
     }
     $8_1 = $8_1 + 9 | 0;
     HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $13_1;
     continue label$47;
    }
    break label$47;
   };
   label$55 : {
    label$56 : while (1) {
     $6_1 = ($2_1 + 1 | 0) & 2047 | 0;
     $18_1 = ($7_1 + 784 | 0) + ((($2_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$57 : while (1) {
      $15_1 = ($8_1 | 0) > (45 | 0) ? 9 : 1;
      label$58 : {
       label$59 : while (1) {
        $11_1 = $14_1;
        $1_1 = 0;
        label$60 : {
         label$61 : {
          label$62 : while (1) {
           $14_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($14_1 | 0) == ($2_1 | 0)) {
            break label$61
           }
           $14_1 = HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0;
           $13_1 = HEAP32[(($1_1 << 2 | 0) + 92608 | 0) >> 2] | 0;
           if ($14_1 >>> 0 < $13_1 >>> 0) {
            break label$61
           }
           if ($14_1 >>> 0 > $13_1 >>> 0) {
            break label$60
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$62
           }
           break label$62;
          };
         }
         if (($8_1 | 0) != (36 | 0)) {
          break label$60
         }
         i64toi32_i32$3 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$3;
         label$63 : while (1) {
          label$64 : {
           $14_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($14_1 | 0) != ($2_1 | 0)) {
            break label$64
           }
           $2_1 = ($2_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($2_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = $20$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$1 = 0;
          i64toi32_i32$0 = 1075633366;
          $99($7_1 + 768 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 1342177280 | 0, i64toi32_i32$0 | 0);
          $95($7_1 + 752 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$0 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 772 | 0) >> 2] | 0;
          $742 = i64toi32_i32$0;
          $742$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 768 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $746 = i64toi32_i32$1;
          $746$hi = i64toi32_i32$0;
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$0 = HEAP32[($7_1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 756 | 0) >> 2] | 0;
          $748 = i64toi32_i32$0;
          $748$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 752 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $752 = i64toi32_i32$1;
          $752$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $742$hi;
          i64toi32_i32$1 = $746$hi;
          i64toi32_i32$5 = $748$hi;
          i64toi32_i32$3 = $752$hi;
          $87($7_1 + 736 | 0 | 0, $742 | 0, i64toi32_i32$0 | 0, $746 | 0, i64toi32_i32$1 | 0, $748 | 0, i64toi32_i32$5 | 0, $752 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$1 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $20_1 = i64toi32_i32$3;
          $20$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7_1 + 740 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$5;
          $19$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label$63
          }
          break label$63;
         };
         $94($7_1 + 720 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$3 = $20$hi;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$3 = HEAP32[($7_1 + 720 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 724 | 0) >> 2] | 0;
         $771 = i64toi32_i32$3;
         $771$hi = i64toi32_i32$5;
         i64toi32_i32$1 = ($7_1 + 720 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $775 = i64toi32_i32$5;
         $775$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$5 = $20$hi;
         i64toi32_i32$1 = $771$hi;
         i64toi32_i32$0 = $775$hi;
         $99($7_1 + 704 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $771 | 0, i64toi32_i32$1 | 0, $775 | 0, i64toi32_i32$0 | 0);
         i64toi32_i32$5 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
         $20_1 = i64toi32_i32$0;
         $20$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $7_1;
         i64toi32_i32$1 = HEAP32[($7_1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($7_1 + 708 | 0) >> 2] | 0;
         $21_1 = i64toi32_i32$1;
         $21$hi = i64toi32_i32$0;
         $13_1 = $12_1 + 113 | 0;
         $1_1 = $13_1 - $4_1 | 0;
         $8_1 = ($1_1 | 0) < ($3_1 | 0);
         $14_1 = $8_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if (($14_1 | 0) <= (112 | 0)) {
          break label$58
         }
         i64toi32_i32$0 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $24_1 = 0;
         $24$hi = i64toi32_i32$0;
         break label$55;
        }
        $12_1 = $15_1 + $12_1 | 0;
        $14_1 = $2_1;
        if (($11_1 | 0) == ($2_1 | 0)) {
         continue label$59
        }
        break label$59;
       };
       $16_1 = 1e9 >>> $15_1 | 0;
       $17_1 = (-1 << $15_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $14_1 = $11_1;
       label$65 : while (1) {
        $13_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
        $817 = $13_1;
        $13_1 = HEAP32[$13_1 >> 2] | 0;
        $1_1 = ($13_1 >>> $15_1 | 0) + $1_1 | 0;
        HEAP32[$817 >> 2] = $1_1;
        $1_1 = ($11_1 | 0) == ($14_1 | 0) & !$1_1 | 0;
        $14_1 = $1_1 ? ($14_1 + 1 | 0) & 2047 | 0 : $14_1;
        $8_1 = $1_1 ? $8_1 + -9 | 0 : $8_1;
        $1_1 = Math_imul($13_1 & $17_1 | 0, $16_1);
        $11_1 = ($11_1 + 1 | 0) & 2047 | 0;
        if (($11_1 | 0) != ($2_1 | 0)) {
         continue label$65
        }
        break label$65;
       };
       if (!$1_1) {
        continue label$57
       }
       label$66 : {
        if (($6_1 | 0) == ($14_1 | 0)) {
         break label$66
        }
        HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $1_1;
        $2_1 = $6_1;
        continue label$56;
       }
       HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] | 0 | 1 | 0;
       $14_1 = $6_1;
       continue label$57;
      }
      break label$57;
     };
     break label$56;
    };
    $92($7_1 + 656 | 0 | 0, +(+$114(+(1.0), 225 - $14_1 | 0 | 0)));
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$0 = HEAP32[($7_1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 660 | 0) >> 2] | 0;
    $879 = i64toi32_i32$0;
    $879$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 656 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $883 = i64toi32_i32$1;
    $883$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$0 = $20$hi;
    i64toi32_i32$0 = $879$hi;
    i64toi32_i32$1 = $883$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    $66($7_1 + 688 | 0 | 0, $879 | 0, i64toi32_i32$0 | 0, $883 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($7_1 + 688 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$3;
    $24$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 692 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$5;
    $23$hi = i64toi32_i32$3;
    $92($7_1 + 640 | 0 | 0, +(+$114(+(1.0), 113 - $14_1 | 0 | 0)));
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 640 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 644 | 0) >> 2] | 0;
    $902 = i64toi32_i32$3;
    $902$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 640 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $906 = i64toi32_i32$5;
    $906$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = $902$hi;
    i64toi32_i32$0 = $906$hi;
    $112($7_1 + 672 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $902 | 0, i64toi32_i32$1 | 0, $906 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$0 = i64toi32_i32$5;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$0 = HEAP32[($7_1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 676 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$0;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 672 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $22$hi;
    $101($7_1 + 624 | 0 | 0, $21_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$5 | 0, $22_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $24$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 624 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 628 | 0) >> 2] | 0;
    $924 = i64toi32_i32$3;
    $924$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 624 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $928 = i64toi32_i32$5;
    $928$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $24$hi;
    i64toi32_i32$1 = $924$hi;
    i64toi32_i32$0 = $928$hi;
    $87($7_1 + 608 | 0 | 0, $23_1 | 0, i64toi32_i32$3 | 0, $24_1 | 0, i64toi32_i32$5 | 0, $924 | 0, i64toi32_i32$1 | 0, $928 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$5 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$0;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7_1 + 612 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$0;
   }
   label$67 : {
    $15_1 = ($11_1 + 4 | 0) & 2047 | 0;
    if (($15_1 | 0) == ($2_1 | 0)) {
     break label$67
    }
    label$68 : {
     label$69 : {
      $15_1 = HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0;
      if ($15_1 >>> 0 > 499999999 >>> 0) {
       break label$69
      }
      label$70 : {
       if ($15_1) {
        break label$70
       }
       if ((($11_1 + 5 | 0) & 2047 | 0 | 0) == ($2_1 | 0)) {
        break label$68
       }
      }
      $92($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$0 = HEAP32[($7_1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 500 | 0) >> 2] | 0;
      $965 = i64toi32_i32$0;
      $965$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 496 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $969 = i64toi32_i32$1;
      $969$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $965$hi;
      i64toi32_i32$3 = $969$hi;
      $87($7_1 + 480 | 0 | 0, $19_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $965 | 0, i64toi32_i32$5 | 0, $969 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 484 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$68;
     }
     label$71 : {
      if (($15_1 | 0) == (5e8 | 0)) {
       break label$71
      }
      $92($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$3 = HEAP32[($7_1 + 592 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 596 | 0) >> 2] | 0;
      $988 = i64toi32_i32$3;
      $988$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($7_1 + 592 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $992 = i64toi32_i32$5;
      $992$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$1 = $988$hi;
      i64toi32_i32$0 = $992$hi;
      $87($7_1 + 576 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $988 | 0, i64toi32_i32$1 | 0, $992 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$5 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$0;
      $22$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$1 = HEAP32[($7_1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($7_1 + 580 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$0;
      break label$68;
     }
     $25_1 = +($5_1 | 0);
     label$72 : {
      if ((($11_1 + 5 | 0) & 2047 | 0 | 0) != ($2_1 | 0)) {
       break label$72
      }
      $92($7_1 + 528 | 0 | 0, +($25_1 * .5));
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$0 = HEAP32[($7_1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 532 | 0) >> 2] | 0;
      $1015 = i64toi32_i32$0;
      $1015$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 528 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1019 = i64toi32_i32$1;
      $1019$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $1015$hi;
      i64toi32_i32$3 = $1019$hi;
      $87($7_1 + 512 | 0 | 0, $19_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $1015 | 0, i64toi32_i32$5 | 0, $1019 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 516 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$68;
     }
     $92($7_1 + 560 | 0 | 0, +($25_1 * .75));
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = HEAP32[($7_1 + 560 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 564 | 0) >> 2] | 0;
     $1035 = i64toi32_i32$3;
     $1035$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($7_1 + 560 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $1039 = i64toi32_i32$5;
     $1039$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $1035$hi;
     i64toi32_i32$0 = $1039$hi;
     $87($7_1 + 544 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $1035 | 0, i64toi32_i32$1 | 0, $1039 | 0, i64toi32_i32$0 | 0);
     i64toi32_i32$5 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$0;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($7_1 + 548 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$0;
    }
    if (($14_1 | 0) > (111 | 0)) {
     break label$67
    }
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$0 = $22$hi;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $112($7_1 + 464 | 0 | 0, $19_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 464 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 468 | 0) >> 2] | 0;
    $1053 = i64toi32_i32$3;
    $1053$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 464 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1057 = i64toi32_i32$5;
    $1057$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1053$hi;
    i64toi32_i32$5 = $1057$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    if ($89($1053 | 0, i64toi32_i32$3 | 0, $1057 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0) {
     break label$67
    }
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$0 = $22$hi;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $87($7_1 + 448 | 0 | 0, $19_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($7_1 + 448 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$3;
    $22$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$0 = $22$hi;
   $87($7_1 + 432 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $22_1 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$0 = HEAP32[($7_1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 436 | 0) >> 2] | 0;
   $1078 = i64toi32_i32$0;
   $1078$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ($7_1 + 432 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $1082 = i64toi32_i32$1;
   $1082$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$0 = $24$hi;
   i64toi32_i32$0 = $1078$hi;
   i64toi32_i32$1 = $1082$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$3 = $24$hi;
   $101($7_1 + 416 | 0 | 0, $1078 | 0, i64toi32_i32$0 | 0, $1082 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$5 | 0, $24_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$3;
   $20$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 420 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$3;
   label$73 : {
    if (($13_1 & 2147483647 | 0 | 0) <= (-2 - $9_1 | 0 | 0)) {
     break label$73
    }
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    $68($7_1 + 400 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 1073610752;
    $99($7_1 + 384 | 0 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$0 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$0;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$3 = ($7_1 + 400 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$1;
    $24$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $23$hi;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1081081856;
    $2_1 = $90($23_1 | 0, i64toi32_i32$0 | 0, $24_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = ($7_1 + 384 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1117 = i64toi32_i32$5;
    $1117$hi = i64toi32_i32$3;
    $13_1 = ($2_1 | 0) < (0 | 0);
    i64toi32_i32$4 = $13_1;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$5 = $1117$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? $20_1 : $1117;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
    $20_1 = i64toi32_i32$0;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1124 = i64toi32_i32$1;
    $1124$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $13_1;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$1 = $1124$hi;
    i64toi32_i32$5 = i64toi32_i32$3 ? $21_1 : $1124;
    i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$0 : i64toi32_i32$1;
    $21_1 = i64toi32_i32$5;
    $21$hi = i64toi32_i32$4;
    label$74 : {
     $12_1 = $12_1 + (($2_1 | 0) > (-1 | 0)) | 0;
     if (($12_1 + 110 | 0 | 0) > ($10_1 | 0)) {
      break label$74
     }
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 1081081856;
     if (((($90($23_1 | 0, i64toi32_i32$4 | 0, $24_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0 | 0) < (0 | 0) ? $8_1 : $8_1 & ($14_1 | 0) != ($1_1 | 0) | 0) | 0) != (1 | 0)) {
      break label$73
     }
     i64toi32_i32$1 = $19$hi;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$1 = $19$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 0;
     if (!($89($19_1 | 0, i64toi32_i32$1 | 0, $22_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0)) {
      break label$73
     }
    }
    HEAP32[($65() | 0) >> 2] = 68;
   }
   i64toi32_i32$4 = $21$hi;
   i64toi32_i32$4 = $20$hi;
   i64toi32_i32$4 = $21$hi;
   i64toi32_i32$5 = $20$hi;
   $67($7_1 + 368 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0);
   i64toi32_i32$3 = ($7_1 + 368 | 0) + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$4;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$4 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$4;
   $20$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $20_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $7_1 + 8976 | 0;
 }
 
 function $72($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $3_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $85$hi = 0, $87_1 = 0, $87$hi = 0, $136$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $2_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $2_1 = $63($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    switch ($2_1 + -43 | 0 | 0) {
    default:
     $3_1 = $2_1 + -48 | 0;
     $4_1 = 0;
     break label$3;
    case 0:
    case 2:
     break label$4;
    };
   }
   label$6 : {
    label$7 : {
     $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
     $5_1 = HEAPU8[$5_1 >> 0] | 0;
     break label$6;
    }
    $5_1 = $63($0_1 | 0) | 0;
   }
   $4_1 = ($2_1 | 0) == (45 | 0);
   label$8 : {
    $3_1 = $5_1 + -48 | 0;
    if ($3_1 >>> 0 < 10 >>> 0) {
     break label$8
    }
    if (!$1_1) {
     break label$8
    }
    if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   $2_1 = $5_1;
  }
  label$9 : {
   label$10 : {
    if ($3_1 >>> 0 >= 10 >>> 0) {
     break label$10
    }
    $5_1 = 0;
    label$11 : while (1) {
     $5_1 = $2_1 + Math_imul($5_1, 10) | 0;
     label$12 : {
      label$13 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$12;
      }
      $2_1 = $63($0_1 | 0) | 0;
     }
     $5_1 = $5_1 + -48 | 0;
     label$14 : {
      $3_1 = $2_1 + -48 | 0;
      if ($3_1 >>> 0 > 9 >>> 0) {
       break label$14
      }
      if (($5_1 | 0) < (214748364 | 0)) {
       continue label$11
      }
     }
     break label$11;
    };
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    label$15 : {
     if ($3_1 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$0 = 0;
      $85$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $87_1 = i64toi32_i32$1;
      $87$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $85$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $87$hi;
      i64toi32_i32$3 = $87_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$18
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$17;
       }
       $2_1 = $63($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $3_1 = $2_1 + -48 | 0;
      if ($3_1 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($3_1 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$21;
       }
       $2_1 = $63($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$23
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    $136$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$5;
    break label$9;
   }
   i64toi32_i32$5 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$5;
   if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $73($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $9$hi = 0, i64toi32_i32$1 = 0, $9_1 = 0, $7_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $11_1 = 0, $12$hi = 0, $6_1 = 0, $12_1 = 0, $4_1 = 0, $8_1 = 0, $29_1 = 0, $30_1 = 0, $185 = 0, $185$hi = 0, $243 = 0, $243$hi = 0, $410$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if ($1_1 >>> 0 > 36 >>> 0) {
          break label$7
         }
         label$8 : while (1) {
          label$9 : {
           label$10 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$10
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$9;
           }
           $5_1 = $63($0_1 | 0) | 0;
          }
          if ($61($5_1 | 0) | 0) {
           continue label$8
          }
          break label$8;
         };
         $6_1 = 0;
         label$11 : {
          label$12 : {
           switch ($5_1 + -43 | 0 | 0) {
           case 0:
           case 2:
            break label$12;
           default:
            break label$11;
           };
          }
          $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
          label$13 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$13
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$11;
          }
          $5_1 = $63($0_1 | 0) | 0;
         }
         label$14 : {
          label$15 : {
           if ($1_1 & -17 | 0) {
            break label$15
           }
           if (($5_1 | 0) != (48 | 0)) {
            break label$15
           }
           label$16 : {
            label$17 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$17
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$16;
            }
            $5_1 = $63($0_1 | 0) | 0;
           }
           label$18 : {
            if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
             break label$18
            }
            label$19 : {
             label$20 : {
              $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$20
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
              $5_1 = HEAPU8[$5_1 >> 0] | 0;
              break label$19;
             }
             $5_1 = $63($0_1 | 0) | 0;
            }
            $1_1 = 16;
            if ((HEAPU8[($5_1 + 92689 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
             break label$5
            }
            label$21 : {
             if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
              break label$21
             }
             i64toi32_i32$0 = 0;
             $3_1 = 0;
             $3$hi = i64toi32_i32$0;
             if ($2_1) {
              break label$1
             }
             break label$2;
            }
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
            if (!$2_1) {
             break label$2
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
            i64toi32_i32$0 = 0;
            $3_1 = 0;
            $3$hi = i64toi32_i32$0;
            break label$1;
           }
           if ($1_1) {
            break label$14
           }
           $1_1 = 8;
           break label$5;
          }
          $1_1 = $1_1 ? $1_1 : 10;
          if ($1_1 >>> 0 > (HEAPU8[($5_1 + 92689 | 0) >> 0] | 0) >>> 0) {
           break label$14
          }
          label$22 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$22
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          i64toi32_i32$0 = 0;
          $3_1 = 0;
          $3$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $62($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          HEAP32[($65() | 0) >> 2] = 28;
          break label$1;
         }
         if (($1_1 | 0) != (10 | 0)) {
          break label$5
         }
         i64toi32_i32$0 = 0;
         $9_1 = 0;
         $9$hi = i64toi32_i32$0;
         label$23 : {
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$23
          }
          $1_1 = 0;
          label$24 : while (1) {
           $1_1 = Math_imul($1_1, 10);
           label$25 : {
            label$26 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$26
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$25;
            }
            $5_1 = $63($0_1 | 0) | 0;
           }
           $1_1 = $1_1 + $2_1 | 0;
           label$27 : {
            $2_1 = $5_1 + -48 | 0;
            if ($2_1 >>> 0 > 9 >>> 0) {
             break label$27
            }
            if ($1_1 >>> 0 < 429496729 >>> 0) {
             continue label$24
            }
           }
           break label$24;
          };
          i64toi32_i32$0 = 0;
          $9_1 = $1_1;
          $9$hi = i64toi32_i32$0;
         }
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$6
         }
         i64toi32_i32$0 = $9$hi;
         i64toi32_i32$1 = 0;
         i64toi32_i32$1 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $10_1 = i64toi32_i32$1;
         $10$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $11_1 = $2_1;
         $11$hi = i64toi32_i32$0;
         label$28 : while (1) {
          label$29 : {
           label$30 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$30
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$29;
           }
           $5_1 = $63($0_1 | 0) | 0;
          }
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$0 = $11$hi;
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$2 = $10_1;
          i64toi32_i32$1 = $11$hi;
          i64toi32_i32$3 = $11_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $9_1 = i64toi32_i32$4;
          $9$hi = i64toi32_i32$5;
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$6
          }
          i64toi32_i32$5 = $9$hi;
          i64toi32_i32$0 = $9_1;
          i64toi32_i32$2 = 429496729;
          i64toi32_i32$3 = -1717986918;
          if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break label$6
          }
          i64toi32_i32$0 = $9$hi;
          i64toi32_i32$5 = 0;
          i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $10_1 = i64toi32_i32$5;
          $10$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $11_1 = $2_1;
          $11$hi = i64toi32_i32$0;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$5 = -1;
          i64toi32_i32$2 = -1;
          i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
          $185 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
          $185$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$0 = $10_1;
          i64toi32_i32$3 = $185$hi;
          i64toi32_i32$2 = $185;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
           continue label$28
          }
          break label$28;
         };
         $1_1 = 10;
         break label$4;
        }
        HEAP32[($65() | 0) >> 2] = 28;
        i64toi32_i32$0 = 0;
        $3_1 = 0;
        $3$hi = i64toi32_i32$0;
        break label$1;
       }
       $1_1 = 10;
       if ($2_1 >>> 0 <= 9 >>> 0) {
        break label$4
       }
       break label$3;
      }
      label$31 : {
       if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
        break label$31
       }
       i64toi32_i32$0 = 0;
       $9_1 = 0;
       $9$hi = i64toi32_i32$0;
       label$32 : {
        $7_1 = HEAPU8[($5_1 + 92689 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $7_1 >>> 0) {
         break label$32
        }
        $2_1 = 0;
        label$33 : while (1) {
         $2_1 = Math_imul($2_1, $1_1);
         label$34 : {
          label$35 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$35
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$34;
          }
          $5_1 = $63($0_1 | 0) | 0;
         }
         $2_1 = $7_1 + $2_1 | 0;
         label$36 : {
          $7_1 = HEAPU8[($5_1 + 92689 | 0) >> 0] | 0;
          if ($1_1 >>> 0 <= $7_1 >>> 0) {
           break label$36
          }
          if ($2_1 >>> 0 < 119304647 >>> 0) {
           continue label$33
          }
         }
         break label$33;
        };
        i64toi32_i32$0 = 0;
        $9_1 = $2_1;
        $9$hi = i64toi32_i32$0;
       }
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break label$4
       }
       i64toi32_i32$0 = 0;
       $10_1 = $1_1;
       $10$hi = i64toi32_i32$0;
       label$37 : while (1) {
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $11_1 = i64toi32_i32$5;
        $11$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 255;
        i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
        $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $12$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
        $243 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $243$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$5 = $11_1;
        i64toi32_i32$0 = $243$hi;
        i64toi32_i32$3 = $243;
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$4
        }
        label$38 : {
         label$39 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$39
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$38;
         }
         $5_1 = $63($0_1 | 0) | 0;
        }
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$2 = $12$hi;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $9_1 = i64toi32_i32$1;
        $9$hi = i64toi32_i32$4;
        $7_1 = HEAPU8[($5_1 + 92689 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $7_1 >>> 0) {
         break label$4
        }
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$4 = $9$hi;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$0 = 0;
        $100($4_1 | 0, $10_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, $9_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 0;
        if ((i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$4
        }
        continue label$37;
       };
      }
      $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 92945 | 0) >> 0] | 0;
      i64toi32_i32$3 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$3;
      label$40 : {
       $2_1 = HEAPU8[($5_1 + 92689 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$40
       }
       $7_1 = 0;
       label$41 : while (1) {
        $7_1 = $7_1 << $8_1 | 0;
        label$42 : {
         label$43 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$43
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$42;
         }
         $5_1 = $63($0_1 | 0) | 0;
        }
        $7_1 = $2_1 | $7_1 | 0;
        label$44 : {
         $2_1 = HEAPU8[($5_1 + 92689 | 0) >> 0] | 0;
         if ($1_1 >>> 0 <= $2_1 >>> 0) {
          break label$44
         }
         if ($7_1 >>> 0 < 134217728 >>> 0) {
          continue label$41
         }
        }
        break label$41;
       };
       i64toi32_i32$3 = 0;
       $9_1 = $7_1;
       $9$hi = i64toi32_i32$3;
      }
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$4
      }
      i64toi32_i32$3 = 0;
      $11_1 = $8_1;
      $11$hi = i64toi32_i32$3;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$0 = $11_1;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $29_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       $29_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $12_1 = $29_1;
      $12$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$4 = $9$hi;
      i64toi32_i32$0 = $9_1;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
       break label$4
      }
      label$45 : while (1) {
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$4 = $11_1;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
        $30_1 = 0;
       } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
        $30_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       }
       $9_1 = $30_1;
       $9$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 255;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $10_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $10$hi = i64toi32_i32$0;
       label$46 : {
        label$47 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$47
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$46;
        }
        $5_1 = $63($0_1 | 0) | 0;
       }
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$5 = $9_1;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$4 = $10_1;
       i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
       $9_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
       $9$hi = i64toi32_i32$3;
       $2_1 = HEAPU8[($5_1 + 92689 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$4
       }
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $12$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$4 = $12_1;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
        continue label$45
       }
       break label$45;
      };
     }
     if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 92689 | 0) >> 0] | 0) >>> 0) {
      break label$3
     }
     label$48 : while (1) {
      label$49 : {
       label$50 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$50
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$49;
       }
       $5_1 = $63($0_1 | 0) | 0;
      }
      if ($1_1 >>> 0 > (HEAPU8[($5_1 + 92689 | 0) >> 0] | 0) >>> 0) {
       continue label$48
      }
      break label$48;
     };
     HEAP32[($65() | 0) >> 2] = 68;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$3 | 0) ? $6_1 : 0;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$0;
     $9_1 = i64toi32_i32$4;
     $9$hi = i64toi32_i32$0;
    }
    label$51 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$51
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    label$52 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$52
     }
     label$53 : {
      i64toi32_i32$0 = $3$hi;
      if ($3_1 & 1 | 0) {
       break label$53
      }
      if ($6_1) {
       break label$53
      }
      HEAP32[($65() | 0) >> 2] = 68;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $3_1 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     if ($9$hi >>> 0 < i64toi32_i32$5 >>> 0 | (($9$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$52
     }
     HEAP32[($65() | 0) >> 2] = 68;
     break label$1;
    }
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $410$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $410$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$2 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $3_1 = 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $62($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $74() {
  return 93164 | 0;
 }
 
 function $75($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $3_1 ? $3_1 : 97324;
  $3_1 = HEAP32[$5_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      if ($3_1) {
       break label$3
      }
      $6_1 = 0;
      break label$1;
     }
     $6_1 = -2;
     if (!$2_1) {
      break label$1
     }
     $7_1 = $0_1 ? $0_1 : $4_1 + 12 | 0;
     label$5 : {
      label$6 : {
       if (!$3_1) {
        break label$6
       }
       $0_1 = $2_1;
       break label$5;
      }
      label$7 : {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       $0_1 = ($3_1 << 24 | 0) >> 24 | 0;
       if (($0_1 | 0) < (0 | 0)) {
        break label$7
       }
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = ($0_1 | 0) != (0 | 0);
       break label$1;
      }
      $3_1 = HEAP32[(HEAP32[(($74() | 0) + 168 | 0) >> 2] | 0) >> 2] | 0;
      $0_1 = HEAP8[$1_1 >> 0] | 0;
      label$8 : {
       if ($3_1) {
        break label$8
       }
       HEAP32[$7_1 >> 2] = $0_1 & 57343 | 0;
       $6_1 = 1;
       break label$1;
      }
      $3_1 = ($0_1 & 255 | 0) + -194 | 0;
      if ($3_1 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $3_1 = HEAP32[(92960 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
      $0_1 = $2_1 + -1 | 0;
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $8_1 = HEAPU8[$1_1 >> 0] | 0;
     $9_1 = $8_1 >>> 3 | 0;
     if (($9_1 + -16 | 0 | (($3_1 >> 26 | 0) + $9_1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     label$9 : while (1) {
      $0_1 = $0_1 + -1 | 0;
      label$10 : {
       $3_1 = ($8_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$10
       }
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = $2_1 - $0_1 | 0;
       break label$1;
      }
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
      $8_1 = HEAPU8[$1_1 >> 0] | 0;
      if (($8_1 & 192 | 0 | 0) == (128 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[($65() | 0) >> 2] = 25;
    $6_1 = -1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $76($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $77($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $8_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $14_1 = 0, $3_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $18$hi = 0, $19$hi = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, $20$hi = 0, $9_1 = 0, $17_1 = 0, $4_1 = 0, $15_1 = 0, $20_1 = 0, i64toi32_i32$6 = 0, $5_1 = 0, $59_1 = 0, $7_1 = 0, $71$hi = 0, $73$hi = 0, $78_1 = 0, $78$hi = 0, $178 = 0, $188 = 0, $250$hi = 0, $252$hi = 0, $257 = 0, $257$hi = 0, $299 = 0, $299$hi = 0, $305 = 0, $305$hi = 0, $306$hi = 0, $412 = 0, $412$hi = 0, $418 = 0, $418$hi = 0, $419$hi = 0, $623 = 0, $623$hi = 0, $628 = 0, $628$hi = 0, $656$hi = 0, $658$hi = 0, $664 = 0, $664$hi = 0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $119($0_1 | 0) | 0;
  }
  label$2 : {
   $6_1 = HEAPU8[$1_1 >> 0] | 0;
   if (!$6_1) {
    break label$2
   }
   i64toi32_i32$0 = 0;
   $18_1 = 0;
   $18$hi = i64toi32_i32$0;
   $7_1 = $3_1 + 16 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : while (1) {
         label$9 : {
          label$10 : {
           if (!($61($6_1 & 255 | 0 | 0) | 0)) {
            break label$10
           }
           label$11 : while (1) {
            $6_1 = $1_1;
            $1_1 = $1_1 + 1 | 0;
            if ($61(HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
             continue label$11
            }
            break label$11;
           };
           i64toi32_i32$0 = 0;
           $62($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
           label$12 : while (1) {
            label$13 : {
             label$14 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$14
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
              $1_1 = HEAPU8[$1_1 >> 0] | 0;
              break label$13;
             }
             $1_1 = $63($0_1 | 0) | 0;
            }
            if ($61($1_1 | 0) | 0) {
             continue label$12
            }
            break label$12;
           };
           $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           label$15 : {
            if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
             break label$15
            }
            $1_1 = $1_1 + -1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
           }
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
           $71$hi = i64toi32_i32$1;
           i64toi32_i32$1 = $18$hi;
           i64toi32_i32$1 = $71$hi;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = $18$hi;
           i64toi32_i32$3 = $18_1;
           i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
           i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
           if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
           }
           $73$hi = i64toi32_i32$5;
           i64toi32_i32$2 = $1_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
           i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
           $78_1 = i64toi32_i32$2;
           $78$hi = i64toi32_i32$5;
           i64toi32_i32$5 = $73$hi;
           i64toi32_i32$1 = i64toi32_i32$4;
           i64toi32_i32$2 = $78$hi;
           i64toi32_i32$3 = $78_1;
           i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           $18_1 = i64toi32_i32$0;
           $18$hi = i64toi32_i32$4;
           break label$9;
          }
          label$16 : {
           label$17 : {
            label$18 : {
             label$19 : {
              $6_1 = HEAPU8[$1_1 >> 0] | 0;
              if (($6_1 | 0) != (37 | 0)) {
               break label$19
              }
              $8_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
              if (($8_1 | 0) == (42 | 0)) {
               break label$18
              }
              if (($8_1 | 0) != (37 | 0)) {
               break label$17
              }
             }
             i64toi32_i32$4 = 0;
             $62($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
             $6_1 = $1_1 + (($6_1 | 0) == (37 | 0)) | 0;
             label$20 : {
              label$21 : {
               $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
               if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                break label$21
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
               $1_1 = HEAPU8[$1_1 >> 0] | 0;
               break label$20;
              }
              $1_1 = $63($0_1 | 0) | 0;
             }
             label$22 : {
              if (($1_1 | 0) == (HEAPU8[$6_1 >> 0] | 0 | 0)) {
               break label$22
              }
              label$23 : {
               if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
                break label$23
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
              }
              if (($1_1 | 0) > (-1 | 0)) {
               break label$2
              }
              $9_1 = 0;
              if ($4_1) {
               break label$2
              }
              break label$4;
             }
             i64toi32_i32$4 = $18$hi;
             i64toi32_i32$5 = $18_1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 1;
             i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
             i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
             }
             $18_1 = i64toi32_i32$2;
             $18$hi = i64toi32_i32$0;
             break label$9;
            }
            $6_1 = $1_1 + 2 | 0;
            $10_1 = 0;
            break label$16;
           }
           label$24 : {
            if (!($64($8_1 | 0) | 0)) {
             break label$24
            }
            if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
             break label$24
            }
            $6_1 = $1_1 + 3 | 0;
            $10_1 = $78($2_1 | 0, (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0 | 0) | 0;
            break label$16;
           }
           $6_1 = $1_1 + 1 | 0;
           $10_1 = HEAP32[$2_1 >> 2] | 0;
           $2_1 = $2_1 + 4 | 0;
          }
          $9_1 = 0;
          $1_1 = 0;
          label$25 : {
           if (!($64(HEAPU8[$6_1 >> 0] | 0 | 0) | 0)) {
            break label$25
           }
           label$26 : while (1) {
            $1_1 = (Math_imul($1_1, 10) + (HEAPU8[$6_1 >> 0] | 0) | 0) + -48 | 0;
            $8_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
            $6_1 = $6_1 + 1 | 0;
            if ($64($8_1 | 0) | 0) {
             continue label$26
            }
            break label$26;
           };
          }
          label$27 : {
           label$28 : {
            $11_1 = HEAPU8[$6_1 >> 0] | 0;
            if (($11_1 | 0) == (109 | 0)) {
             break label$28
            }
            $8_1 = $6_1;
            break label$27;
           }
           $8_1 = $6_1 + 1 | 0;
           $12_1 = 0;
           $9_1 = ($10_1 | 0) != (0 | 0);
           $11_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
           $13_1 = 0;
          }
          $6_1 = $8_1 + 1 | 0;
          $14_1 = 3;
          label$29 : {
           label$30 : {
            switch (($11_1 & 255 | 0) + -65 | 0 | 0) {
            case 39:
             $178 = $8_1 + 2 | 0;
             $8_1 = (HEAPU8[($8_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
             $6_1 = $8_1 ? $178 : $6_1;
             $14_1 = $8_1 ? -2 : -1;
             break label$29;
            case 43:
             $188 = $8_1 + 2 | 0;
             $8_1 = (HEAPU8[($8_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
             $6_1 = $8_1 ? $188 : $6_1;
             $14_1 = $8_1 ? 3 : 1;
             break label$29;
            case 51:
            case 57:
             $14_1 = 1;
             break label$29;
            case 11:
             $14_1 = 2;
             break label$29;
            case 41:
             break label$29;
            case 0:
            case 2:
            case 4:
            case 5:
            case 6:
            case 18:
            case 23:
            case 26:
            case 32:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 40:
            case 45:
            case 46:
            case 47:
            case 50:
            case 52:
            case 55:
             break label$30;
            default:
             break label$5;
            };
           }
           $14_1 = 0;
           $6_1 = $8_1;
          }
          $8_1 = HEAPU8[$6_1 >> 0] | 0;
          $11_1 = ($8_1 & 47 | 0 | 0) == (3 | 0);
          $15_1 = $11_1 ? 1 : $14_1;
          label$35 : {
           $16_1 = $11_1 ? $8_1 | 32 | 0 : $8_1;
           if (($16_1 | 0) == (91 | 0)) {
            break label$35
           }
           label$36 : {
            label$37 : {
             if (($16_1 | 0) == (110 | 0)) {
              break label$37
             }
             if (($16_1 | 0) != (99 | 0)) {
              break label$36
             }
             $1_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
             break label$35;
            }
            i64toi32_i32$0 = $18$hi;
            $79($10_1 | 0, $15_1 | 0, $18_1 | 0, i64toi32_i32$0 | 0);
            break label$9;
           }
           i64toi32_i32$0 = 0;
           $62($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
           label$38 : while (1) {
            label$39 : {
             label$40 : {
              $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$40
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
              $8_1 = HEAPU8[$8_1 >> 0] | 0;
              break label$39;
             }
             $8_1 = $63($0_1 | 0) | 0;
            }
            if ($61($8_1 | 0) | 0) {
             continue label$38
            }
            break label$38;
           };
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           label$41 : {
            if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
             break label$41
            }
            $8_1 = $8_1 + -1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $8_1;
           }
           i64toi32_i32$4 = $0_1;
           i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
           i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
           $250$hi = i64toi32_i32$5;
           i64toi32_i32$5 = $18$hi;
           i64toi32_i32$5 = $250$hi;
           i64toi32_i32$4 = i64toi32_i32$0;
           i64toi32_i32$0 = $18$hi;
           i64toi32_i32$3 = $18_1;
           i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
           i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
           }
           $252$hi = i64toi32_i32$2;
           i64toi32_i32$4 = $8_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
           i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
           $257 = i64toi32_i32$4;
           $257$hi = i64toi32_i32$2;
           i64toi32_i32$2 = $252$hi;
           i64toi32_i32$5 = i64toi32_i32$1;
           i64toi32_i32$4 = $257$hi;
           i64toi32_i32$3 = $257;
           i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
           i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
           if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
           }
           $18_1 = i64toi32_i32$0;
           $18$hi = i64toi32_i32$1;
          }
          i64toi32_i32$5 = $1_1;
          i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
          $19_1 = i64toi32_i32$5;
          $19$hi = i64toi32_i32$1;
          $62($0_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0);
          label$42 : {
           label$43 : {
            $14_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            $8_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
            if ($14_1 >>> 0 >= $8_1 >>> 0) {
             break label$43
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $14_1 + 1 | 0;
            break label$42;
           }
           if (($63($0_1 | 0) | 0 | 0) < (0 | 0)) {
            break label$5
           }
           $8_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
          }
          label$44 : {
           if (!$8_1) {
            break label$44
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          $8_1 = 16;
          label$45 : {
           label$46 : {
            label$47 : {
             label$48 : {
              label$49 : {
               label$50 : {
                label$51 : {
                 switch ($16_1 + -88 | 0 | 0) {
                 default:
                  $1_1 = $16_1 + -65 | 0;
                  if ($1_1 >>> 0 > 6 >>> 0) {
                   break label$45
                  }
                  if (!((1 << $1_1 | 0) & 113 | 0)) {
                   break label$45
                  }
                 case 9:
                 case 13:
                 case 14:
                 case 15:
                  $69($3_1 + 8 | 0 | 0, $0_1 | 0, $15_1 | 0, 0 | 0);
                  i64toi32_i32$2 = $0_1;
                  i64toi32_i32$1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                  $299 = i64toi32_i32$1;
                  $299$hi = i64toi32_i32$5;
                  i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
                  i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
                  $305 = i64toi32_i32$1;
                  $305$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$1 = $305$hi;
                  i64toi32_i32$3 = $305;
                  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
                  i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
                  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
                  i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
                  $306$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $299$hi;
                  i64toi32_i32$5 = $299;
                  i64toi32_i32$2 = $306$hi;
                  i64toi32_i32$3 = i64toi32_i32$4;
                  if ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
                   break label$3
                  }
                  if (!$10_1) {
                   break label$45
                  }
                  i64toi32_i32$3 = $7_1;
                  i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                  $19_1 = i64toi32_i32$5;
                  $19$hi = i64toi32_i32$0;
                  i64toi32_i32$3 = $3_1;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
                  $20_1 = i64toi32_i32$0;
                  $20$hi = i64toi32_i32$5;
                  switch ($15_1 | 0) {
                  case 2:
                   break label$47;
                  case 1:
                   break label$48;
                  case 0:
                   break label$49;
                  default:
                   break label$45;
                  };
                 case 3:
                 case 11:
                 case 27:
                  label$57 : {
                   if (($16_1 & 239 | 0 | 0) != (99 | 0)) {
                    break label$57
                   }
                   $117($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                   HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                   if (($16_1 | 0) != (115 | 0)) {
                    break label$46
                   }
                   HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                   HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                   $59_1 = 0;
                   HEAP16[($3_1 + 42 | 0) >> 1] = $59_1;
                   HEAP16[($3_1 + 44 | 0) >> 1] = $59_1 >>> 16 | 0;
                   break label$46;
                  }
                  $14_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                  $8_1 = ($14_1 | 0) == (94 | 0);
                  $117($3_1 + 32 | 0 | 0, $8_1 | 0, 257 | 0) | 0;
                  HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                  $11_1 = $8_1 ? $6_1 + 2 | 0 : $6_1 + 1 | 0;
                  label$58 : {
                   label$59 : {
                    label$60 : {
                     label$61 : {
                      $6_1 = HEAPU8[($6_1 + ($8_1 ? 2 : 1) | 0) >> 0] | 0;
                      if (($6_1 | 0) == (45 | 0)) {
                       break label$61
                      }
                      if (($6_1 | 0) == (93 | 0)) {
                       break label$60
                      }
                      $14_1 = ($14_1 | 0) != (94 | 0);
                      $6_1 = $11_1;
                      break label$58;
                     }
                     $14_1 = ($14_1 | 0) != (94 | 0);
                     HEAP8[($3_1 + 78 | 0) >> 0] = $14_1;
                     break label$59;
                    }
                    $14_1 = ($14_1 | 0) != (94 | 0);
                    HEAP8[($3_1 + 126 | 0) >> 0] = $14_1;
                   }
                   $6_1 = $11_1 + 1 | 0;
                  }
                  label$62 : while (1) {
                   label$63 : {
                    label$64 : {
                     $8_1 = HEAPU8[$6_1 >> 0] | 0;
                     if (($8_1 | 0) == (45 | 0)) {
                      break label$64
                     }
                     if (!$8_1) {
                      break label$5
                     }
                     if (($8_1 | 0) != (93 | 0)) {
                      break label$63
                     }
                     break label$46;
                    }
                    $8_1 = 45;
                    $17_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                    if (!$17_1) {
                     break label$63
                    }
                    if (($17_1 | 0) == (93 | 0)) {
                     break label$63
                    }
                    $11_1 = $6_1 + 1 | 0;
                    label$65 : {
                     label$66 : {
                      $6_1 = HEAPU8[($6_1 + -1 | 0) >> 0] | 0;
                      if ($6_1 >>> 0 < $17_1 >>> 0) {
                       break label$66
                      }
                      $8_1 = $17_1;
                      break label$65;
                     }
                     label$67 : while (1) {
                      $6_1 = $6_1 + 1 | 0;
                      HEAP8[(($3_1 + 32 | 0) + $6_1 | 0) >> 0] = $14_1;
                      $8_1 = HEAPU8[$11_1 >> 0] | 0;
                      if ($6_1 >>> 0 < $8_1 >>> 0) {
                       continue label$67
                      }
                      break label$67;
                     };
                    }
                    $6_1 = $11_1;
                   }
                   HEAP8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $14_1;
                   $6_1 = $6_1 + 1 | 0;
                   continue label$62;
                  };
                 case 23:
                  $8_1 = 8;
                  break label$50;
                 case 12:
                 case 29:
                  $8_1 = 10;
                  break label$50;
                 case 1:
                 case 2:
                 case 4:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 10:
                 case 16:
                 case 18:
                 case 19:
                 case 20:
                 case 21:
                 case 22:
                 case 25:
                 case 26:
                 case 28:
                 case 30:
                 case 31:
                  break label$45;
                 case 0:
                 case 24:
                 case 32:
                  break label$50;
                 case 17:
                  break label$51;
                 };
                }
                $8_1 = 0;
               }
               i64toi32_i32$5 = -1;
               i64toi32_i32$5 = $73($0_1 | 0, $8_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$5 | 0) | 0;
               i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
               $19_1 = i64toi32_i32$5;
               $19$hi = i64toi32_i32$0;
               i64toi32_i32$3 = $0_1;
               i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
               i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
               $412 = i64toi32_i32$0;
               $412$hi = i64toi32_i32$5;
               i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
               i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
               $418 = i64toi32_i32$0;
               $418$hi = i64toi32_i32$5;
               i64toi32_i32$5 = 0;
               i64toi32_i32$3 = 0;
               i64toi32_i32$0 = $418$hi;
               i64toi32_i32$2 = $418;
               i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
               i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
               i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
               i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
               $419$hi = i64toi32_i32$4;
               i64toi32_i32$4 = $412$hi;
               i64toi32_i32$5 = $412;
               i64toi32_i32$3 = $419$hi;
               i64toi32_i32$2 = i64toi32_i32$1;
               if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0) {
                break label$3
               }
               label$68 : {
                if (($16_1 | 0) != (112 | 0)) {
                 break label$68
                }
                if (!$10_1) {
                 break label$68
                }
                i64toi32_i32$5 = $19$hi;
                HEAP32[$10_1 >> 2] = $19_1;
                break label$45;
               }
               i64toi32_i32$5 = $19$hi;
               $79($10_1 | 0, $15_1 | 0, $19_1 | 0, i64toi32_i32$5 | 0);
               break label$45;
              }
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$5 = $19$hi;
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$4 = $19$hi;
              HEAPF32[$10_1 >> 2] = Math_fround($103($20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$4 | 0));
              break label$45;
             }
             i64toi32_i32$4 = $20$hi;
             i64toi32_i32$4 = $19$hi;
             i64toi32_i32$4 = $20$hi;
             i64toi32_i32$5 = $19$hi;
             HEAPF64[$10_1 >> 3] = +$102($20_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$5 | 0);
             break label$45;
            }
            i64toi32_i32$5 = $20$hi;
            i64toi32_i32$4 = $10_1;
            HEAP32[i64toi32_i32$4 >> 2] = $20_1;
            HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
            i64toi32_i32$5 = $19$hi;
            HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $19_1;
            HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
            break label$45;
           }
           $11_1 = ($16_1 | 0) == (99 | 0);
           $14_1 = $11_1 ? $1_1 + 1 | 0 : 31;
           label$69 : {
            label$70 : {
             $17_1 = ($15_1 | 0) != (1 | 0);
             if ($17_1) {
              break label$70
             }
             $8_1 = $10_1;
             label$71 : {
              if (!$9_1) {
               break label$71
              }
              $8_1 = $104($14_1 << 2 | 0 | 0) | 0;
              if (!$8_1) {
               break label$6
              }
             }
             i64toi32_i32$4 = $3_1;
             i64toi32_i32$5 = 0;
             HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
             HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$5;
             $1_1 = 0;
             $12_1 = ($9_1 | 0) != (0 | 0);
             label$72 : while (1) {
              $13_1 = $8_1;
              label$73 : {
               label$74 : while (1) {
                label$75 : {
                 label$76 : {
                  $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                   break label$76
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
                  $8_1 = HEAPU8[$8_1 >> 0] | 0;
                  break label$75;
                 }
                 $8_1 = $63($0_1 | 0) | 0;
                }
                if (!(HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                 break label$73
                }
                HEAP8[($3_1 + 27 | 0) >> 0] = $8_1;
                $8_1 = $75($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
                if (($8_1 | 0) == (-2 | 0)) {
                 continue label$74
                }
                if (($8_1 | 0) == (-1 | 0)) {
                 break label$7
                }
                label$77 : {
                 if (!$13_1) {
                  break label$77
                 }
                 HEAP32[($13_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                 $1_1 = $1_1 + 1 | 0;
                }
                if (($12_1 & ($1_1 | 0) == ($14_1 | 0) | 0 | 0) != (1 | 0)) {
                 continue label$74
                }
                break label$74;
               };
               $14_1 = $14_1 << 1 | 0 | 1 | 0;
               $8_1 = $107($13_1 | 0, $14_1 << 2 | 0 | 0) | 0;
               if ($8_1) {
                continue label$72
               }
               break label$7;
              }
              break label$72;
             };
             if (!($76($3_1 + 296 | 0 | 0) | 0)) {
              break label$7
             }
             $12_1 = 0;
             break label$69;
            }
            label$78 : {
             if (!$9_1) {
              break label$78
             }
             $1_1 = 0;
             $8_1 = $104($14_1 | 0) | 0;
             if (!$8_1) {
              break label$6
             }
             label$79 : while (1) {
              $12_1 = $8_1;
              label$80 : while (1) {
               label$81 : {
                label$82 : {
                 $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                  break label$82
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
                 $8_1 = HEAPU8[$8_1 >> 0] | 0;
                 break label$81;
                }
                $8_1 = $63($0_1 | 0) | 0;
               }
               label$83 : {
                if (HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                 break label$83
                }
                $13_1 = 0;
                break label$69;
               }
               HEAP8[($12_1 + $1_1 | 0) >> 0] = $8_1;
               $1_1 = $1_1 + 1 | 0;
               if (($1_1 | 0) != ($14_1 | 0)) {
                continue label$80
               }
               break label$80;
              };
              $13_1 = 0;
              $14_1 = $14_1 << 1 | 0 | 1 | 0;
              $8_1 = $107($12_1 | 0, $14_1 | 0) | 0;
              if ($8_1) {
               continue label$79
              }
              break label$5;
             };
            }
            $1_1 = 0;
            label$84 : {
             if (!$10_1) {
              break label$84
             }
             label$85 : while (1) {
              label$86 : {
               label$87 : {
                $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                 break label$87
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
                $8_1 = HEAPU8[$8_1 >> 0] | 0;
                break label$86;
               }
               $8_1 = $63($0_1 | 0) | 0;
              }
              label$88 : {
               if (HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                break label$88
               }
               $13_1 = 0;
               $12_1 = $10_1;
               break label$69;
              }
              HEAP8[($10_1 + $1_1 | 0) >> 0] = $8_1;
              $1_1 = $1_1 + 1 | 0;
              continue label$85;
             };
            }
            label$89 : while (1) {
             label$90 : {
              label$91 : {
               $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
               if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                break label$91
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
               $1_1 = HEAPU8[$1_1 >> 0] | 0;
               break label$90;
              }
              $1_1 = $63($0_1 | 0) | 0;
             }
             if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
              continue label$89
             }
             break label$89;
            };
            $12_1 = 0;
            $13_1 = 0;
            $1_1 = 0;
           }
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           label$92 : {
            if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
             break label$92
            }
            $8_1 = $8_1 + -1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $8_1;
           }
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
           i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
           $623 = i64toi32_i32$5;
           $623$hi = i64toi32_i32$4;
           i64toi32_i32$5 = $8_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
           i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
           $628 = i64toi32_i32$5;
           $628$hi = i64toi32_i32$4;
           i64toi32_i32$4 = $623$hi;
           i64toi32_i32$2 = $623;
           i64toi32_i32$5 = $628$hi;
           i64toi32_i32$3 = $628;
           i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
           i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
           if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
           }
           $20_1 = i64toi32_i32$0;
           $20$hi = i64toi32_i32$1;
           if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
            break label$3
           }
           label$93 : {
            if (($16_1 | 0) != (99 | 0)) {
             break label$93
            }
            i64toi32_i32$1 = $20$hi;
            i64toi32_i32$1 = $19$hi;
            i64toi32_i32$1 = $20$hi;
            i64toi32_i32$4 = $20_1;
            i64toi32_i32$2 = $19$hi;
            i64toi32_i32$3 = $19_1;
            if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
             break label$3
            }
           }
           label$94 : {
            if (!$9_1) {
             break label$94
            }
            label$95 : {
             if ($17_1) {
              break label$95
             }
             HEAP32[$10_1 >> 2] = $13_1;
             break label$94;
            }
            HEAP32[$10_1 >> 2] = $12_1;
           }
           if ($11_1) {
            break label$45
           }
           label$96 : {
            if (!$13_1) {
             break label$96
            }
            HEAP32[($13_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
           }
           label$97 : {
            if ($12_1) {
             break label$97
            }
            $12_1 = 0;
            break label$45;
           }
           HEAP8[($12_1 + $1_1 | 0) >> 0] = 0;
          }
          i64toi32_i32$3 = $0_1;
          i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $656$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$1 = $656$hi;
          i64toi32_i32$3 = i64toi32_i32$4;
          i64toi32_i32$4 = $18$hi;
          i64toi32_i32$2 = $18_1;
          i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
          i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
          }
          $658$hi = i64toi32_i32$0;
          i64toi32_i32$3 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
          $664 = i64toi32_i32$3;
          $664$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $658$hi;
          i64toi32_i32$1 = i64toi32_i32$5;
          i64toi32_i32$3 = $664$hi;
          i64toi32_i32$2 = $664;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $18_1 = i64toi32_i32$4;
          $18$hi = i64toi32_i32$5;
          $4_1 = $4_1 + (($10_1 | 0) != (0 | 0)) | 0;
         }
         $1_1 = $6_1 + 1 | 0;
         $6_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
         if ($6_1) {
          continue label$8
         }
         break label$2;
        };
       }
       $12_1 = 0;
       break label$5;
      }
      $12_1 = 0;
      $13_1 = 0;
     }
     if ($4_1) {
      break label$3
     }
    }
    $4_1 = -1;
   }
   if (!$9_1) {
    break label$2
   }
   $105($12_1 | 0);
   $105($13_1 | 0);
  }
  label$98 : {
   if (!$5_1) {
    break label$98
   }
   $120($0_1 | 0);
  }
  global$0 = $3_1 + 304 | 0;
  return $4_1 | 0;
 }
 
 function $78($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $0_1 + ($1_1 >>> 0 > 1 >>> 0 ? ($1_1 << 2 | 0) + -4 | 0 : 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 + 4 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $79($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0_1 >> 0] = $2_1;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $80() {
  $85(97328 | 0);
  return 97336 | 0;
 }
 
 function $81() {
  $86(97328 | 0);
 }
 
 function $82($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $83($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($82($0_1 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $84($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1 >> 31 | 0;
  return ($0_1 + $1_1 | 0) ^ $1_1 | 0 | 0;
 }
 
 function $85($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $86($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $87($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $7_1 = 0, $5_1 = 0, $9$hi = 0, $9_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$6 = 0, $12$hi = 0, $8_1 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $12_1 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $21_1 = 0, $27_1 = 0, $28$hi = 0, $32_1 = 0, $39_1 = 0, $43_1 = 0, $44$hi = 0, $48_1 = 0, $53_1 = 0, $55_1 = 0, $63_1 = 0, $65_1 = 0, $73_1 = 0, $73$hi = 0, $79_1 = 0, $79$hi = 0, $83_1 = 0, $83$hi = 0, $93_1 = 0, $93$hi = 0, $121_1 = 0, $124_1 = 0, $151 = 0, $152 = 0, $152$hi = 0, $153 = 0, $153$hi = 0, $160$hi = 0, $163$hi = 0, $183 = 0, $184 = 0, $184$hi = 0, $185 = 0, $185$hi = 0, $192$hi = 0, $195$hi = 0, $208 = 0, $208$hi = 0, $210$hi = 0, $214 = 0, $214$hi = 0, $216$hi = 0, $242 = 0, $242$hi = 0, $244 = 0, $244$hi = 0, $248 = 0, $248$hi = 0, $250 = 0, $251$hi = 0, $269$hi = 0, $272 = 0, $273$hi = 0, $282 = 0, $283 = 0, $283$hi = 0, $284 = 0, $284$hi = 0, $291$hi = 0, $294$hi = 0, $309 = 0, $309$hi = 0, $315 = 0, $316$hi = 0, $322 = 0, $322$hi = 0, $324$hi = 0, $325 = 0, $325$hi = 0, $327 = 0, $327$hi = 0, $354 = 0, $354$hi = 0, $356 = 0, $356$hi = 0, $360 = 0, $360$hi = 0, $362 = 0, $363$hi = 0, $369 = 0, $369$hi = 0, $371$hi = 0, $375 = 0, $375$hi = 0, $378 = 0, $378$hi = 0, $379$hi = 0, $386 = 0, $386$hi = 0, $390$hi = 0, $394 = 0, $395$hi = 0, $400 = 0, $400$hi = 0, $408 = 0, $409$hi = 0, $411 = 0, $411$hi = 0, $417 = 0, $418$hi = 0, $422 = 0, $423$hi = 0, $426 = 0, $426$hi = 0, $432 = 0, $433$hi = 0, $437 = 0, $438$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     $21_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     $27_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $28$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$5 = $28$hi;
     i64toi32_i32$3 = $27_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = 2147418111;
     i64toi32_i32$3 = -1;
     $32_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $21_1 : $32_1) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     $39_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $43_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $44$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$3 = $44$hi;
     i64toi32_i32$5 = $43_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $10_1 = i64toi32_i32$3;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$5 = -1;
     $48_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = 2147418111;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $39_1 : $48_1) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$5 | 0);
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     $55_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $53_1 : $55_1) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $63_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$5 = 0;
     $65_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $63_1 : $65_1) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $73_1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $73$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $73$hi;
     i64toi32_i32$2 = $73_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $79_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $79$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $83_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $83$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $79$hi;
     i64toi32_i32$2 = $79_1;
     i64toi32_i32$5 = $83$hi;
     i64toi32_i32$4 = $83_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$5 ? 0 : $1_1;
     i64toi32_i32$1 = i64toi32_i32$5 ? i64toi32_i32$0 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$5 = $9_1;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $93_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
    $93$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$5 = $93$hi;
    i64toi32_i32$4 = $93_1;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $3_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$5 = $4_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $4$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    if (!!(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0)) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$5;
    break label$1;
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $1_1;
   $121_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$1 = $11_1;
   $124_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$5 = $11_1;
   $7_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $121_1 : $124_1;
   i64toi32_i32$0 = $7_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$2 = i64toi32_i32$0 ? $3_1 : $1_1;
   i64toi32_i32$5 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$4;
   $9_1 = i64toi32_i32$2;
   $9$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$1 ? $4_1 : $2_1;
   i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
   $11_1 = i64toi32_i32$4;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $10_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
   $2_1 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $136 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $136 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $8_1 = $136 & 32767 | 0;
   label$8 : {
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$0 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $137 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $137 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $137 & 32767 | 0;
    if ($6_1) {
     break label$8
    }
    $151 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $152 = $9_1;
    $152$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $153 = $10_1;
    $153$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$1 = i64toi32_i32$4 ? $9_1 : $10_1;
    i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$5 : i64toi32_i32$0;
    i64toi32_i32$0 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$0 | 0) == (32 | 0)) {
     $138 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $138 = i64toi32_i32$0
    }
    $160$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $163$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $160$hi;
    i64toi32_i32$1 = $138;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$0 = $6_1 << 6 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $6_1 = i64toi32_i32$5;
    i64toi32_i32$3 = $152$hi;
    i64toi32_i32$1 = $153$hi;
    $88($151 | 0, $152 | 0, i64toi32_i32$3 | 0, $153 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$3;
    $9$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = i64toi32_i32$2 ? $1_1 : $3_1;
   i64toi32_i32$4 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$0;
   label$9 : {
    if ($8_1) {
     break label$9
    }
    $183 = $5_1 + 80 | 0;
    i64toi32_i32$0 = $3$hi;
    $184 = $3_1;
    $184$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    $185 = $4_1;
    $185$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $7_1 = !($4_1 | i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $4_1;
    i64toi32_i32$4 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$2;
    i64toi32_i32$2 = Math_clz32(i64toi32_i32$4);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$2 | 0) == (32 | 0)) {
     $139 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $139 = i64toi32_i32$2
    }
    $192$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $195$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $192$hi;
    i64toi32_i32$3 = $139;
    i64toi32_i32$4 = $195$hi;
    i64toi32_i32$2 = $7_1 << 6 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $7_1 = i64toi32_i32$0;
    i64toi32_i32$5 = $184$hi;
    i64toi32_i32$3 = $185$hi;
    $88($183 | 0, $184 | 0, i64toi32_i32$5 | 0, $185 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$5;
    $3$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 3;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $140 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
    $140 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $208 = $140;
   $208$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 61;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $141 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    $141 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   $210$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $208$hi;
   i64toi32_i32$5 = $208;
   i64toi32_i32$3 = $210$hi;
   i64toi32_i32$2 = $141;
   i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 524288;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 3;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    $142 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $142 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
   }
   $214 = $142;
   $214$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 61;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $143 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $143 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $216$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $214$hi;
   i64toi32_i32$1 = $214;
   i64toi32_i32$5 = $216$hi;
   i64toi32_i32$2 = $143;
   i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $1$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 3;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    $144 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $144 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
   }
   $3_1 = $144;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$5 = $11_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   $10_1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
   $10$hi = i64toi32_i32$3;
   label$10 : {
    $7_1 = $6_1 - $8_1 | 0;
    if (!$7_1) {
     break label$10
    }
    label$11 : {
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$3 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $3_1 = 1;
     $3$hi = i64toi32_i32$3;
     break label$10;
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$5 = $4$hi;
    $88($5_1 + 64 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    $98($5_1 + 48 | 0 | 0, $3_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $242 = i64toi32_i32$3;
    $242$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $244 = i64toi32_i32$5;
    $244$hi = i64toi32_i32$3;
    i64toi32_i32$1 = (i64toi32_i32$1 + 64 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $248 = i64toi32_i32$3;
    $248$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $244$hi;
    i64toi32_i32$1 = $244;
    i64toi32_i32$3 = $248$hi;
    i64toi32_i32$2 = $248;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 0;
    $250 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$5 = 0;
    $251$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $242$hi;
    i64toi32_i32$2 = $242;
    i64toi32_i32$3 = $251$hi;
    i64toi32_i32$1 = $250;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $3_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $3$hi = i64toi32_i32$3;
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$3 = 524288;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $12_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $9$hi;
   i64toi32_i32$2 = $9_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 3;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $145 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
    $145 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $2_1 = $145;
   $2$hi = i64toi32_i32$5;
   label$12 : {
    label$13 : {
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
      $146 = 1
     } else {
      if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$1 >>> 0) {
        $147 = 0
       } else {
        $147 = 1
       }
       $148 = $147;
      } else {
       $148 = 0
      }
      $146 = $148;
     }
     if ($146) {
      break label$13
     }
     label$14 : {
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
      $1_1 = i64toi32_i32$4;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
      $269$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$2 = $3_1;
      $272 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $273$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $269$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$4 = $273$hi;
      i64toi32_i32$3 = $272;
      i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
      $4_1 = i64toi32_i32$1;
      $4$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
       break label$14
      }
      i64toi32_i32$2 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $4_1 = 0;
      $4$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$5 = $4_1;
     i64toi32_i32$0 = 524287;
     i64toi32_i32$3 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$12
     }
     $282 = $5_1 + 32 | 0;
     i64toi32_i32$5 = $1$hi;
     $283 = $1_1;
     $283$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     $284 = $4_1;
     $284$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $4$hi;
     $7_1 = !($4_1 | i64toi32_i32$5 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? $1_1 : $4_1;
     i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$5 : i64toi32_i32$2;
     i64toi32_i32$2 = Math_clz32(i64toi32_i32$3);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$2 | 0) == (32 | 0)) {
      $149 = Math_clz32(i64toi32_i32$0) + 32 | 0
     } else {
      $149 = i64toi32_i32$2
     }
     $291$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $294$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $291$hi;
     i64toi32_i32$0 = $149;
     i64toi32_i32$3 = $294$hi;
     i64toi32_i32$2 = $7_1 << 6 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $7_1 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$1 = $283$hi;
     i64toi32_i32$0 = $284$hi;
     $88($282 | 0, $283 | 0, i64toi32_i32$1 | 0, $284 | 0, i64toi32_i32$0 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$4 = $5_1 + 40 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$0;
     break label$12;
    }
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $309 = i64toi32_i32$3;
    $309$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$2 = $3_1;
    $315 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $316$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $309$hi;
    i64toi32_i32$2 = $309;
    i64toi32_i32$3 = $316$hi;
    i64toi32_i32$0 = $315;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = 1048576;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$12
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $150 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $150 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
    }
    $322 = $150;
    $322$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 63;
    i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $154 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $154 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $324$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $322$hi;
    i64toi32_i32$5 = $322;
    i64toi32_i32$2 = $324$hi;
    i64toi32_i32$0 = $154;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $325 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $325$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    $327 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $327$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $325$hi;
    i64toi32_i32$2 = $325;
    i64toi32_i32$1 = $327$hi;
    i64toi32_i32$0 = $327;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $1$hi = i64toi32_i32$1;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $155 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     $155 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
    }
    $4_1 = $155;
    $4$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$1 = $11_1;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $2_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$5;
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$1;
    break label$1;
   }
   $7_1 = 0;
   label$16 : {
    label$17 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$17
     }
     $7_1 = $6_1;
     break label$16;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $4$hi;
    $88($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $98($5_1 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $354 = i64toi32_i32$1;
    $354$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $356 = i64toi32_i32$2;
    $356$hi = i64toi32_i32$1;
    i64toi32_i32$5 = (i64toi32_i32$5 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $360 = i64toi32_i32$1;
    $360$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $356$hi;
    i64toi32_i32$5 = $356;
    i64toi32_i32$1 = $360$hi;
    i64toi32_i32$0 = $360;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 0;
    $362 = (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$2 = 0;
    $363$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $354$hi;
    i64toi32_i32$0 = $354;
    i64toi32_i32$1 = $363$hi;
    i64toi32_i32$5 = $362;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $1_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $156 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $156 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
   }
   $369 = $156;
   $369$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $157 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
    $157 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $371$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $369$hi;
   i64toi32_i32$1 = $369;
   i64toi32_i32$0 = $371$hi;
   i64toi32_i32$5 = $157;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $158 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
    $158 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $375 = $158;
   $375$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $159 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    $159 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
   }
   i64toi32_i32$1 = $159;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $378 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $378$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $375$hi;
   i64toi32_i32$2 = $375;
   i64toi32_i32$1 = $378$hi;
   i64toi32_i32$5 = $378;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $379$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $379$hi;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   $6_1 = $1_1 & 7 | 0;
   label$18 : {
    label$19 : {
     label$20 : {
      switch ($96() | 0 | 0) {
      case 0:
       i64toi32_i32$2 = $4$hi;
       $386 = $4_1;
       $386$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$2 = 0;
       $390$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$0 = $390$hi;
       i64toi32_i32$5 = $6_1 >>> 0 > 4 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1_1 = i64toi32_i32$3;
       $1$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$5 = $3_1;
       $394 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$2 = 0;
       $395$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $386$hi;
       i64toi32_i32$5 = $386;
       i64toi32_i32$4 = $395$hi;
       i64toi32_i32$1 = $394;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $4_1 = i64toi32_i32$0;
       $4$hi = i64toi32_i32$3;
       label$23 : {
        if (($6_1 | 0) == (4 | 0)) {
         break label$23
        }
        i64toi32_i32$3 = $1$hi;
        $3_1 = $1_1;
        $3$hi = i64toi32_i32$3;
        break label$19;
       }
       i64toi32_i32$3 = $4$hi;
       $400 = $4_1;
       $400$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1$hi;
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 1;
       i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $2_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
       $2$hi = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$5 = $2$hi;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $3_1 = i64toi32_i32$4;
       $3$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $2$hi;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$3 = $2$hi;
       i64toi32_i32$1 = $2_1;
       $408 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $409$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $400$hi;
       i64toi32_i32$1 = $400;
       i64toi32_i32$0 = $409$hi;
       i64toi32_i32$3 = $408;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $4_1 = i64toi32_i32$2;
       $4$hi = i64toi32_i32$4;
       break label$18;
      case 1:
       i64toi32_i32$4 = $4$hi;
       $411 = $4_1;
       $411$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $2$hi;
       i64toi32_i32$5 = $2_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 0;
       $417 = ((i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $418$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$4 = $418$hi;
       i64toi32_i32$1 = $417;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1_1 = i64toi32_i32$0;
       $1$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$1 = $3_1;
       $422 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $423$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $411$hi;
       i64toi32_i32$1 = $411;
       i64toi32_i32$2 = $423$hi;
       i64toi32_i32$3 = $422;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $4_1 = i64toi32_i32$4;
       $4$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1$hi;
       $3_1 = $1_1;
       $3$hi = i64toi32_i32$0;
       break label$19;
      case 2:
       break label$20;
      default:
       break label$19;
      };
     }
     i64toi32_i32$0 = $4$hi;
     $426 = $4_1;
     $426$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $2$hi;
     $432 = !($2_1 | i64toi32_i32$0 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $433$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = $433$hi;
     i64toi32_i32$3 = $432;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1_1 = i64toi32_i32$2;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$3 = $3_1;
     $437 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $438$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $426$hi;
     i64toi32_i32$3 = $426;
     i64toi32_i32$4 = $438$hi;
     i64toi32_i32$5 = $437;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$2;
    }
    if (!$6_1) {
     break label$1
    }
   }
   $97() | 0;
  }
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $88($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $89($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $90($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $91($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $5_1 = 0, i64toi32_i32$6 = 0, $13$hi = 0, $10$hi = 0, $13_1 = 0, $10_1 = 0, $16$hi = 0, $15$hi = 0, $12$hi = 0, $20$hi = 0, $15_1 = 0, $11$hi = 0, $12_1 = 0, $6_1 = 0, $16_1 = 0, $17$hi = 0, $11_1 = 0, $14$hi = 0, $8_1 = 0, $18$hi = 0, $20_1 = 0, $14_1 = 0, $17_1 = 0, $23$hi = 0, $18_1 = 0, $23_1 = 0, $19_1 = 0, $19$hi = 0, $9_1 = 0, $22_1 = 0, $22$hi = 0, $325 = 0, $326 = 0, $7_1 = 0, $327 = 0, $329 = 0, $330 = 0, $331 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $338 = 0, $339 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $21_1 = 0, $21$hi = 0, $357 = 0, $359 = 0, $360 = 0, $361 = 0, $365 = 0, $366 = 0, $368 = 0, $369 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $377 = 0, $378 = 0, $379 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $387 = 0, $388 = 0, $389 = 0, $50_1 = 0, $54_1 = 0, $61_1 = 0, $65_1 = 0, $74_1 = 0, $74$hi = 0, $79_1 = 0, $79$hi = 0, $87_1 = 0, $87$hi = 0, $109_1 = 0, $110_1 = 0, $110$hi = 0, $111_1 = 0, $111$hi = 0, $118$hi = 0, $121$hi = 0, $136 = 0, $137 = 0, $137$hi = 0, $138 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $163 = 0, $165 = 0, $165$hi = 0, $169$hi = 0, $180 = 0, $180$hi = 0, $181$hi = 0, $184 = 0, $187 = 0, $187$hi = 0, $192$hi = 0, $202 = 0, $202$hi = 0, $203$hi = 0, $205 = 0, $208 = 0, $208$hi = 0, $213$hi = 0, $223 = 0, $223$hi = 0, $224$hi = 0, $226 = 0, $229 = 0, $229$hi = 0, $234$hi = 0, $244 = 0, $244$hi = 0, $245$hi = 0, $247 = 0, $248 = 0, $248$hi = 0, $251 = 0, $251$hi = 0, $256$hi = 0, $261 = 0, $263$hi = 0, $266 = 0, $267 = 0, $267$hi = 0, $271 = 0, $271$hi = 0, $278 = 0, $278$hi = 0, $282 = 0, $283$hi = 0, $284$hi = 0, $286 = 0, $287$hi = 0, $288$hi = 0, $289$hi = 0, $293$hi = 0, $304 = 0, $304$hi = 0, $307 = 0, $307$hi = 0, $313$hi = 0, $314 = 0, $314$hi = 0, $320 = 0, $320$hi = 0, $328 = 0, $328$hi = 0, $332 = 0, $332$hi = 0, $337 = 0, $337$hi = 0, $339$hi = 0, $340 = 0, $340$hi = 0, $342$hi = 0, $343$hi = 0, $346 = 0, $347$hi = 0, $348$hi = 0, $351 = 0, $352$hi = 0, $358 = 0, $358$hi = 0, $362 = 0, $363 = 0, $363$hi = 0, $364 = 0, $364$hi = 0, $367 = 0, $367$hi = 0, $370 = 0, $370$hi = 0, $372$hi = 0, $376 = 0, $376$hi = 0, $380 = 0, $381$hi = 0, $382$hi = 0, $385 = 0, $385$hi = 0, $386 = 0, $386$hi = 0, $393 = 0, $393$hi = 0, $397 = 0, $399 = 0, $399$hi = 0, $401$hi = 0, $402 = 0, $402$hi = 0, $403 = 0, $403$hi = 0, $404 = 0, $404$hi = 0, $406$hi = 0, $410 = 0, $411$hi = 0, $412 = 0, $412$hi = 0, $413 = 0, $413$hi = 0, $414 = 0, $414$hi = 0, $426 = 0, $426$hi = 0, $430 = 0, $431 = 0, $431$hi = 0, $435 = 0, $435$hi = 0, $439 = 0, $440$hi = 0, $441$hi = 0, $445 = 0, $446$hi = 0, $447 = 0, $447$hi = 0, $448 = 0, $448$hi = 0, $455 = 0, $455$hi = 0, $460 = 0, $460$hi = 0, $465 = 0, $465$hi = 0, $468 = 0, $468$hi = 0, $471 = 0, $472$hi = 0, $475 = 0, $476$hi = 0, $477$hi = 0, $480 = 0, $481$hi = 0, $483$hi = 0, $484 = 0, $484$hi = 0, $488 = 0, $489$hi = 0, $490 = 0, $490$hi = 0, $491 = 0, $491$hi = 0, $492 = 0, $492$hi = 0, $499 = 0, $499$hi = 0, $502 = 0, $502$hi = 0, $505 = 0, $507$hi = 0, $508 = 0, $508$hi = 0, $513 = 0, $513$hi = 0, $514 = 0, $514$hi = 0, $516$hi = 0, $517$hi = 0, $519 = 0, $520$hi = 0, $521$hi = 0, $525 = 0, $526$hi = 0, $531$hi = 0, $541$hi = 0, $545 = 0, $545$hi = 0, $546$hi = 0, $550 = 0, $551$hi = 0, $558 = 0, $560 = 0, $560$hi = 0, $562$hi = 0, $564 = 0, $564$hi = 0, $571$hi = 0, $575 = 0, $575$hi = 0, $576$hi = 0, $580 = 0, $581$hi = 0, $595 = 0, $595$hi = 0, $597$hi = 0, $601$hi = 0, $603 = 0, $603$hi = 0, $636 = 0, $636$hi = 0, $641 = 0, $641$hi = 0, $645$hi = 0, $646 = 0, $646$hi = 0, $647 = 0, $647$hi = 0, $650 = 0, $650$hi = 0, $654 = 0, $655$hi = 0, $667 = 0, $667$hi = 0, $668 = 0, $668$hi = 0, $676 = 0, $680 = 0, $681$hi = 0, $685 = 0, $689 = 0, $690$hi = 0, $694 = 0, $695$hi = 0, $697 = 0, $697$hi = 0, $700 = 0, $703 = 0, $703$hi = 0, $704 = 0, $711 = 0, $716 = 0, $717$hi = 0, $721 = 0, $722$hi = 0, $724 = 0, $724$hi = 0, $727 = 0, $730 = 0, $730$hi = 0, $731 = 0, $737 = 0, $742 = 0, $743$hi = 0, $747 = 0, $748$hi = 0, $749$hi = 0;
  $5_1 = global$0 - 336 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $325 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $325 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $325 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $326 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $326 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $326 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$0 = $1$hi;
     $50_1 = !($1_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     $54_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $50_1 : $54_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $12$hi = i64toi32_i32$0;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$0 = $3$hi;
     $61_1 = !($3_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     $65_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $61_1 : $65_1) {
      break label$5
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $74_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $74$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = $74$hi;
     i64toi32_i32$2 = $74_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $79_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $79$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $79$hi;
      i64toi32_i32$0 = $79_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 2147450880;
      $12_1 = 0;
      $12$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$3;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $87_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $87$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $87$hi;
     i64toi32_i32$0 = $87_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$9 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 2147450880;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $12_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
     $12_1 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = $12_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    $8_1 = 0;
    label$11 : {
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$11
     }
     $109_1 = $5_1 + 320 | 0;
     i64toi32_i32$1 = $1$hi;
     $110_1 = $1_1;
     $110$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     $111_1 = $11_1;
     $111$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $11$hi;
     $8_1 = !($11_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$3 = i64toi32_i32$2 ? $1_1 : $11_1;
     i64toi32_i32$4 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$0;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$4);
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $327 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $327 = i64toi32_i32$0
     }
     $118$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $121$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $118$hi;
     i64toi32_i32$3 = $327;
     i64toi32_i32$4 = $121$hi;
     i64toi32_i32$0 = $8_1 << 6 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$1;
     i64toi32_i32$5 = $110$hi;
     i64toi32_i32$3 = $111$hi;
     $88($109_1 | 0, $110_1 | 0, i64toi32_i32$5 | 0, $111_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$1 | 0;
     i64toi32_i32$2 = $5_1 + 328 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 320 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 324 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$3;
    }
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$2
    }
    $136 = $5_1 + 304 | 0;
    i64toi32_i32$2 = $3$hi;
    $137 = $3_1;
    $137$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    $138 = $10_1;
    $138$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$2 | 0);
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $10_1;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $329 = Math_clz32(i64toi32_i32$5) + 32 | 0
    } else {
     $329 = i64toi32_i32$3
    }
    $145$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $148$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $145$hi;
    i64toi32_i32$5 = $329;
    i64toi32_i32$0 = $148$hi;
    i64toi32_i32$3 = $9_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $9_1 = i64toi32_i32$2;
    i64toi32_i32$1 = $137$hi;
    i64toi32_i32$5 = $138$hi;
    $88($136 | 0, $137 | 0, i64toi32_i32$1 | 0, $138 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = (i64toi32_i32$2 + $8_1 | 0) + -16 | 0;
    i64toi32_i32$4 = $5_1 + 312 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$5;
   }
   $163 = $5_1 + 288 | 0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 49;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $330 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    $330 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $165 = $330;
   $165$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$5 = $10_1;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $14_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$4;
   i64toi32_i32$1 = $14_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $331 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $331 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $169$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $165$hi;
   i64toi32_i32$4 = $165;
   i64toi32_i32$1 = $169$hi;
   i64toi32_i32$3 = $331;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 1963258675;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = 0;
   $100($163 | 0, $2_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$5 = ($5_1 + 288 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $180 = i64toi32_i32$3;
   $180$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $180$hi;
   i64toi32_i32$2 = $180;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
   $181$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $181$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = 0;
   $100($5_1 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $184 = $5_1 + 256 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 63;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $333 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    $333 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $187 = $333;
   $187$hi = i64toi32_i32$2;
   i64toi32_i32$1 = ($5_1 + 272 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
    $334 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $334 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
   }
   $192$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $187$hi;
   i64toi32_i32$5 = $187;
   i64toi32_i32$1 = $192$hi;
   i64toi32_i32$0 = $334;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = 0;
   $100($184 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$5 = ($5_1 + 256 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $202 = i64toi32_i32$0;
   $202$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $202$hi;
   i64toi32_i32$1 = $202;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
   $203$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $203$hi;
   i64toi32_i32$1 = 0;
   $100($5_1 + 240 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $205 = $5_1 + 224 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 63;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $335 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $335 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $208 = $335;
   $208$hi = i64toi32_i32$1;
   i64toi32_i32$2 = ($5_1 + 240 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $336 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $336 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $213$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $208$hi;
   i64toi32_i32$5 = $208;
   i64toi32_i32$2 = $213$hi;
   i64toi32_i32$4 = $336;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = 0;
   $100($205 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$5 = ($5_1 + 224 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $223 = i64toi32_i32$4;
   $223$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $223$hi;
   i64toi32_i32$2 = $223;
   i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $224$hi;
   i64toi32_i32$2 = 0;
   $100($5_1 + 208 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $226 = $5_1 + 192 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $338 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $338 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $229 = $338;
   $229$hi = i64toi32_i32$2;
   i64toi32_i32$1 = ($5_1 + 208 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $339 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $339 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $234$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $229$hi;
   i64toi32_i32$5 = $229;
   i64toi32_i32$1 = $234$hi;
   i64toi32_i32$3 = $339;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = 0;
   $100($226 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$5 = ($5_1 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $244 = i64toi32_i32$3;
   $244$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $244$hi;
   i64toi32_i32$1 = $244;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
   $245$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $245$hi;
   i64toi32_i32$1 = 0;
   $100($5_1 + 176 | 0 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $247 = $5_1 + 160 | 0;
   i64toi32_i32$1 = $2$hi;
   $248 = $2_1;
   $248$hi = i64toi32_i32$1;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 63;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $341 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $341 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $251 = $341;
   $251$hi = i64toi32_i32$1;
   i64toi32_i32$2 = ($5_1 + 176 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $342 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $342 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $256$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $251$hi;
   i64toi32_i32$5 = $251;
   i64toi32_i32$2 = $256$hi;
   i64toi32_i32$0 = $342;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $248$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = 0;
   $100($247 | 0, $248 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $261 = $5_1 + 144 | 0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
    $343 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
    $343 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
   }
   $263$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $263$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = 0;
   $100($261 | 0, $343 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $266 = $5_1 + 112 | 0;
   i64toi32_i32$4 = i64toi32_i32$0;
   $267 = $4_1;
   $267$hi = i64toi32_i32$4;
   i64toi32_i32$1 = ($5_1 + 160 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $271 = i64toi32_i32$4;
   $271$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $278 = i64toi32_i32$4;
   $278$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$4 = $278$hi;
   i64toi32_i32$2 = $278;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $282 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $283$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $271$hi;
   i64toi32_i32$2 = $271;
   i64toi32_i32$3 = $283$hi;
   i64toi32_i32$1 = $282;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $284$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   $286 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $287$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $284$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$5 = $287$hi;
   i64toi32_i32$2 = $286;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $288$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $288$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $289$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $267$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = $289$hi;
   i64toi32_i32$2 = 0;
   $100($266 | 0, $267 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $293$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $293$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = 0;
   $100($5_1 + 128 | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
   label$12 : {
    label$13 : {
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $344 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $344 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $16_1 = $344;
     $16$hi = i64toi32_i32$3;
     $304 = $16_1;
     $304$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $345 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $345 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $307 = $345;
     $307$hi = i64toi32_i32$3;
     i64toi32_i32$0 = ($5_1 + 128 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $347 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $347 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $313$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $307$hi;
     i64toi32_i32$2 = $307;
     i64toi32_i32$0 = $313$hi;
     i64toi32_i32$5 = $347;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $314 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $314$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $304$hi;
     i64toi32_i32$3 = $304;
     i64toi32_i32$2 = $314$hi;
     i64toi32_i32$5 = $314;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $13_1 = i64toi32_i32$4;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = -13927;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $18_1 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $348 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $348 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $2_1 = $348;
     $2$hi = i64toi32_i32$0;
     $320 = $2_1;
     $320$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $19_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $19$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 31;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $349 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $349 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     i64toi32_i32$1 = $349;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
     $4_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $320$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = __wasm_i64_mul($320 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $20_1 = i64toi32_i32$1;
     $20$hi = i64toi32_i32$0;
     $328 = i64toi32_i32$1;
     $328$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 31;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $350 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $350 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
     }
     i64toi32_i32$0 = $350;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
     $10$hi = i64toi32_i32$4;
     $332 = $10_1;
     $332$hi = i64toi32_i32$4;
     i64toi32_i32$1 = ($5_1 + 112 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $352 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $352 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $337 = $352;
     $337$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$0 = $15_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $353 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $353 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $339$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $337$hi;
     i64toi32_i32$4 = $337;
     i64toi32_i32$0 = $339$hi;
     i64toi32_i32$5 = $353;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $340 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $340$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $17_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $354 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $354 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $342$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $340$hi;
     i64toi32_i32$0 = $340;
     i64toi32_i32$1 = $342$hi;
     i64toi32_i32$5 = $354;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $343$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$5 = $16_1;
     $346 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $347$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $343$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $347$hi;
     i64toi32_i32$0 = $346;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $348$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$0 = $13_1;
     $351 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $352$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $348$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $352$hi;
     i64toi32_i32$5 = $351;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $355 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $355 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $13_1 = $355;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $332$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = __wasm_i64_mul($332 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $358 = i64toi32_i32$1;
     $358$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $328$hi;
     i64toi32_i32$2 = $328;
     i64toi32_i32$1 = $358$hi;
     i64toi32_i32$5 = $358;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$5 = $20_1;
     $362 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $363 = $362;
     $363$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$3;
     $364 = i64toi32_i32$0;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $15_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $15_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $15$hi = i64toi32_i32$3;
     $367 = $15_1;
     $367$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $356 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
      $356 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $21_1 = $356;
     $21$hi = i64toi32_i32$5;
     $370 = $21_1;
     $370$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      $357 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
      $357 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
     }
     $372$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $370$hi;
     i64toi32_i32$5 = $370;
     i64toi32_i32$3 = $372$hi;
     i64toi32_i32$2 = $357;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $367$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = __wasm_i64_mul($367 | 0, i64toi32_i32$5 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $376 = i64toi32_i32$4;
     $376$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $364$hi;
     i64toi32_i32$3 = $364;
     i64toi32_i32$4 = $376$hi;
     i64toi32_i32$2 = $376;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $17_1 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     $380 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $381$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $363$hi;
     i64toi32_i32$2 = $363;
     i64toi32_i32$0 = $381$hi;
     i64toi32_i32$3 = $380;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $382$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $385 = i64toi32_i32$2;
     $385$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $382$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $385$hi;
     i64toi32_i32$3 = $385;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $386 = i64toi32_i32$0;
     $386$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $393 = i64toi32_i32$5;
     $393$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$1 = $20_1;
     i64toi32_i32$5 = $393$hi;
     i64toi32_i32$3 = $393;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $16_1 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$3 = $20_1;
     $397 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = $397;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $359 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
      $359 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $399 = $359;
     $399$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $360 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      $360 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $401$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $399$hi;
     i64toi32_i32$0 = $399;
     i64toi32_i32$4 = $401$hi;
     i64toi32_i32$1 = $360;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $402 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $402$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $386$hi;
     i64toi32_i32$3 = $386;
     i64toi32_i32$0 = $402$hi;
     i64toi32_i32$1 = $402;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $403 = i64toi32_i32$5;
     $403$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     $404 = $17_1;
     $404$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
      $361 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
      $361 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
     }
     $406$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $404$hi;
     i64toi32_i32$2 = $404;
     i64toi32_i32$4 = $406$hi;
     i64toi32_i32$1 = $361;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$1 = $17_1;
     $410 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $411$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $403$hi;
     i64toi32_i32$1 = $403;
     i64toi32_i32$5 = $411$hi;
     i64toi32_i32$2 = $410;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $412 = i64toi32_i32$4;
     $412$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     $413 = $16_1;
     $413$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     $414 = $15_1;
     $414$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $365 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $365 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $22_1 = $365;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $22_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -2;
     i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $17_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $17$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $414$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = __wasm_i64_mul($414 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $23_1 = i64toi32_i32$0;
     $23$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $426 = i64toi32_i32$1;
     $426$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$3 = $23_1;
     i64toi32_i32$1 = $426$hi;
     i64toi32_i32$2 = $426;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$3 = $23$hi;
     i64toi32_i32$2 = $23_1;
     $430 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $431 = $430;
     $431$hi = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $435 = i64toi32_i32$4;
     $435$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $435$hi;
     i64toi32_i32$3 = $435;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $23_1 = i64toi32_i32$1;
     $23$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$3 = $20_1;
     $439 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $440$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $431$hi;
     i64toi32_i32$3 = $431;
     i64toi32_i32$5 = $440$hi;
     i64toi32_i32$2 = $439;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $441$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $413$hi;
     i64toi32_i32$0 = $413;
     i64toi32_i32$3 = $441$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$2 = $16_1;
     $445 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $446$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $412$hi;
     i64toi32_i32$2 = $412;
     i64toi32_i32$4 = $446$hi;
     i64toi32_i32$0 = $445;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $447 = i64toi32_i32$3;
     $447$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     $448 = $20_1;
     $448$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $16_1 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $455 = i64toi32_i32$2;
     $455$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$1 = $16_1;
     i64toi32_i32$2 = $455$hi;
     i64toi32_i32$0 = $455;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $460 = i64toi32_i32$1;
     $460$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = $460$hi;
     i64toi32_i32$0 = $460;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $13_1 = i64toi32_i32$2;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $465 = i64toi32_i32$5;
     $465$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$5 = $465$hi;
     i64toi32_i32$0 = $465;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15_1 = i64toi32_i32$1;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $366 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $366 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $468 = $366;
     $468$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$0 = $16_1;
     $471 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $472$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$4 = $4_1;
     $475 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $476$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $472$hi;
     i64toi32_i32$4 = $471;
     i64toi32_i32$2 = $476$hi;
     i64toi32_i32$3 = $475;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $477$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$0 = $15_1;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$3 = $13_1;
     $480 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $481$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $477$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$1 = $481$hi;
     i64toi32_i32$4 = $480;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $368 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
      $368 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     }
     $483$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $468$hi;
     i64toi32_i32$5 = $468;
     i64toi32_i32$0 = $483$hi;
     i64toi32_i32$4 = $368;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $484 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $484$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $448$hi;
     i64toi32_i32$3 = $448;
     i64toi32_i32$5 = $484$hi;
     i64toi32_i32$4 = $484;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$4 = $20_1;
     $488 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $489$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $447$hi;
     i64toi32_i32$4 = $447;
     i64toi32_i32$2 = $489$hi;
     i64toi32_i32$3 = $488;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $490 = i64toi32_i32$5;
     $490$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     $491 = $4_1;
     $491$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     $492 = $23_1;
     $492$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $499 = i64toi32_i32$4;
     $499$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$4 = $499$hi;
     i64toi32_i32$3 = $499;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $369 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
      $369 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $502 = $369;
     $502$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     $505 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = $505;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $371 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
      $371 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $507$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $502$hi;
     i64toi32_i32$5 = $502;
     i64toi32_i32$3 = $507$hi;
     i64toi32_i32$1 = $371;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $508 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     $508$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $492$hi;
     i64toi32_i32$0 = $492;
     i64toi32_i32$5 = $508$hi;
     i64toi32_i32$1 = $508;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$1 = $23_1;
     i64toi32_i32$3 = 0;
     $513 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     $513$hi = i64toi32_i32$3;
     i64toi32_i32$3 = i64toi32_i32$2;
     $514 = i64toi32_i32$4;
     $514$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$1 = $15_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $372 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
      $372 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $516$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $514$hi;
     i64toi32_i32$3 = $514;
     i64toi32_i32$1 = $516$hi;
     i64toi32_i32$0 = $372;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $517$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $517$hi;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     $519 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $520$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $513$hi;
     i64toi32_i32$0 = $513;
     i64toi32_i32$4 = $520$hi;
     i64toi32_i32$3 = $519;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $521$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $491$hi;
     i64toi32_i32$2 = $491;
     i64toi32_i32$0 = $521$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     $525 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $526$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $490$hi;
     i64toi32_i32$3 = $490;
     i64toi32_i32$1 = $526$hi;
     i64toi32_i32$2 = $525;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$3 = 131071;
     i64toi32_i32$2 = -1;
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$2 = $19_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      $373 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
      $373 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
     }
     $531$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $531$hi;
     i64toi32_i32$5 = $373;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$3 = $21_1;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $19_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$3 = $14$hi;
     $100($5_1 + 80 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 49;
     i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $374 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $374 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $541$hi = i64toi32_i32$4;
     i64toi32_i32$3 = ($5_1 + 80 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $545 = i64toi32_i32$4;
     $545$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $541$hi;
     i64toi32_i32$3 = $374;
     i64toi32_i32$4 = $545$hi;
     i64toi32_i32$2 = $545;
     i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     $546$hi = i64toi32_i32$0;
     i64toi32_i32$5 = $5_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     $550 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $551$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $546$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $551$hi;
     i64toi32_i32$0 = $550;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
     $13_1 = i64toi32_i32$4;
     $13$hi = i64toi32_i32$1;
     $6_1 = $6_1 + 16382 | 0;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$3;
     $10$hi = i64toi32_i32$4;
     break label$12;
    }
    $558 = $5_1 + 96 | 0;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $375 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
     $375 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    $560 = $375;
    $560$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 63;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
     $377 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $377 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
    }
    $562$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $560$hi;
    i64toi32_i32$5 = $560;
    i64toi32_i32$4 = $562$hi;
    i64toi32_i32$0 = $377;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
    $2_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $2$hi = i64toi32_i32$4;
    $564 = $2_1;
    $564$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $378 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
     $378 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $378;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$5 = $564$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$0 = $14$hi;
    $100($558 | 0, $564 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 48;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $379 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
     $379 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $571$hi = i64toi32_i32$4;
    i64toi32_i32$0 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $575 = i64toi32_i32$4;
    $575$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $571$hi;
    i64toi32_i32$0 = $379;
    i64toi32_i32$4 = $575$hi;
    i64toi32_i32$5 = $575;
    i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    $576$hi = i64toi32_i32$3;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$3;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $580 = (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$1 = 0;
    $581$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $576$hi;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$0 = $581$hi;
    i64toi32_i32$3 = $580;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$4;
    $13$hi = i64toi32_i32$2;
    $6_1 = $6_1 + 16383 | 0;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    $22_1 = $1_1;
    $22$hi = i64toi32_i32$4;
   }
   label$14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $12_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $12$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   label$15 : {
    label$16 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$16
     }
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      $381 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
      $381 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     }
     $595 = $381;
     $595$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 63;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $382 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $382 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
     }
     $597$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $595$hi;
     i64toi32_i32$2 = $595;
     i64toi32_i32$1 = $597$hi;
     i64toi32_i32$3 = $382;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $13_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = $6_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      $383 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
      $383 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     }
     $601$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 65535;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $603 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $603$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $601$hi;
     i64toi32_i32$2 = $383;
     i64toi32_i32$1 = $603$hi;
     i64toi32_i32$3 = $603;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $15_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$4 = $10_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      $384 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
      $384 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     }
     $4_1 = $384;
     $4$hi = i64toi32_i32$2;
     break label$15;
    }
    label$17 : {
     if (($6_1 | 0) > (-113 | 0)) {
      break label$17
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$4 = $4$hi;
    $98($5_1 + 64 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$2 = $19$hi;
    $88($5_1 + 48 | 0 | 0, $22_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$2 | 0, $6_1 + 112 | 0 | 0);
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$4;
    i64toi32_i32$1 = (i64toi32_i32$1 + 64 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$4;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $15$hi;
    $100($5_1 + 32 | 0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $15_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $636 = i64toi32_i32$3;
    $636$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     $387 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
     $387 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
    }
    $641 = $387;
    $641$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $388 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
     $388 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
    }
    $645$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $641$hi;
    i64toi32_i32$4 = $641;
    i64toi32_i32$3 = $645$hi;
    i64toi32_i32$2 = $388;
    i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $646 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $646$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $636$hi;
    i64toi32_i32$1 = $636;
    i64toi32_i32$4 = $646$hi;
    i64toi32_i32$2 = $646;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    $647 = i64toi32_i32$5;
    $647$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$1;
    $650 = i64toi32_i32$0;
    $650$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $389 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $389 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $1_1 = $389;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $650$hi;
    i64toi32_i32$1 = $650;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $1_1;
    $654 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $655$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $647$hi;
    i64toi32_i32$2 = $647;
    i64toi32_i32$0 = $655$hi;
    i64toi32_i32$3 = $654;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
    $13_1 = i64toi32_i32$4;
    $13$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   $100($5_1 + 16 | 0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$1 | 0, 3 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 0;
   $100($5_1 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$5 | 0, 5 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = $15$hi;
   $667 = $15_1;
   $667$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   $668 = $2_1;
   $668$hi = i64toi32_i32$4;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = $3_1;
   $676 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$4 = $1_1;
   $680 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$3 = 0;
   $681$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$4 = $13_1;
   i64toi32_i32$1 = $681$hi;
   i64toi32_i32$0 = $680;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$5;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$0 = $14_1;
   $685 = i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$4 = $14_1;
   $689 = (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) | 0 ? $676 : $685;
   i64toi32_i32$0 = 0;
   $690$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $668$hi;
   i64toi32_i32$4 = $668;
   i64toi32_i32$3 = $690$hi;
   i64toi32_i32$2 = $689;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$2 = $2_1;
   $694 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $695$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $667$hi;
   i64toi32_i32$2 = $667;
   i64toi32_i32$5 = $695$hi;
   i64toi32_i32$4 = $694;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$1;
   $697 = i64toi32_i32$3;
   $697$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$2 = 2147418112;
   i64toi32_i32$4 = 0;
   $700 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
   $703 = i64toi32_i32$0;
   $703$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = $703$hi;
   i64toi32_i32$2 = $703;
   $704 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$2 = ($5_1 + 16 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$4;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $711 = i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$4 = $2_1;
   $716 = $700 & ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $704 : $711) | 0;
   i64toi32_i32$0 = 0;
   $717$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$2 = $717$hi;
   i64toi32_i32$1 = $716;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   $721 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $722$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $697$hi;
   i64toi32_i32$1 = $697;
   i64toi32_i32$3 = $722$hi;
   i64toi32_i32$4 = $721;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3_1 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$5;
   $724 = i64toi32_i32$2;
   $724$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$4 = 0;
   $727 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $730 = i64toi32_i32$0;
   $730$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = $730$hi;
   i64toi32_i32$1 = $730;
   $731 = i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$1 = $5_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$0 = $4_1;
   $737 = i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = $4_1;
   $742 = $727 & ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $731 : $737) | 0;
   i64toi32_i32$0 = 0;
   $743$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$1 = $743$hi;
   i64toi32_i32$5 = $742;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2_1;
   $747 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $748$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $724$hi;
   i64toi32_i32$5 = $724;
   i64toi32_i32$2 = $748$hi;
   i64toi32_i32$4 = $747;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $749$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$3 = $749$hi;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $12_1 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $12$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $5_1 + 336 | 0;
 }
 
 function $92($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $6_1 = 0, $6$hi = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $3_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $33$hi = 0, $37_1 = 0, $50_1 = 0, $50$hi = 0, $54$hi = 0, $63_1 = 0, $63$hi = 0, $64_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $6_1 = $26_1;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27_1;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $6_1 = $28_1;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   $32_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $33_1 = $5_1;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   $37_1 = Math_clz32($4_1) + 32 | 0;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37_1 : Math_clz32($30_1);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   $88($32_1 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50_1;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63_1;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $93($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $3_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $42$hi = 0, $48_1 = 0, $49_1 = 0, $49$hi = 0, $53$hi = 0, $54_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 2147483647 | 0;
    if (($4_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24_1;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4_1) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$5 = 0;
   $88($2_1 | 0, $30_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 + 81 | 0 | 0);
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38_1;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48_1 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49_1 = $5_1;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3_1 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49_1;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $94($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 + $3_1 | 0) ^ $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $88($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27_1;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32_1;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $95($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $19_1 = 0, $19$hi = 0, $23$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$1 = 0;
   $88($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $96() {
  return 0 | 0;
 }
 
 function $97() {
  return 0 | 0;
 }
 
 function $98($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $99($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $14$hi = 0, $14_1 = 0, $12$hi = 0, $11$hi = 0, $10$hi = 0, $15$hi = 0, $12_1 = 0, $6_1 = 0, $15_1 = 0, $11_1 = 0, $10_1 = 0, $18$hi = 0, $8_1 = 0, $18_1 = 0, $13$hi = 0, $16$hi = 0, $17$hi = 0, $7_1 = 0, $13_1 = 0, $16_1 = 0, $17_1 = 0, $19$hi = 0, $22$hi = 0, $19_1 = 0, $9_1 = 0, $20$hi = 0, $21$hi = 0, $23$hi = 0, $24$hi = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $246 = 0, $248 = 0, $249 = 0, $251 = 0, $252 = 0, $254 = 0, $256 = 0, $20_1 = 0, $257 = 0, $258 = 0, $21_1 = 0, $22_1 = 0, $259 = 0, $24_1 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $278 = 0, $29_1 = 0, $29$hi = 0, $31$hi = 0, $34_1 = 0, $34$hi = 0, $36$hi = 0, $39_1 = 0, $39$hi = 0, $43$hi = 0, $70_1 = 0, $74_1 = 0, $81_1 = 0, $85_1 = 0, $94_1 = 0, $94$hi = 0, $106_1 = 0, $106$hi = 0, $128_1 = 0, $129 = 0, $129$hi = 0, $130 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $150 = 0, $150$hi = 0, $155$hi = 0, $162 = 0, $163 = 0, $163$hi = 0, $164 = 0, $164$hi = 0, $171$hi = 0, $174$hi = 0, $186 = 0, $186$hi = 0, $191$hi = 0, $194 = 0, $194$hi = 0, $196$hi = 0, $207 = 0, $207$hi = 0, $215 = 0, $215$hi = 0, $222 = 0, $222$hi = 0, $227 = 0, $227$hi = 0, $236 = 0, $236$hi = 0, $243 = 0, $243$hi = 0, $245 = 0, $245$hi = 0, $247 = 0, $247$hi = 0, $250 = 0, $252$hi = 0, $253 = 0, $253$hi = 0, $255 = 0, $255$hi = 0, $264 = 0, $264$hi = 0, $269 = 0, $269$hi = 0, $277 = 0, $277$hi = 0, $280$hi = 0, $23_1 = 0, $296 = 0, $296$hi = 0, $300 = 0, $301 = 0, $301$hi = 0, $305 = 0, $305$hi = 0, $309 = 0, $310$hi = 0, $311 = 0, $311$hi = 0, $312 = 0, $312$hi = 0, $315 = 0, $316$hi = 0, $319 = 0, $320$hi = 0, $321$hi = 0, $325 = 0, $326$hi = 0, $327$hi = 0, $330 = 0, $330$hi = 0, $331 = 0, $331$hi = 0, $338 = 0, $338$hi = 0, $344 = 0, $344$hi = 0, $346$hi = 0, $347 = 0, $347$hi = 0, $348 = 0, $348$hi = 0, $349 = 0, $349$hi = 0, $351$hi = 0, $355 = 0, $356$hi = 0, $357 = 0, $357$hi = 0, $358 = 0, $358$hi = 0, $360 = 0, $360$hi = 0, $363 = 0, $364$hi = 0, $367 = 0, $368$hi = 0, $369$hi = 0, $372 = 0, $373$hi = 0, $375$hi = 0, $376 = 0, $376$hi = 0, $380 = 0, $381$hi = 0, $382 = 0, $382$hi = 0, $383 = 0, $383$hi = 0, $386 = 0, $387$hi = 0, $390 = 0, $391$hi = 0, $392$hi = 0, $396 = 0, $397$hi = 0, $407 = 0, $407$hi = 0, $409$hi = 0, $412 = 0, $412$hi = 0, $414$hi = 0, $418 = 0, $418$hi = 0, $420$hi = 0, $454 = 0, $454$hi = 0, $456 = 0, $456$hi = 0, $457 = 0, $457$hi = 0, $459 = 0, $459$hi = 0, $463 = 0, $463$hi = 0, $465 = 0, $466$hi = 0, $471 = 0, $471$hi = 0, $475 = 0, $475$hi = 0, $484$hi = 0, $486 = 0, $486$hi = 0, $492 = 0, $498 = 0, $498$hi = 0, $503 = 0, $504$hi = 0, $508 = 0, $508$hi = 0, $512 = 0, $512$hi = 0, $515 = 0, $515$hi = 0, $519 = 0, $520$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $228 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $228 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $228;
  $29$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $229 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $229 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $31$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $29$hi;
  i64toi32_i32$1 = $29_1;
  i64toi32_i32$0 = $31$hi;
  i64toi32_i32$3 = $229;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $10_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $230 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $230 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $34_1 = $230;
  $34$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $231 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $231 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $36$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $34$hi;
  i64toi32_i32$1 = $34_1;
  i64toi32_i32$0 = $36$hi;
  i64toi32_i32$3 = $231;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $232 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $232 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $39_1 = $232;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $12_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $233 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $233 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $43$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $39$hi;
  i64toi32_i32$2 = $39_1;
  i64toi32_i32$1 = $43$hi;
  i64toi32_i32$3 = $233;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $13_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $14_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $234 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $234 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $16_1 = $234;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $235 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $235 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $17_1 = $235;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $237 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $237 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $237 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $238 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $238 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $238 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$2 = $1$hi;
     $70_1 = !($1_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $74_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $70_1 : $74_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $81_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $85_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $81_1 : $85_1) {
      break label$5
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $94_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $94$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $94$hi;
     i64toi32_i32$1 = $94_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$7
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $106_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $106$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = $106$hi;
     i64toi32_i32$2 = $106_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     label$9 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2_1 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $128_1 = $5_1 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $129 = $1_1;
     $129$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     $130 = $15_1;
     $130$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $15$hi;
     $8_1 = !($15_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $15_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$2 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$2 | 0) == (32 | 0)) {
      $239 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $239 = i64toi32_i32$2
     }
     $137$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $140$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $137$hi;
     i64toi32_i32$3 = $239;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$2 = $8_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$0;
     i64toi32_i32$5 = $129$hi;
     i64toi32_i32$3 = $130$hi;
     $88($128_1 | 0, $129 | 0, i64toi32_i32$5 | 0, $130 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$0 | 0;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $240 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $240 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $150 = $240;
     $150$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $241 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $241 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $155$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $150$hi;
     i64toi32_i32$4 = $150;
     i64toi32_i32$5 = $155$hi;
     i64toi32_i32$2 = $241;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $10_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $242 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $242 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $16_1 = $242;
     $16$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$2
    }
    $162 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $163 = $3_1;
    $163$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    $164 = $12_1;
    $164$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $12$hi;
    $9_1 = !($12_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $12_1;
    i64toi32_i32$2 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$4 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$4 | 0) == (32 | 0)) {
     $244 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $244 = i64toi32_i32$4
    }
    $171$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $174$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $171$hi;
    i64toi32_i32$3 = $244;
    i64toi32_i32$2 = $174$hi;
    i64toi32_i32$4 = $9_1 << 6 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $9_1 = i64toi32_i32$5;
    i64toi32_i32$0 = $163$hi;
    i64toi32_i32$3 = $164$hi;
    $88($162 | 0, $163 | 0, i64toi32_i32$0 | 0, $164 | 0, i64toi32_i32$3 | 0, i64toi32_i32$5 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$5 | 0) + 16 | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 49;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $246 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     $246 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    $186 = $246;
    $186$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 15;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     $248 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $248 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    }
    $191$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $186$hi;
    i64toi32_i32$1 = $186;
    i64toi32_i32$0 = $191$hi;
    i64toi32_i32$4 = $248;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $13_1 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
    $13$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 17;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $249 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     $249 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $194 = $249;
    $194$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 47;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     $251 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $251 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    }
    $196$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $194$hi;
    i64toi32_i32$1 = $194;
    i64toi32_i32$0 = $196$hi;
    i64toi32_i32$4 = $251;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $11_1 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 17;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $252 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     $252 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $17_1 = $252;
    $17$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$0 = $11_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$1;
   $19$hi = i64toi32_i32$0;
   $207 = i64toi32_i32$1;
   $207$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    $254 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $254 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
   }
   i64toi32_i32$0 = $254;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = -32768;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $1_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $215 = i64toi32_i32$1;
   $215$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $207$hi;
   i64toi32_i32$3 = $207;
   i64toi32_i32$1 = $215$hi;
   i64toi32_i32$4 = $215;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $10_1 = i64toi32_i32$2;
   $10$hi = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    $256 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
    $256 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   }
   $12_1 = $256;
   $12$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $222 = i64toi32_i32$0;
   $222$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$0 = $222$hi;
   i64toi32_i32$4 = $222;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $12$hi;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$3 = 0;
   $227 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   $227$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $20_1 = i64toi32_i32$2;
   $20$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$4 = $15_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $12_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $12$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $236 = i64toi32_i32$4;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$4 = $236$hi;
   i64toi32_i32$5 = $236;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $18_1 = i64toi32_i32$0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$2 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $15_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $15$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $243 = i64toi32_i32$2;
   $243$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$2 = $243$hi;
   i64toi32_i32$5 = $243;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $13_1 = i64toi32_i32$4;
   $13$hi = i64toi32_i32$0;
   $245 = i64toi32_i32$4;
   $245$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $257 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $257 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
   }
   $247 = $257;
   $247$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$5 = $19_1;
   $250 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = $250;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    $258 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $258 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
   }
   $252$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $247$hi;
   i64toi32_i32$0 = $247;
   i64toi32_i32$5 = $252$hi;
   i64toi32_i32$3 = $258;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
   $253 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $253$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $245$hi;
   i64toi32_i32$1 = $245;
   i64toi32_i32$0 = $253$hi;
   i64toi32_i32$3 = $253;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $19_1 = i64toi32_i32$2;
   $19$hi = i64toi32_i32$4;
   $255 = i64toi32_i32$2;
   $255$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$1;
   $21$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$4 = $16$hi;
   i64toi32_i32$5 = $16_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $264 = i64toi32_i32$5;
   $264$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$4 = $21_1;
   i64toi32_i32$5 = $264$hi;
   i64toi32_i32$3 = $264;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $16_1 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $15$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $15$hi;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $269 = i64toi32_i32$4;
   $269$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $16$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$4 = $269$hi;
   i64toi32_i32$3 = $269;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $22_1 = i64toi32_i32$5;
   $22$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$2 = $17_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 2147483647;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $1_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $277 = i64toi32_i32$0;
   $277$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $22$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = $277$hi;
   i64toi32_i32$3 = $277;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $17_1 = i64toi32_i32$4;
   $17$hi = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $259 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $259 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $280$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $255$hi;
   i64toi32_i32$5 = $255;
   i64toi32_i32$2 = $280$hi;
   i64toi32_i32$3 = $259;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $23_1 = i64toi32_i32$0;
   $23$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $227$hi;
   i64toi32_i32$1 = $227;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$0;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$1;
     $24$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $296 = i64toi32_i32$1;
     $296$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$4 = $24_1;
     i64toi32_i32$1 = $296$hi;
     i64toi32_i32$3 = $296;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$3 = $24_1;
     $300 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $301 = $300;
     $301$hi = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $305 = i64toi32_i32$2;
     $305$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = $305$hi;
     i64toi32_i32$4 = $305;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$4 = $2_1;
     $309 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $310$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $301$hi;
     i64toi32_i32$4 = $301;
     i64toi32_i32$5 = $310$hi;
     i64toi32_i32$3 = $309;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $311 = i64toi32_i32$2;
     $311$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $312 = $3_1;
     $312$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$3 = $20_1;
     $315 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $316$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$4 = $18_1;
     $319 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $320$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $316$hi;
     i64toi32_i32$4 = $315;
     i64toi32_i32$0 = $320$hi;
     i64toi32_i32$1 = $319;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $321$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $312$hi;
     i64toi32_i32$3 = $312;
     i64toi32_i32$4 = $321$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2_1 = i64toi32_i32$0;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $325 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $326$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $311$hi;
     i64toi32_i32$1 = $311;
     i64toi32_i32$5 = $326$hi;
     i64toi32_i32$3 = $325;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $327$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $330 = i64toi32_i32$1;
     $330$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $327$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = $330$hi;
     i64toi32_i32$3 = $330;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $331 = i64toi32_i32$5;
     $331$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $12_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $338 = i64toi32_i32$2;
     $338$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$2 = $338$hi;
     i64toi32_i32$3 = $338;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
      $260 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
      $260 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     }
     $344 = $260;
     $344$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $261 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $261 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
     }
     $346$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $344$hi;
     i64toi32_i32$5 = $344;
     i64toi32_i32$4 = $346$hi;
     i64toi32_i32$0 = $261;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $347 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     $347$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $331$hi;
     i64toi32_i32$3 = $331;
     i64toi32_i32$5 = $347$hi;
     i64toi32_i32$0 = $347;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $348 = i64toi32_i32$2;
     $348$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     $349 = $2_1;
     $349$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      $262 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
      $262 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $349$hi;
     i64toi32_i32$1 = $349;
     i64toi32_i32$4 = $351$hi;
     i64toi32_i32$0 = $262;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $1_1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     $355 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $356$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $348$hi;
     i64toi32_i32$0 = $348;
     i64toi32_i32$2 = $356$hi;
     i64toi32_i32$1 = $355;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $357 = i64toi32_i32$4;
     $357$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     $358 = $1_1;
     $358$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $263 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $263 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $360 = $263;
     $360$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$5 = $16_1;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = $21_1;
     $363 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $364$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$3 = $16_1;
     $367 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $368$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = $363;
     i64toi32_i32$5 = $368$hi;
     i64toi32_i32$0 = $367;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $369$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$1 = $17_1;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$0 = $22_1;
     $372 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $373$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $369$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$4 = $373$hi;
     i64toi32_i32$3 = $372;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $265 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $265 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $375$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $360$hi;
     i64toi32_i32$2 = $360;
     i64toi32_i32$1 = $375$hi;
     i64toi32_i32$3 = $265;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $376 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $376$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $358$hi;
     i64toi32_i32$0 = $358;
     i64toi32_i32$2 = $376$hi;
     i64toi32_i32$3 = $376;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $3_1 = i64toi32_i32$4;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1_1;
     $380 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $381$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $357$hi;
     i64toi32_i32$3 = $357;
     i64toi32_i32$5 = $381$hi;
     i64toi32_i32$0 = $380;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $382 = i64toi32_i32$2;
     $382$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     $383 = $3_1;
     $383$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$0 = $13_1;
     $386 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$0 = $23_1;
     i64toi32_i32$3 = $19_1;
     $390 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $391$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $387$hi;
     i64toi32_i32$3 = $386;
     i64toi32_i32$1 = $391$hi;
     i64toi32_i32$4 = $390;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $392$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $383$hi;
     i64toi32_i32$0 = $383;
     i64toi32_i32$3 = $392$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     $396 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $397$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $382$hi;
     i64toi32_i32$4 = $382;
     i64toi32_i32$5 = $397$hi;
     i64toi32_i32$0 = $396;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$4 = 65536;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
     if (!(i64toi32_i32$2 & i64toi32_i32$0 | 0 | i64toi32_i32$4 | 0)) {
      break label$14
     }
     $6_1 = $6_1 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 63;
    i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $266 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
     $266 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
    }
    $3_1 = $266;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     $267 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
     $267 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
    }
    $407 = $267;
    $407$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 63;
    i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $268 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     $268 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    $409$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $407$hi;
    i64toi32_i32$1 = $407;
    i64toi32_i32$2 = $409$hi;
    i64toi32_i32$0 = $268;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $1_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $1$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     $270 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
     $270 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
    }
    $412 = $270;
    $412$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 63;
    i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $271 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     $271 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    $414$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $412$hi;
    i64toi32_i32$1 = $412;
    i64toi32_i32$2 = $414$hi;
    i64toi32_i32$0 = $271;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     $272 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
     $272 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
    }
    $11_1 = $272;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $418 = $3_1;
    $418$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
     $273 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
     $273 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
    }
    $420$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $418$hi;
    i64toi32_i32$1 = $418;
    i64toi32_i32$2 = $420$hi;
    i64toi32_i32$0 = $273;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$2;
   }
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$4 = $14_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $14_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $14$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 < 128 >>> 0) {
       break label$18
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $4$hi;
     $6_1 = $6_1 + 127 | 0;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$4 = $4$hi;
     $88($5_1 + 48 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, $6_1 | 0);
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     $88($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$4 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0);
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$4 = $4$hi;
     $98($5_1 + 16 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, $7_1 | 0);
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     $98($5_1 | 0, $2_1 | 0, i64toi32_i32$4 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
     $454 = i64toi32_i32$1;
     $454$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
     $456 = i64toi32_i32$4;
     $456$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $454$hi;
     i64toi32_i32$2 = $454;
     i64toi32_i32$4 = $456$hi;
     i64toi32_i32$0 = $456;
     i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
     $457 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $457$hi = i64toi32_i32$4;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
     $459 = i64toi32_i32$4;
     $459$hi = i64toi32_i32$2;
     i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $463 = i64toi32_i32$2;
     $463$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $459$hi;
     i64toi32_i32$1 = $459;
     i64toi32_i32$2 = $463$hi;
     i64toi32_i32$0 = $463;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     $465 = (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = 0;
     $466$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $457$hi;
     i64toi32_i32$0 = $457;
     i64toi32_i32$2 = $466$hi;
     i64toi32_i32$1 = $465;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $11_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($5_1 + 32 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $471 = i64toi32_i32$2;
     $471$hi = i64toi32_i32$0;
     i64toi32_i32$4 = ($5_1 + 16 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $475 = i64toi32_i32$0;
     $475$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $471$hi;
     i64toi32_i32$4 = $471;
     i64toi32_i32$0 = $475$hi;
     i64toi32_i32$1 = $475;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $5_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     break label$16;
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
     $274 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $274 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
    }
    $484$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
    $486 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $486$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $484$hi;
    i64toi32_i32$4 = $274;
    i64toi32_i32$0 = $486$hi;
    i64toi32_i32$1 = $486;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$0;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$1 = $14_1;
   i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $14_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $14$hi = i64toi32_i32$4;
   label$19 : {
    i64toi32_i32$4 = $11$hi;
    $492 = !($11_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
     $275 = 1
    } else {
     if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $276 = 0
      } else {
       $276 = 1
      }
      $278 = $276;
     } else {
      $278 = 0
     }
     $275 = $278;
    }
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$4 = -2147483648;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $492 : $275) {
     break label$19
    }
    i64toi32_i32$1 = $14$hi;
    $498 = $14_1;
    $498$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1_1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$4 = $2_1;
    $503 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $504$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $498$hi;
    i64toi32_i32$4 = $498;
    i64toi32_i32$3 = $504$hi;
    i64toi32_i32$2 = $503;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$0;
    $14$hi = i64toi32_i32$5;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$4 = -2147483648;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
    $508 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $508$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$5 = $11_1;
    i64toi32_i32$1 = $508$hi;
    i64toi32_i32$2 = $508;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$4 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$4;
    break label$1;
   }
   i64toi32_i32$4 = $14$hi;
   $512 = $14_1;
   $512$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $515 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $515$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$2 = $515$hi;
   i64toi32_i32$5 = $515;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2_1;
   $519 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $520$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $512$hi;
   i64toi32_i32$5 = $512;
   i64toi32_i32$0 = $520$hi;
   i64toi32_i32$4 = $519;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $14_1 = i64toi32_i32$2;
   $14$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $14$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $14_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $100($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $46_1;
  $4$hi = i64toi32_i32$2;
  $16_1 = $4_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $48_1;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3_1 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $101($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $14$hi = 0, $20_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $87($5_1 | 0, $1_1 | 0, $1$hi | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$3;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $1$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $102($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $43_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $34_1 = 0, $34$hi = 0, $37_1 = 0, $39_1 = 0, $44_1 = 0, $44$hi = 0, $46$hi = 0, $74_1 = 0, $74$hi = 0, $78$hi = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $100$hi = 0, $107_1 = 0, $107$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $43_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $43_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $43_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $34_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $34$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = $34$hi;
    i64toi32_i32$2 = $34_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $37_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $39_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $37_1 : $39_1) {
     break label$4
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $46_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $44_1 = $46_1;
    $44$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $47_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $47_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $46$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$5 = $44_1;
    i64toi32_i32$2 = $46$hi;
    i64toi32_i32$4 = $47_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $48_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $48_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   $88($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   $98($2_1 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $49_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $74_1 = $49_1;
   $74$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $50_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $78$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74_1;
   i64toi32_i32$0 = $78$hi;
   i64toi32_i32$2 = $50_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$0;
   label$5 : {
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $81_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$0 = $83_1;
    i64toi32_i32$5 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$2 = $81_1;
    i64toi32_i32$5 = $90$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $100$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $107_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $107$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = $107$hi;
  i64toi32_i32$4 = $107_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $103($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $5$hi = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $20_1 = 0, $24_1 = 0, $34_1 = 0, $34$hi = 0, $42_1 = 0, $44_1 = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $93_1 = 0, $97_1 = 0, $105_1 = 0, $105$hi = 0, $114_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = $1_1 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1065418752;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = -1082064896;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $37_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $3_1 = $37_1;
    label$3 : {
     i64toi32_i32$4 = $0$hi;
     $20_1 = !($0_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $5_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 16777216;
     $24_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 16777216;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20_1 : $24_1) {
      break label$3
     }
     $4_1 = $3_1 + 1073741825 | 0;
     break label$1;
    }
    $4_1 = $3_1 + 1073741824 | 0;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $34_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $34$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$3 = $34_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$1
    }
    $4_1 = $4_1 + ($3_1 & 1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $42_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$1 = 0;
    $44_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42_1 : $44_1) {
     break label$4
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 25;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $38_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $38_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4_1 = $38_1 & 4194303 | 0 | 2143289344 | 0;
    break label$1;
   }
   $4_1 = 2139095040;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$5 = 1082064895;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $39_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $39_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $3_1 = $39_1;
   if ($3_1 >>> 0 < 16145 >>> 0) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   $88($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$3 | 0, $3_1 + -16129 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   $98($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0, 16257 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 25;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $40_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $40_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $4_1 = $40_1;
   label$5 : {
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$1;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$1;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$3 = $83_1;
    i64toi32_i32$1 = $87$hi;
    i64toi32_i32$5 = $87_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$5 = $81_1;
    i64toi32_i32$1 = $90$hi;
    i64toi32_i32$3 = $89_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$1;
    $93_1 = !($0_1 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 33554431;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $5_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    $97_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 16777216;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93_1 : $97_1) {
     break label$5
    }
    $4_1 = $4_1 + 1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 16777216;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $105_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $105$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$4 = $105$hi;
   i64toi32_i32$5 = $105_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
    break label$1
   }
   $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
  }
  global$0 = $2_1 + 32 | 0;
  $114_1 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $41_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $114_1 | ($41_1 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function $104($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $11_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $1_1 = 0, $79_1 = 0, $92_1 = 0, $103_1 = 0, $111_1 = 0, $119_1 = 0, $210 = 0, $221 = 0, $229 = 0, $237 = 0, $272 = 0, $339 = 0, $346 = 0, $353 = 0, $444 = 0, $455 = 0, $463 = 0, $471 = 0, $1157 = 0, $1164 = 0, $1171 = 0, $1293 = 0, $1295 = 0, $1356 = 0, $1363 = 0, $1370 = 0, $1606 = 0, $1613 = 0, $1620 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if ($0_1 >>> 0 > 244 >>> 0) {
               break label$12
              }
              label$13 : {
               $2_1 = HEAP32[(0 + 97344 | 0) >> 2] | 0;
               $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
               $4_1 = $3_1 >>> 3 | 0;
               $0_1 = $2_1 >>> $4_1 | 0;
               if (!($0_1 & 3 | 0)) {
                break label$13
               }
               $5_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
               $6_1 = $5_1 << 3 | 0;
               $4_1 = HEAP32[($6_1 + 97392 | 0) >> 2] | 0;
               $0_1 = $4_1 + 8 | 0;
               label$14 : {
                label$15 : {
                 $3_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $6_1 = $6_1 + 97384 | 0;
                 if (($3_1 | 0) != ($6_1 | 0)) {
                  break label$15
                 }
                 HEAP32[(0 + 97344 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
                 break label$14;
                }
                HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
                HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
               }
               $5_1 = $5_1 << 3 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
               $4_1 = $4_1 + $5_1 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
               break label$1;
              }
              $7_1 = HEAP32[(0 + 97352 | 0) >> 2] | 0;
              if ($3_1 >>> 0 <= $7_1 >>> 0) {
               break label$11
              }
              label$16 : {
               if (!$0_1) {
                break label$16
               }
               label$17 : {
                label$18 : {
                 $79_1 = $0_1 << $4_1 | 0;
                 $0_1 = 2 << $4_1 | 0;
                 $0_1 = $79_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $92_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $4_1 = $92_1 >>> $0_1 | 0;
                 $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                 $103_1 = $5_1 | $0_1 | 0;
                 $0_1 = $4_1 >>> $5_1 | 0;
                 $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $111_1 = $103_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $119_1 = $111_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $5_1 = ($119_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                 $6_1 = $5_1 << 3 | 0;
                 $4_1 = HEAP32[($6_1 + 97392 | 0) >> 2] | 0;
                 $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $6_1 = $6_1 + 97384 | 0;
                 if (($0_1 | 0) != ($6_1 | 0)) {
                  break label$18
                 }
                 $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
                 HEAP32[(0 + 97344 | 0) >> 2] = $2_1;
                 break label$17;
                }
                HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
                HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
               }
               $0_1 = $4_1 + 8 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               $6_1 = $4_1 + $3_1 | 0;
               $8_1 = $5_1 << 3 | 0;
               $5_1 = $8_1 - $3_1 | 0;
               HEAP32[($6_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
               HEAP32[($4_1 + $8_1 | 0) >> 2] = $5_1;
               label$19 : {
                if (!$7_1) {
                 break label$19
                }
                $8_1 = $7_1 >>> 3 | 0;
                $3_1 = ($8_1 << 3 | 0) + 97384 | 0;
                $4_1 = HEAP32[(0 + 97364 | 0) >> 2] | 0;
                label$20 : {
                 label$21 : {
                  $8_1 = 1 << $8_1 | 0;
                  if ($2_1 & $8_1 | 0) {
                   break label$21
                  }
                  HEAP32[(0 + 97344 | 0) >> 2] = $2_1 | $8_1 | 0;
                  $8_1 = $3_1;
                  break label$20;
                 }
                 $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
               }
               HEAP32[(0 + 97364 | 0) >> 2] = $6_1;
               HEAP32[(0 + 97352 | 0) >> 2] = $5_1;
               break label$1;
              }
              $9_1 = HEAP32[(0 + 97348 | 0) >> 2] | 0;
              if (!$9_1) {
               break label$11
              }
              $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
              $210 = $0_1;
              $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
              $4_1 = $210 >>> $0_1 | 0;
              $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
              $221 = $5_1 | $0_1 | 0;
              $0_1 = $4_1 >>> $5_1 | 0;
              $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
              $229 = $221 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
              $237 = $229 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
              $6_1 = HEAP32[(((($237 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 97648 | 0) >> 2] | 0;
              $4_1 = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
              $5_1 = $6_1;
              label$22 : {
               label$23 : while (1) {
                label$24 : {
                 $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                 if ($0_1) {
                  break label$24
                 }
                 $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                 if (!$0_1) {
                  break label$22
                 }
                }
                $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $272 = $5_1;
                $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
                $4_1 = $5_1 ? $272 : $4_1;
                $6_1 = $5_1 ? $0_1 : $6_1;
                $5_1 = $0_1;
                continue label$23;
               };
              }
              $10_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
              label$25 : {
               $8_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
               if (($8_1 | 0) == ($6_1 | 0)) {
                break label$25
               }
               $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
               HEAP32[(0 + 97360 | 0) >> 2] | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
               HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
               break label$2;
              }
              label$26 : {
               $5_1 = $6_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                break label$26
               }
               $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$10
               }
               $5_1 = $6_1 + 16 | 0;
              }
              label$27 : while (1) {
               $11_1 = $5_1;
               $8_1 = $0_1;
               $5_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                continue label$27
               }
               $5_1 = $8_1 + 16 | 0;
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$27
               }
               break label$27;
              };
              HEAP32[$11_1 >> 2] = 0;
              break label$2;
             }
             $3_1 = -1;
             if ($0_1 >>> 0 > -65 >>> 0) {
              break label$11
             }
             $0_1 = $0_1 + 11 | 0;
             $3_1 = $0_1 & -8 | 0;
             $7_1 = HEAP32[(0 + 97348 | 0) >> 2] | 0;
             if (!$7_1) {
              break label$11
             }
             $11_1 = 0;
             label$28 : {
              if ($3_1 >>> 0 < 256 >>> 0) {
               break label$28
              }
              $11_1 = 31;
              if ($3_1 >>> 0 > 16777215 >>> 0) {
               break label$28
              }
              $0_1 = $0_1 >>> 8 | 0;
              $339 = $0_1;
              $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
              $4_1 = $339 << $0_1 | 0;
              $346 = $4_1;
              $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
              $5_1 = $346 << $4_1 | 0;
              $353 = $5_1;
              $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
              $0_1 = (($353 << $5_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $5_1 | 0) | 0;
              $11_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
             }
             $4_1 = 0 - $3_1 | 0;
             label$29 : {
              label$30 : {
               label$31 : {
                label$32 : {
                 $5_1 = HEAP32[(($11_1 << 2 | 0) + 97648 | 0) >> 2] | 0;
                 if ($5_1) {
                  break label$32
                 }
                 $0_1 = 0;
                 $8_1 = 0;
                 break label$31;
                }
                $0_1 = 0;
                $6_1 = $3_1 << (($11_1 | 0) == (31 | 0) ? 0 : 25 - ($11_1 >>> 1 | 0) | 0) | 0;
                $8_1 = 0;
                label$33 : while (1) {
                 label$34 : {
                  $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                  if ($2_1 >>> 0 >= $4_1 >>> 0) {
                   break label$34
                  }
                  $4_1 = $2_1;
                  $8_1 = $5_1;
                  if ($4_1) {
                   break label$34
                  }
                  $4_1 = 0;
                  $8_1 = $5_1;
                  $0_1 = $5_1;
                  break label$30;
                 }
                 $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                 $5_1 = HEAP32[(($5_1 + (($6_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                 $0_1 = $2_1 ? (($2_1 | 0) == ($5_1 | 0) ? $0_1 : $2_1) : $0_1;
                 $6_1 = $6_1 << 1 | 0;
                 if ($5_1) {
                  continue label$33
                 }
                 break label$33;
                };
               }
               label$35 : {
                if ($0_1 | $8_1 | 0) {
                 break label$35
                }
                $8_1 = 0;
                $0_1 = 2 << $11_1 | 0;
                $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                if (!$0_1) {
                 break label$11
                }
                $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                $444 = $0_1;
                $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                $5_1 = $444 >>> $0_1 | 0;
                $6_1 = ($5_1 >>> 5 | 0) & 8 | 0;
                $455 = $6_1 | $0_1 | 0;
                $0_1 = $5_1 >>> $6_1 | 0;
                $5_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                $463 = $455 | $5_1 | 0;
                $0_1 = $0_1 >>> $5_1 | 0;
                $5_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                $471 = $463 | $5_1 | 0;
                $0_1 = $0_1 >>> $5_1 | 0;
                $5_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                $0_1 = HEAP32[(((($471 | $5_1 | 0) + ($0_1 >>> $5_1 | 0) | 0) << 2 | 0) + 97648 | 0) >> 2] | 0;
               }
               if (!$0_1) {
                break label$29
               }
              }
              label$36 : while (1) {
               $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $6_1 = $2_1 >>> 0 < $4_1 >>> 0;
               label$37 : {
                $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                if ($5_1) {
                 break label$37
                }
                $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
               }
               $4_1 = $6_1 ? $2_1 : $4_1;
               $8_1 = $6_1 ? $0_1 : $8_1;
               $0_1 = $5_1;
               if ($0_1) {
                continue label$36
               }
               break label$36;
              };
             }
             if (!$8_1) {
              break label$11
             }
             if ($4_1 >>> 0 >= ((HEAP32[(0 + 97352 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
              break label$11
             }
             $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
             label$38 : {
              $6_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
              if (($6_1 | 0) == ($8_1 | 0)) {
               break label$38
              }
              $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
              HEAP32[(0 + 97360 | 0) >> 2] | 0;
              HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
              HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
              break label$3;
             }
             label$39 : {
              $5_1 = $8_1 + 20 | 0;
              $0_1 = HEAP32[$5_1 >> 2] | 0;
              if ($0_1) {
               break label$39
              }
              $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$9
              }
              $5_1 = $8_1 + 16 | 0;
             }
             label$40 : while (1) {
              $2_1 = $5_1;
              $6_1 = $0_1;
              $5_1 = $0_1 + 20 | 0;
              $0_1 = HEAP32[$5_1 >> 2] | 0;
              if ($0_1) {
               continue label$40
              }
              $5_1 = $6_1 + 16 | 0;
              $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
              if ($0_1) {
               continue label$40
              }
              break label$40;
             };
             HEAP32[$2_1 >> 2] = 0;
             break label$3;
            }
            label$41 : {
             $0_1 = HEAP32[(0 + 97352 | 0) >> 2] | 0;
             if ($0_1 >>> 0 < $3_1 >>> 0) {
              break label$41
             }
             $4_1 = HEAP32[(0 + 97364 | 0) >> 2] | 0;
             label$42 : {
              label$43 : {
               $5_1 = $0_1 - $3_1 | 0;
               if ($5_1 >>> 0 < 16 >>> 0) {
                break label$43
               }
               HEAP32[(0 + 97352 | 0) >> 2] = $5_1;
               $6_1 = $4_1 + $3_1 | 0;
               HEAP32[(0 + 97364 | 0) >> 2] = $6_1;
               HEAP32[($6_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
               HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               break label$42;
              }
              HEAP32[(0 + 97364 | 0) >> 2] = 0;
              HEAP32[(0 + 97352 | 0) >> 2] = 0;
              HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
              $0_1 = $4_1 + $0_1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
             }
             $0_1 = $4_1 + 8 | 0;
             break label$1;
            }
            label$44 : {
             $6_1 = HEAP32[(0 + 97356 | 0) >> 2] | 0;
             if ($6_1 >>> 0 <= $3_1 >>> 0) {
              break label$44
             }
             $4_1 = $6_1 - $3_1 | 0;
             HEAP32[(0 + 97356 | 0) >> 2] = $4_1;
             $0_1 = HEAP32[(0 + 97368 | 0) >> 2] | 0;
             $5_1 = $0_1 + $3_1 | 0;
             HEAP32[(0 + 97368 | 0) >> 2] = $5_1;
             HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
             HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
             $0_1 = $0_1 + 8 | 0;
             break label$1;
            }
            label$45 : {
             label$46 : {
              if (!(HEAP32[(0 + 97816 | 0) >> 2] | 0)) {
               break label$46
              }
              $4_1 = HEAP32[(0 + 97824 | 0) >> 2] | 0;
              break label$45;
             }
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = -1;
             HEAP32[(i64toi32_i32$1 + 97828 | 0) >> 2] = -1;
             HEAP32[(i64toi32_i32$1 + 97832 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 4096;
             HEAP32[(i64toi32_i32$1 + 97820 | 0) >> 2] = 4096;
             HEAP32[(i64toi32_i32$1 + 97824 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(0 + 97816 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
             HEAP32[(0 + 97836 | 0) >> 2] = 0;
             HEAP32[(0 + 97788 | 0) >> 2] = 0;
             $4_1 = 4096;
            }
            $0_1 = 0;
            $7_1 = $3_1 + 47 | 0;
            $2_1 = $4_1 + $7_1 | 0;
            $11_1 = 0 - $4_1 | 0;
            $8_1 = $2_1 & $11_1 | 0;
            if ($8_1 >>> 0 <= $3_1 >>> 0) {
             break label$1
            }
            $0_1 = 0;
            label$47 : {
             $4_1 = HEAP32[(0 + 97784 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$47
             }
             $5_1 = HEAP32[(0 + 97776 | 0) >> 2] | 0;
             $9_1 = $5_1 + $8_1 | 0;
             if ($9_1 >>> 0 <= $5_1 >>> 0) {
              break label$1
             }
             if ($9_1 >>> 0 > $4_1 >>> 0) {
              break label$1
             }
            }
            if ((HEAPU8[(0 + 97788 | 0) >> 0] | 0) & 4 | 0) {
             break label$6
            }
            label$48 : {
             label$49 : {
              label$50 : {
               $4_1 = HEAP32[(0 + 97368 | 0) >> 2] | 0;
               if (!$4_1) {
                break label$50
               }
               $0_1 = 97792;
               label$51 : while (1) {
                label$52 : {
                 $5_1 = HEAP32[$0_1 >> 2] | 0;
                 if ($5_1 >>> 0 > $4_1 >>> 0) {
                  break label$52
                 }
                 if (($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                  break label$49
                 }
                }
                $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$51
                }
                break label$51;
               };
              }
              $6_1 = $111(0 | 0) | 0;
              if (($6_1 | 0) == (-1 | 0)) {
               break label$7
              }
              $2_1 = $8_1;
              label$53 : {
               $0_1 = HEAP32[(0 + 97820 | 0) >> 2] | 0;
               $4_1 = $0_1 + -1 | 0;
               if (!($4_1 & $6_1 | 0)) {
                break label$53
               }
               $2_1 = ($8_1 - $6_1 | 0) + (($4_1 + $6_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
              }
              if ($2_1 >>> 0 <= $3_1 >>> 0) {
               break label$7
              }
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              label$54 : {
               $0_1 = HEAP32[(0 + 97784 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$54
               }
               $4_1 = HEAP32[(0 + 97776 | 0) >> 2] | 0;
               $5_1 = $4_1 + $2_1 | 0;
               if ($5_1 >>> 0 <= $4_1 >>> 0) {
                break label$7
               }
               if ($5_1 >>> 0 > $0_1 >>> 0) {
                break label$7
               }
              }
              $0_1 = $111($2_1 | 0) | 0;
              if (($0_1 | 0) != ($6_1 | 0)) {
               break label$48
              }
              break label$5;
             }
             $2_1 = ($2_1 - $6_1 | 0) & $11_1 | 0;
             if ($2_1 >>> 0 > 2147483646 >>> 0) {
              break label$7
             }
             $6_1 = $111($2_1 | 0) | 0;
             if (($6_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
              break label$8
             }
             $0_1 = $6_1;
            }
            label$55 : {
             if (($0_1 | 0) == (-1 | 0)) {
              break label$55
             }
             if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
              break label$55
             }
             label$56 : {
              $4_1 = HEAP32[(0 + 97824 | 0) >> 2] | 0;
              $4_1 = (($7_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
              if ($4_1 >>> 0 <= 2147483646 >>> 0) {
               break label$56
              }
              $6_1 = $0_1;
              break label$5;
             }
             label$57 : {
              if (($111($4_1 | 0) | 0 | 0) == (-1 | 0)) {
               break label$57
              }
              $2_1 = $4_1 + $2_1 | 0;
              $6_1 = $0_1;
              break label$5;
             }
             $111(0 - $2_1 | 0 | 0) | 0;
             break label$7;
            }
            $6_1 = $0_1;
            if (($0_1 | 0) != (-1 | 0)) {
             break label$5
            }
            break label$7;
           }
           $8_1 = 0;
           break label$2;
          }
          $6_1 = 0;
          break label$3;
         }
         if (($6_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 97788 | 0) >> 2] = HEAP32[(0 + 97788 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $6_1 = $111($8_1 | 0) | 0;
       $0_1 = $111(0 | 0) | 0;
       if (($6_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if ($6_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       $2_1 = $0_1 - $6_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 97776 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 97776 | 0) >> 2] = $0_1;
      label$58 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 97780 | 0) >> 2] | 0) >>> 0) {
        break label$58
       }
       HEAP32[(0 + 97780 | 0) >> 2] = $0_1;
      }
      label$59 : {
       label$60 : {
        label$61 : {
         label$62 : {
          $4_1 = HEAP32[(0 + 97368 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$62
          }
          $0_1 = 97792;
          label$63 : while (1) {
           $5_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($6_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
            break label$61
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$63
           }
           break label$60;
          };
         }
         label$64 : {
          label$65 : {
           $0_1 = HEAP32[(0 + 97360 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$65
           }
           if ($6_1 >>> 0 >= $0_1 >>> 0) {
            break label$64
           }
          }
          HEAP32[(0 + 97360 | 0) >> 2] = $6_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 97796 | 0) >> 2] = $2_1;
         HEAP32[(0 + 97792 | 0) >> 2] = $6_1;
         HEAP32[(0 + 97376 | 0) >> 2] = -1;
         HEAP32[(0 + 97380 | 0) >> 2] = HEAP32[(0 + 97816 | 0) >> 2] | 0;
         HEAP32[(0 + 97804 | 0) >> 2] = 0;
         label$66 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $5_1 = $4_1 + 97384 | 0;
          HEAP32[($4_1 + 97392 | 0) >> 2] = $5_1;
          HEAP32[($4_1 + 97396 | 0) >> 2] = $5_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$66
          }
          break label$66;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0;
         $5_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 97356 | 0) >> 2] = $5_1;
         $4_1 = $6_1 + $4_1 | 0;
         HEAP32[(0 + 97368 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
         HEAP32[(($6_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 97372 | 0) >> 2] = HEAP32[(0 + 97832 | 0) >> 2] | 0;
         break label$59;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$60
        }
        if ($5_1 >>> 0 > $4_1 >>> 0) {
         break label$60
        }
        if ($6_1 >>> 0 <= $4_1 >>> 0) {
         break label$60
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $5_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 97368 | 0) >> 2] = $5_1;
        $6_1 = (HEAP32[(0 + 97356 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $6_1 - $0_1 | 0;
        HEAP32[(0 + 97356 | 0) >> 2] = $0_1;
        HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $6_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 97372 | 0) >> 2] = HEAP32[(0 + 97832 | 0) >> 2] | 0;
        break label$59;
       }
       label$67 : {
        $8_1 = HEAP32[(0 + 97360 | 0) >> 2] | 0;
        if ($6_1 >>> 0 >= $8_1 >>> 0) {
         break label$67
        }
        HEAP32[(0 + 97360 | 0) >> 2] = $6_1;
        $8_1 = $6_1;
       }
       $5_1 = $6_1 + $2_1 | 0;
       $0_1 = 97792;
       label$68 : {
        label$69 : {
         label$70 : {
          label$71 : {
           label$72 : {
            label$73 : {
             label$74 : {
              label$75 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
                break label$74
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$75
               }
               break label$73;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$72
             }
            }
            $0_1 = 97792;
            label$76 : while (1) {
             label$77 : {
              $5_1 = HEAP32[$0_1 >> 2] | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$77
              }
              $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$71
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$76;
            };
           }
           HEAP32[$0_1 >> 2] = $6_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $11_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($11_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $2_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           $3_1 = $11_1 + $3_1 | 0;
           $5_1 = $2_1 - $3_1 | 0;
           label$78 : {
            if (($4_1 | 0) != ($2_1 | 0)) {
             break label$78
            }
            HEAP32[(0 + 97368 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 97356 | 0) >> 2] | 0) + $5_1 | 0;
            HEAP32[(0 + 97356 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$69;
           }
           label$79 : {
            if ((HEAP32[(0 + 97364 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
             break label$79
            }
            HEAP32[(0 + 97364 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 97352 | 0) >> 2] | 0) + $5_1 | 0;
            HEAP32[(0 + 97352 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($3_1 + $0_1 | 0) >> 2] = $0_1;
            break label$69;
           }
           label$80 : {
            $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            if (($0_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$80
            }
            $7_1 = $0_1 & -8 | 0;
            label$81 : {
             label$82 : {
              if ($0_1 >>> 0 > 255 >>> 0) {
               break label$82
              }
              $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
              $8_1 = $0_1 >>> 3 | 0;
              $6_1 = ($8_1 << 3 | 0) + 97384 | 0;
              label$83 : {
               $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($0_1 | 0) != ($4_1 | 0)) {
                break label$83
               }
               HEAP32[(0 + 97344 | 0) >> 2] = (HEAP32[(0 + 97344 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
               break label$81;
              }
              HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
              break label$81;
             }
             $9_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
             label$84 : {
              label$85 : {
               $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($6_1 | 0) == ($2_1 | 0)) {
                break label$85
               }
               $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
               HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
               break label$84;
              }
              label$86 : {
               $0_1 = $2_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$86
               }
               $0_1 = $2_1 + 16 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$86
               }
               $6_1 = 0;
               break label$84;
              }
              label$87 : while (1) {
               $8_1 = $0_1;
               $6_1 = $4_1;
               $0_1 = $4_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                continue label$87
               }
               $0_1 = $6_1 + 16 | 0;
               $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
               if ($4_1) {
                continue label$87
               }
               break label$87;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$81
             }
             label$88 : {
              label$89 : {
               $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
               $0_1 = ($4_1 << 2 | 0) + 97648 | 0;
               if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                break label$89
               }
               HEAP32[$0_1 >> 2] = $6_1;
               if ($6_1) {
                break label$88
               }
               HEAP32[(0 + 97348 | 0) >> 2] = (HEAP32[(0 + 97348 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
               break label$81;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
              if (!$6_1) {
               break label$81
              }
             }
             HEAP32[($6_1 + 24 | 0) >> 2] = $9_1;
             label$90 : {
              $0_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$90
              }
              HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
             }
             $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
             if (!$0_1) {
              break label$81
             }
             HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
             HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
            }
            $5_1 = $7_1 + $5_1 | 0;
            $2_1 = $2_1 + $7_1 | 0;
           }
           HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
           HEAP32[($3_1 + $5_1 | 0) >> 2] = $5_1;
           label$91 : {
            if ($5_1 >>> 0 > 255 >>> 0) {
             break label$91
            }
            $4_1 = $5_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 97384 | 0;
            label$92 : {
             label$93 : {
              $5_1 = HEAP32[(0 + 97344 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($5_1 & $4_1 | 0) {
               break label$93
              }
              HEAP32[(0 + 97344 | 0) >> 2] = $5_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$92;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
            HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
            break label$69;
           }
           $0_1 = 31;
           label$94 : {
            if ($5_1 >>> 0 > 16777215 >>> 0) {
             break label$94
            }
            $0_1 = $5_1 >>> 8 | 0;
            $1157 = $0_1;
            $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $4_1 = $1157 << $0_1 | 0;
            $1164 = $4_1;
            $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $6_1 = $1164 << $4_1 | 0;
            $1171 = $6_1;
            $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $0_1 = (($1171 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0) | 0;
            $0_1 = ($0_1 << 1 | 0 | (($5_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
           i64toi32_i32$1 = $3_1;
           i64toi32_i32$0 = 0;
           HEAP32[($3_1 + 16 | 0) >> 2] = 0;
           HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $4_1 = ($0_1 << 2 | 0) + 97648 | 0;
           label$95 : {
            label$96 : {
             $6_1 = HEAP32[(0 + 97348 | 0) >> 2] | 0;
             $8_1 = 1 << $0_1 | 0;
             if ($6_1 & $8_1 | 0) {
              break label$96
             }
             HEAP32[(0 + 97348 | 0) >> 2] = $6_1 | $8_1 | 0;
             HEAP32[$4_1 >> 2] = $3_1;
             HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
             break label$95;
            }
            $0_1 = $5_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
            $6_1 = HEAP32[$4_1 >> 2] | 0;
            label$97 : while (1) {
             $4_1 = $6_1;
             if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($5_1 | 0)) {
              break label$70
             }
             $6_1 = $0_1 >>> 29 | 0;
             $0_1 = $0_1 << 1 | 0;
             $8_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
             $6_1 = HEAP32[$8_1 >> 2] | 0;
             if ($6_1) {
              continue label$97
             }
             break label$97;
            };
            HEAP32[$8_1 >> 2] = $3_1;
            HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
           }
           HEAP32[($3_1 + 12 | 0) >> 2] = $3_1;
           HEAP32[($3_1 + 8 | 0) >> 2] = $3_1;
           break label$69;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0;
          $11_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 97356 | 0) >> 2] = $11_1;
          $8_1 = $6_1 + $8_1 | 0;
          HEAP32[(0 + 97368 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $11_1 | 1 | 0;
          HEAP32[(($6_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 97372 | 0) >> 2] = HEAP32[(0 + 97832 | 0) >> 2] | 0;
          $0_1 = ($5_1 + (($5_1 + -39 | 0) & 7 | 0 ? (39 - $5_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 97800 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 97804 | 0) >> 2] | 0;
          $1293 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1293;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 97792 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 97796 | 0) >> 2] | 0;
          $1295 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1295;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 97800 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 97796 | 0) >> 2] = $2_1;
          HEAP32[(0 + 97792 | 0) >> 2] = $6_1;
          HEAP32[(0 + 97804 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$98 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $6_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($5_1 >>> 0 > $6_1 >>> 0) {
            continue label$98
           }
           break label$98;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$59
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$99 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$99
           }
           $5_1 = $2_1 >>> 3 | 0;
           $0_1 = ($5_1 << 3 | 0) + 97384 | 0;
           label$100 : {
            label$101 : {
             $6_1 = HEAP32[(0 + 97344 | 0) >> 2] | 0;
             $5_1 = 1 << $5_1 | 0;
             if ($6_1 & $5_1 | 0) {
              break label$101
             }
             HEAP32[(0 + 97344 | 0) >> 2] = $6_1 | $5_1 | 0;
             $5_1 = $0_1;
             break label$100;
            }
            $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
           break label$59;
          }
          $0_1 = 31;
          label$102 : {
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$102
           }
           $0_1 = $2_1 >>> 8 | 0;
           $1356 = $0_1;
           $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $5_1 = $1356 << $0_1 | 0;
           $1363 = $5_1;
           $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $6_1 = $1363 << $5_1 | 0;
           $1370 = $6_1;
           $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1370 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $6_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $5_1 = ($0_1 << 2 | 0) + 97648 | 0;
          label$103 : {
           label$104 : {
            $6_1 = HEAP32[(0 + 97348 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($6_1 & $8_1 | 0) {
             break label$104
            }
            HEAP32[(0 + 97348 | 0) >> 2] = $6_1 | $8_1 | 0;
            HEAP32[$5_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
            break label$103;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $6_1 = HEAP32[$5_1 >> 2] | 0;
           label$105 : while (1) {
            $5_1 = $6_1;
            if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$68
            }
            $6_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($5_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
            $6_1 = HEAP32[$8_1 >> 2] | 0;
            if ($6_1) {
             continue label$105
            }
            break label$105;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$59;
         }
         $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 24 | 0) >> 2] = 0;
         HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $11_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 97356 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 97356 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 97368 | 0) >> 2] | 0;
      $5_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 97368 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     HEAP32[($65() | 0) >> 2] = 48;
     $0_1 = 0;
     break label$1;
    }
    label$106 : {
     if (!$11_1) {
      break label$106
     }
     label$107 : {
      label$108 : {
       $5_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($5_1 << 2 | 0) + 97648 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$108
       }
       HEAP32[$0_1 >> 2] = $6_1;
       if ($6_1) {
        break label$107
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       HEAP32[(0 + 97348 | 0) >> 2] = $7_1;
       break label$106;
      }
      HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$106
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $11_1;
     label$109 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$109
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$106
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
    }
    label$110 : {
     label$111 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$111
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$110;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     $6_1 = $8_1 + $3_1 | 0;
     HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($6_1 + $4_1 | 0) >> 2] = $4_1;
     label$112 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$112
      }
      $4_1 = $4_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 97384 | 0;
      label$113 : {
       label$114 : {
        $5_1 = HEAP32[(0 + 97344 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($5_1 & $4_1 | 0) {
         break label$114
        }
        HEAP32[(0 + 97344 | 0) >> 2] = $5_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$113;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
      break label$110;
     }
     $0_1 = 31;
     label$115 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$115
      }
      $0_1 = $4_1 >>> 8 | 0;
      $1606 = $0_1;
      $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $5_1 = $1606 << $0_1 | 0;
      $1613 = $5_1;
      $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1613 << $5_1 | 0;
      $1620 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1620 << $3_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($4_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$0 = 0;
     HEAP32[($6_1 + 16 | 0) >> 2] = 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5_1 = ($0_1 << 2 | 0) + 97648 | 0;
     label$116 : {
      label$117 : {
       label$118 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$118
        }
        HEAP32[(0 + 97348 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$5_1 >> 2] = $6_1;
        HEAP32[($6_1 + 24 | 0) >> 2] = $5_1;
        break label$117;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       label$119 : while (1) {
        $5_1 = $3_1;
        if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$116
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $2_1 = ($5_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        if ($3_1) {
         continue label$119
        }
        break label$119;
       };
       HEAP32[$2_1 >> 2] = $6_1;
       HEAP32[($6_1 + 24 | 0) >> 2] = $5_1;
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 8 | 0) >> 2] = $6_1;
      break label$110;
     }
     $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
     HEAP32[($6_1 + 24 | 0) >> 2] = 0;
     HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$120 : {
    if (!$10_1) {
     break label$120
    }
    label$121 : {
     label$122 : {
      $5_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($5_1 << 2 | 0) + 97648 | 0;
      if (($6_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$122
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$121
      }
      HEAP32[(0 + 97348 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
      break label$120;
     }
     HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($6_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$120
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $10_1;
    label$123 : {
     $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$123
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$120
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$124 : {
    label$125 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$125
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $6_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$124;
    }
    HEAP32[($6_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    $5_1 = $6_1 + $3_1 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($5_1 + $4_1 | 0) >> 2] = $4_1;
    label$126 : {
     if (!$7_1) {
      break label$126
     }
     $8_1 = $7_1 >>> 3 | 0;
     $3_1 = ($8_1 << 3 | 0) + 97384 | 0;
     $0_1 = HEAP32[(0 + 97364 | 0) >> 2] | 0;
     label$127 : {
      label$128 : {
       $8_1 = 1 << $8_1 | 0;
       if ($8_1 & $2_1 | 0) {
        break label$128
       }
       HEAP32[(0 + 97344 | 0) >> 2] = $8_1 | $2_1 | 0;
       $8_1 = $3_1;
       break label$127;
      }
      $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
    }
    HEAP32[(0 + 97364 | 0) >> 2] = $5_1;
    HEAP32[(0 + 97352 | 0) >> 2] = $4_1;
   }
   $0_1 = $6_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $105($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $6_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $379 = 0, $386 = 0, $393 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 97360 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 97364 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      $5_1 = $2_1 >>> 3 | 0;
      $6_1 = ($5_1 << 3 | 0) + 97384 | 0;
      label$5 : {
       $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($2_1 | 0) != ($4_1 | 0)) {
        break label$5
       }
       HEAP32[(0 + 97344 | 0) >> 2] = (HEAP32[(0 + 97344 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($1_1 | 0)) {
        break label$7
       }
       $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
       break label$6;
      }
      label$8 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $6_1 = 0;
       break label$6;
      }
      label$9 : while (1) {
       $5_1 = $2_1;
       $6_1 = $4_1;
       $2_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       $2_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[$5_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$10 : {
      label$11 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 97648 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$11
       }
       HEAP32[$2_1 >> 2] = $6_1;
       if ($6_1) {
        break label$10
       }
       HEAP32[(0 + 97348 | 0) >> 2] = (HEAP32[(0 + 97348 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$12 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$12
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 97352 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$13 : {
    label$14 : {
     if ($2_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if ((HEAP32[(0 + 97368 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$15
      }
      HEAP32[(0 + 97368 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 97356 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 97356 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 97364 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 97352 | 0) >> 2] = 0;
      HEAP32[(0 + 97364 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if ((HEAP32[(0 + 97364 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$16
      }
      HEAP32[(0 + 97364 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 97352 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 97352 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$17 : {
      label$18 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       $5_1 = $2_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 97384 | 0;
       label$19 : {
        $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($2_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        HEAP32[(0 + 97344 | 0) >> 2] = (HEAP32[(0 + 97344 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 97360 | 0) >> 2] | 0;
        HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
        break label$20;
       }
       label$22 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $2_1;
        $6_1 = $4_1;
        $2_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        $2_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 97648 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$25
        }
        HEAP32[$2_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        HEAP32[(0 + 97348 | 0) >> 2] = (HEAP32[(0 + 97348 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 97364 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 97352 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$27 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 97384 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 97344 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 97344 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$28;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 31;
   label$30 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $2_1 = $0_1 >>> 8 | 0;
    $379 = $2_1;
    $2_1 = (($2_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $379 << $2_1 | 0;
    $386 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $386 << $4_1 | 0;
    $393 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($393 << $6_1 | 0) >>> 15 | 0) - ($2_1 | $4_1 | 0 | $6_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 97648 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      label$34 : {
       $6_1 = HEAP32[(0 + 97348 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($6_1 & $3_1 | 0) {
        break label$34
       }
       HEAP32[(0 + 97348 | 0) >> 2] = $6_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$33;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $6_1 = HEAP32[$4_1 >> 2] | 0;
      label$35 : while (1) {
       $4_1 = $6_1;
       if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$32
       }
       $6_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
       $6_1 = HEAP32[$3_1 >> 2] | 0;
       if ($6_1) {
        continue label$35
       }
       break label$35;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$31;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 97376 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 97376 | 0) >> 2] = $1_1 ? $1_1 : -1;
  }
 }
 
 function $106($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $13_1 = 0, $6$hi = 0, $8$hi = 0, $3_1 = 0, $3$hi = 0, $16_1 = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $2_1 = 0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = __wasm_i64_mul($0_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$0;
   $2_1 = i64toi32_i32$1;
   if (($1_1 | $0_1 | 0) >>> 0 < 65536 >>> 0) {
    break label$1
   }
   $16_1 = $2_1;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $13_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = ($13_1 | 0) != (0 | 0) ? -1 : $16_1;
  }
  label$3 : {
   $0_1 = $104($2_1 | 0) | 0;
   if (!$0_1) {
    break label$3
   }
   if (!((HEAPU8[($0_1 + -4 | 0) >> 0] | 0) & 3 | 0)) {
    break label$3
   }
   $117($0_1 | 0, 0 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $107($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $104($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[($65() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $108($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $104($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $116($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $105($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $8_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & -8 | 0;
  label$1 : {
   label$2 : {
    if ($2_1 & 3 | 0) {
     break label$2
    }
    label$3 : {
     if ($1_1 >>> 0 >= 256 >>> 0) {
      break label$3
     }
     return 0 | 0;
    }
    label$4 : {
     if ($3_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$4
     }
     $4_1 = $0_1;
     if (($3_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 97824 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$1
     }
    }
    return 0 | 0;
   }
   $5_1 = $0_1 + $3_1 | 0;
   label$5 : {
    label$6 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$6
     }
     $3_1 = $3_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $109($1_1 | 0, $3_1 | 0);
     break label$5;
    }
    $4_1 = 0;
    label$7 : {
     if ((HEAP32[(0 + 97368 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$7
     }
     $3_1 = (HEAP32[(0 + 97356 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 <= $1_1 >>> 0) {
      break label$1
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $2_1 = $0_1 + $1_1 | 0;
     $1_1 = $3_1 - $1_1 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 97356 | 0) >> 2] = $1_1;
     HEAP32[(0 + 97368 | 0) >> 2] = $2_1;
     break label$5;
    }
    label$8 : {
     if ((HEAP32[(0 + 97364 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$8
     }
     $4_1 = 0;
     $3_1 = (HEAP32[(0 + 97352 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$1
     }
     label$9 : {
      label$10 : {
       $4_1 = $3_1 - $1_1 | 0;
       if ($4_1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       $3_1 = $0_1 + $3_1 | 0;
       HEAP32[$3_1 >> 2] = $4_1;
       HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $3_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $3_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $4_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 97364 | 0) >> 2] = $1_1;
     HEAP32[(0 + 97352 | 0) >> 2] = $4_1;
     break label$5;
    }
    $4_1 = 0;
    $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($6_1 & 2 | 0) {
     break label$1
    }
    $7_1 = ($6_1 & -8 | 0) + $3_1 | 0;
    if ($7_1 >>> 0 < $1_1 >>> 0) {
     break label$1
    }
    $8_1 = $7_1 - $1_1 | 0;
    label$11 : {
     label$12 : {
      if ($6_1 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
      $9_1 = $6_1 >>> 3 | 0;
      $6_1 = ($9_1 << 3 | 0) + 97384 | 0;
      label$13 : {
       $4_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($4_1 | 0) != ($3_1 | 0)) {
        break label$13
       }
       HEAP32[(0 + 97344 | 0) >> 2] = (HEAP32[(0 + 97344 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
      break label$11;
     }
     $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$14 : {
      label$15 : {
       $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($5_1 | 0)) {
        break label$15
       }
       $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[(0 + 97360 | 0) >> 2] | 0;
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
       break label$14;
      }
      label$16 : {
       $3_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$16
       }
       $3_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$16
       }
       $6_1 = 0;
       break label$14;
      }
      label$17 : while (1) {
       $9_1 = $3_1;
       $6_1 = $4_1;
       $3_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        continue label$17
       }
       $3_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$17
       }
       break label$17;
      };
      HEAP32[$9_1 >> 2] = 0;
     }
     if (!$10_1) {
      break label$11
     }
     label$18 : {
      label$19 : {
       $4_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($4_1 << 2 | 0) + 97648 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
        break label$19
       }
       HEAP32[$3_1 >> 2] = $6_1;
       if ($6_1) {
        break label$18
       }
       HEAP32[(0 + 97348 | 0) >> 2] = (HEAP32[(0 + 97348 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$11
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $10_1;
     label$20 : {
      $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$20
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     $3_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$11
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
    }
    label$21 : {
     if ($8_1 >>> 0 > 15 >>> 0) {
      break label$21
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $7_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $7_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 | 3 | 0;
    $3_1 = $0_1 + $7_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $109($1_1 | 0, $8_1 | 0);
   }
   $4_1 = $0_1;
  }
  return $4_1 | 0;
 }
 
 function $109($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $7_1 = 0, $360 = 0, $367 = 0, $374 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 3 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    label$3 : {
     label$4 : {
      $0_1 = $0_1 - $3_1 | 0;
      if ((HEAP32[(0 + 97364 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
       break label$4
      }
      label$5 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$5
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $5_1 = $3_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 97384 | 0;
       $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (($3_1 | 0) != ($4_1 | 0)) {
        break label$3
       }
       HEAP32[(0 + 97344 | 0) >> 2] = (HEAP32[(0 + 97344 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($0_1 | 0)) {
         break label$7
        }
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 97360 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$6;
       }
       label$8 : {
        $3_1 = $0_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         break label$8
        }
        $3_1 = $0_1 + 16 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         break label$8
        }
        $6_1 = 0;
        break label$6;
       }
       label$9 : while (1) {
        $5_1 = $3_1;
        $6_1 = $4_1;
        $3_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         continue label$9
        }
        $3_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$9
        }
        break label$9;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$2
      }
      label$10 : {
       label$11 : {
        $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($4_1 << 2 | 0) + 97648 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
         break label$11
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$10
        }
        HEAP32[(0 + 97348 | 0) >> 2] = (HEAP32[(0 + 97348 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$2;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$2
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$12 : {
       $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$12
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$2
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      break label$2;
     }
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
      break label$2
     }
     HEAP32[(0 + 97352 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     return;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
   }
   label$13 : {
    label$14 : {
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if ((HEAP32[(0 + 97368 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$15
      }
      HEAP32[(0 + 97368 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 97356 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 97356 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      if (($0_1 | 0) != (HEAP32[(0 + 97364 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 97352 | 0) >> 2] = 0;
      HEAP32[(0 + 97364 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if ((HEAP32[(0 + 97364 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$16
      }
      HEAP32[(0 + 97364 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 97352 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 97352 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      return;
     }
     $1_1 = ($3_1 & -8 | 0) + $1_1 | 0;
     label$17 : {
      label$18 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
       $5_1 = $3_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 97384 | 0;
       label$19 : {
        $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($3_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        HEAP32[(0 + 97344 | 0) >> 2] = (HEAP32[(0 + 97344 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$21
        }
        $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 97360 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$20;
       }
       label$22 : {
        $4_1 = $2_1 + 20 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         break label$22
        }
        $4_1 = $2_1 + 16 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $4_1;
        $6_1 = $3_1;
        $4_1 = $3_1 + 20 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         continue label$23
        }
        $4_1 = $6_1 + 16 | 0;
        $3_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($3_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($4_1 << 2 | 0) + 97648 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
         break label$25
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        HEAP32[(0 + 97348 | 0) >> 2] = (HEAP32[(0 + 97348 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     if (($0_1 | 0) != (HEAP32[(0 + 97364 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 97352 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
   }
   label$27 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $3_1 = $1_1 >>> 3 | 0;
    $1_1 = ($3_1 << 3 | 0) + 97384 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 97344 | 0) >> 2] | 0;
      $3_1 = 1 << $3_1 | 0;
      if ($4_1 & $3_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 97344 | 0) >> 2] = $4_1 | $3_1 | 0;
      $3_1 = $1_1;
      break label$28;
     }
     $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    return;
   }
   $3_1 = 31;
   label$30 : {
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $3_1 = $1_1 >>> 8 | 0;
    $360 = $3_1;
    $3_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $360 << $3_1 | 0;
    $367 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $367 << $4_1 | 0;
    $374 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3_1 = (($374 << $6_1 | 0) >>> 15 | 0) - ($3_1 | $4_1 | 0 | $6_1 | 0) | 0;
    $3_1 = ($3_1 << 1 | 0 | (($1_1 >>> ($3_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   $4_1 = ($3_1 << 2 | 0) + 97648 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      $6_1 = HEAP32[(0 + 97348 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($6_1 & $2_1 | 0) {
       break label$33
      }
      HEAP32[(0 + 97348 | 0) >> 2] = $6_1 | $2_1 | 0;
      HEAP32[$4_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
      break label$32;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $6_1 = HEAP32[$4_1 >> 2] | 0;
     label$34 : while (1) {
      $4_1 = $6_1;
      if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$31
      }
      $6_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $110() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function $111($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[(0 + 93388 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 3 | 0) & -4 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    if ($0_1 >>> 0 <= $1_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= ($110() | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$0($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 93388 | 0) >> 2] = $0_1;
   return $1_1 | 0;
  }
  HEAP32[($65() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function $112($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $7_1 = 0, $9_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $11$hi = 0, $64_1 = 0, $6_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $70_1 = 0, $11_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $52_1 = 0, $52$hi = 0, $55$hi = 0, $57_1 = 0, $57$hi = 0, $59_1 = 0, $59$hi = 0, $60_1 = 0, $60$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $131$hi = 0, $134 = 0, $135$hi = 0, $156 = 0, $156$hi = 0, $158$hi = 0, $161 = 0, $161$hi = 0, $163$hi = 0, $175$hi = 0, $178 = 0, $179$hi = 0, $208 = 0, $208$hi = 0, $210$hi = 0, $219 = 0, $220 = 0, $220$hi = 0, $222 = 0, $222$hi = 0, $228$hi = 0, $229 = 0, $229$hi = 0, $236 = 0, $236$hi = 0, $241$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($89($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     if (!($115($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $6_1 = $64_1;
     $7_1 = $6_1 & 32767 | 0;
     if (($7_1 | 0) != (32767 | 0)) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $99($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $91($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    $52_1 = $1_1;
    $52$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $65_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $65_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $55$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $57_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $57$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $55$hi;
    i64toi32_i32$1 = $65_1;
    i64toi32_i32$3 = $57$hi;
    i64toi32_i32$0 = $57_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $9_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$3;
    $59_1 = $9_1;
    $59$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $60_1 = $3_1;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $66_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $66_1 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $8_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $67_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $67_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $67$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $69_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $69$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $67$hi;
    i64toi32_i32$2 = $67_1;
    i64toi32_i32$1 = $69$hi;
    i64toi32_i32$0 = $69_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $52$hi;
    i64toi32_i32$2 = $59$hi;
    i64toi32_i32$3 = $60$hi;
    i64toi32_i32$0 = $10$hi;
    if (($89($52_1 | 0, i64toi32_i32$1 | 0, $59_1 | 0, i64toi32_i32$2 | 0, $60_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     if (!($89($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    $99($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if (!$7_1) {
      break label$7
     }
     i64toi32_i32$0 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    $99($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $68_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $68_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7_1 = $68_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($8_1) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    $99($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $70_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $70_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $70_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $9_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$0;
   label$9 : {
    if (($7_1 | 0) <= ($8_1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$1 = $9_1;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
       $131$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $134 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $135$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $131$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $135$hi;
       i64toi32_i32$1 = $134;
       i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $71_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
          $72_1 = 0
         } else {
          $72_1 = 1
         }
         $73_1 = $72_1;
        } else {
         $73_1 = 0
        }
        $71_1 = $73_1;
       }
       if ($71_1) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        $99($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $74_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $74_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $156 = $74_1;
       $156$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $75_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $75_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       $158$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $156$hi;
       i64toi32_i32$3 = $156;
       i64toi32_i32$0 = $158$hi;
       i64toi32_i32$2 = $75_1;
       i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
       $9$hi = i64toi32_i32$0;
       break label$11;
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $76_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $76_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $161 = $76_1;
      $161$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $77_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $77_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $163$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $161$hi;
      i64toi32_i32$3 = $161;
      i64toi32_i32$0 = $163$hi;
      i64toi32_i32$2 = $77_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $9$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $78_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $78_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $78_1;
     $4$hi = i64toi32_i32$3;
     $7_1 = $7_1 + -1 | 0;
     if (($7_1 | 0) > ($8_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $7_1 = $8_1;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $175$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $178 = $4$hi >>> 0 < i64toi32_i32$0 >>> 0 | (($4$hi | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $179$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $175$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $179$hi;
     i64toi32_i32$0 = $178;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $79_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        $80_1 = 0
       } else {
        $80_1 = 1
       }
       $81_1 = $80_1;
      } else {
       $81_1 = 0
      }
      $79_1 = $81_1;
     }
     if ($79_1) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    $99($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $5_1 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $82_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $82_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $82_1;
     $3$hi = i64toi32_i32$3;
     $7_1 = $7_1 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $83_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $83_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $4_1 = $83_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $208 = $3_1;
     $208$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $84_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $84_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $210$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $208$hi;
     i64toi32_i32$1 = $208;
     i64toi32_i32$3 = $210$hi;
     i64toi32_i32$2 = $84_1;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $8_1 = $6_1 & 32768 | 0;
   label$18 : {
    if (($7_1 | 0) > (0 | 0)) {
     break label$18
    }
    $219 = $5_1 + 64 | 0;
    i64toi32_i32$0 = $4$hi;
    $220 = $4_1;
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $222 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $222$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $7_1 + 120 | 0 | $8_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $85_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $85_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $228$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $222$hi;
    i64toi32_i32$3 = $222;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$1 = $85_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $229 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $229$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $220$hi;
    i64toi32_i32$3 = $229$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1065811968;
    $99($219 | 0, $220 | 0, i64toi32_i32$0 | 0, $229 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 72 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $236 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = $7_1 | $8_1 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $86_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $86_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $241$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $236$hi;
   i64toi32_i32$2 = $236;
   i64toi32_i32$1 = $241$hi;
   i64toi32_i32$0 = $86_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $113($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $1_1 = 0, $2_1 = 0, $1$hi = 0, $6_1 = 0.0, $3_1 = 0, $7_1 = 0.0, $8_1 = 0.0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $4_1 = 0, $31_1 = 0, $5_1 = 0.0, $32_1 = 0, $9_1 = 0.0, $10_1 = 0.0, $55_1 = 0.0, $60$hi = 0, $62_1 = 0, $62$hi = 0, $85_1 = 0.0, $90_1 = 0.0, $95_1 = 0.0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       wasm2js_scratch_store_f64(+$0_1);
       i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
       $1_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
       $1$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $24_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $24_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
       }
       $2_1 = $24_1;
       if ($2_1 >>> 0 < 1048576 >>> 0) {
        break label$5
       }
       i64toi32_i32$1 = $1$hi;
       i64toi32_i32$0 = $1_1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$3 = -1;
       if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
        $25_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $26_1 = 0
         } else {
          $26_1 = 1
         }
         $27_1 = $26_1;
        } else {
         $27_1 = 0
        }
        $25_1 = $27_1;
       }
       if ($25_1) {
        break label$4
       }
      }
      label$6 : {
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$1 = 2147483647;
       i64toi32_i32$2 = -1;
       i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$6
       }
       return +(-1.0 / ($0_1 * $0_1));
      }
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$3 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
       $28_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $29_1 = 0
        } else {
         $29_1 = 1
        }
        $30_1 = $29_1;
       } else {
        $30_1 = 0
       }
       $28_1 = $30_1;
      }
      if ($28_1) {
       break label$3
      }
      return +(($0_1 - $0_1) / 0.0);
     }
     if ($2_1 >>> 0 > 2146435071 >>> 0) {
      break label$1
     }
     $3_1 = 1072693248;
     $4_1 = -1023;
     label$7 : {
      if (($2_1 | 0) == (1072693248 | 0)) {
       break label$7
      }
      $3_1 = $2_1;
      break label$2;
     }
     i64toi32_i32$2 = $1$hi;
     if ($1_1) {
      break label$2
     }
     return +(0.0);
    }
    wasm2js_scratch_store_f64(+($0_1 * 18014398509481984.0));
    i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $1_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $1$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $31_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $31_1;
    $4_1 = -1077;
   }
   $2_1 = $3_1 + 614242 | 0;
   $5_1 = +($4_1 + ($2_1 >>> 20 | 0) | 0 | 0);
   $6_1 = $5_1 * .30102999566361177;
   $55_1 = $6_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = ($2_1 & 1048575 | 0) + 1072079006 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $32_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $32_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $60$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $62_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $62$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $60$hi;
   i64toi32_i32$3 = $32_1;
   i64toi32_i32$0 = $62$hi;
   i64toi32_i32$1 = $62_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64() + -1.0;
   $7_1 = $0_1 * ($0_1 * .5);
   wasm2js_scratch_store_f64(+($0_1 - $7_1));
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
   $8_1 = +wasm2js_scratch_load_f64();
   $9_1 = $8_1 * .4342944818781689;
   $10_1 = $55_1 + $9_1;
   $85_1 = $9_1 + ($6_1 - $10_1);
   $90_1 = $0_1 - $8_1 - $7_1;
   $0_1 = $0_1 / ($0_1 + 2.0);
   $95_1 = $0_1;
   $6_1 = $0_1 * $0_1;
   $0_1 = $6_1 * $6_1;
   $0_1 = $90_1 + $95_1 * ($7_1 + ($0_1 * ($0_1 * ($0_1 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $6_1 * ($0_1 * ($0_1 * ($0_1 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735)));
   $0_1 = $10_1 + ($85_1 + ($0_1 * .4342944818781689 + ($5_1 * 3.694239077158931e-13 + ($0_1 + $8_1) * 2.5082946711645275e-11)));
  }
  return +$0_1;
 }
 
 function $114($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1_1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   label$4 : {
    if (($1_1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1_1 = $1_1 + 1022 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   $1_1 = (($1_1 | 0) > (-3066 | 0) ? $1_1 : -3066) + 2044 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $115($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $13_1 & 32767 | 0;
    if (($3_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $4_1 = 4;
    if ($3_1) {
     break label$1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4_1 | 0;
 }
 
 function $116($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$1($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0_1 & 3 | 0) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (!($2_1 & 3 | 0)) {
       break label$4
      }
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $117($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $6$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $118($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = $0_1 + $2_1 | 0;
    if (($1_1 - $3_1 | 0) >>> 0 > (0 - ($2_1 << 1 | 0) | 0) >>> 0) {
     break label$2
    }
    return $116($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
   }
   $4_1 = ($1_1 ^ $0_1 | 0) & 3 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$5
      }
      label$6 : {
       if (!$4_1) {
        break label$6
       }
       $3_1 = $0_1;
       break label$3;
      }
      label$7 : {
       if ($0_1 & 3 | 0) {
        break label$7
       }
       $3_1 = $0_1;
       break label$4;
      }
      $3_1 = $0_1;
      label$8 : while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = $3_1 + 1 | 0;
       if (!($3_1 & 3 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     label$9 : {
      if ($4_1) {
       break label$9
      }
      label$10 : {
       if (!($3_1 & 3 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 + -1 | 0;
        $3_1 = $0_1 + $2_1 | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
        if ($3_1 & 3 | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($2_1 >>> 0 <= 3 >>> 0) {
       break label$9
      }
      label$12 : while (1) {
       $2_1 = $2_1 + -4 | 0;
       HEAP32[($0_1 + $2_1 | 0) >> 2] = HEAP32[($1_1 + $2_1 | 0) >> 2] | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2_1) {
      break label$1
     }
     label$13 : while (1) {
      $2_1 = $2_1 + -1 | 0;
      HEAP8[($0_1 + $2_1 | 0) >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$1;
     };
    }
    if ($2_1 >>> 0 <= 3 >>> 0) {
     break label$3
    }
    label$14 : while (1) {
     HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$2_1) {
    break label$1
   }
   label$15 : while (1) {
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $119($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $120($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $121() {
  global$2 = 5340720;
  global$1 = (97840 + 15 | 0) & -16 | 0;
 }
 
 function $122() {
  return global$0 - global$1 | 0 | 0;
 }
 
 function $123() {
  return global$1 | 0;
 }
 
 function $124() {
  return global$0 | 0;
 }
 
 function $125($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $126($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $127($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $128($0_1 | 0) | 0 | 0;
    }
    $1_1 = $119($0_1 | 0) | 0;
    $2_1 = $128($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $120($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 97340 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $127(HEAP32[(0 + 97340 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($80() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $119($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $128($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $120($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $81();
  }
  return $2_1 | 0;
 }
 
 function $128($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140 = 0, $140$hi = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $151 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 var FUNCTION_TABLE = Table([]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": $0, 
  "rnnoise_get_size": $6, 
  "rnnoise_get_frame_size": $7, 
  "rnnoise_init": $8, 
  "rnnoise_create": $9, 
  "malloc": $104, 
  "rnnoise_destroy": $10, 
  "rnnoise_process_frame": $12, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "rnnoise_model_from_file": $51, 
  "rnnoise_model_free": $52, 
  "__errno_location": $65, 
  "fflush": $127, 
  "stackSave": $124, 
  "stackRestore": $125, 
  "stackAlloc": $126, 
  "emscripten_stack_init": $121, 
  "emscripten_stack_get_free": $122, 
  "emscripten_stack_get_end": $123
 };
}

  return asmFunc(asmLibraryArg);
}

)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  function onDone(ret) {
    if (stack !== 0) stackRestore(stack);
    return convertReturnValue(ret);
  }

  ret = onDone(ret);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.
function _free() {
  // Show a helpful error since we used to include free by default in the past.
  abort("free() called but not included in the build - add '_free' to EXPORTED_FUNCTIONS");
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u > 0x10FFFF) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;
if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) {
  Object.defineProperty(Module, 'INITIAL_MEMORY', {
    configurable: true,
    get: function() {
      abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      'maximum': INITIAL_MEMORY / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grows downwards
  HEAPU32[(max >> 2)+1] = 0x2135467;
  HEAPU32[(max >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[(max >> 2)+1];
  var cookie2 = HEAPU32[(max >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;
var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
  return noExitRuntime || runtimeKeepaliveCounter > 0;
}

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  
  callRuntimeCallbacks(__ATINIT__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  {
    if (Module['onAbort']) {
      Module['onAbort'](what);
    }
  }

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  readyPromiseReject(e);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

var memoryInitializer = "rnnoise.js.mem";

// include: memoryprofiler.js


// end include: memoryprofiler.js
// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile;
  wasmBinaryFile = 'rnnoise.wasm';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    runMemoryInitializer();

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(function (instance) {
      return instance;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);

        return result.then(
          receiveInstantiationResult,
          function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  // If instantiation fails, reject the module ready promise.
  instantiateAsync().catch(readyPromiseReject);
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function handleException(e) {
      // Certain exception types we do not treat as errors since they are used for
      // internal control flow.
      // 1. ExitStatus, which is thrown by exit()
      // 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
      //    that wish to return to JS event loop.
      if (e instanceof ExitStatus || e == 'unwind') {
        return EXITSTATUS;
      }
      quit_(1, e);
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


var asmLibraryArg = {
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "getTempRet0": getTempRet0,
  "memory": wasmMemory,
  "setTempRet0": setTempRet0
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _rnnoise_get_size = Module["_rnnoise_get_size"] = createExportWrapper("rnnoise_get_size");

/** @type {function(...*):?} */
var _rnnoise_get_frame_size = Module["_rnnoise_get_frame_size"] = createExportWrapper("rnnoise_get_frame_size");

/** @type {function(...*):?} */
var _rnnoise_init = Module["_rnnoise_init"] = createExportWrapper("rnnoise_init");

/** @type {function(...*):?} */
var _rnnoise_create = Module["_rnnoise_create"] = createExportWrapper("rnnoise_create");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var _rnnoise_destroy = Module["_rnnoise_destroy"] = createExportWrapper("rnnoise_destroy");

/** @type {function(...*):?} */
var _rnnoise_process_frame = Module["_rnnoise_process_frame"] = createExportWrapper("rnnoise_process_frame");

/** @type {function(...*):?} */
var _rnnoise_model_from_file = Module["_rnnoise_model_from_file"] = createExportWrapper("rnnoise_model_from_file");

/** @type {function(...*):?} */
var _rnnoise_model_free = Module["_rnnoise_model_free"] = createExportWrapper("rnnoise_model_free");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};





// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "keepRuntimeAlive")) Module["keepRuntimeAlive"] = function() { abort("'keepRuntimeAlive' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "zeroMemory")) Module["zeroMemory"] = function() { abort("'zeroMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() { abort("'setFileTime' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton4")) Module["inetPton4"] = function() { abort("'inetPton4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop4")) Module["inetNtop4"] = function() { abort("'inetNtop4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton6")) Module["inetPton6"] = function() { abort("'inetPton6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop6")) Module["inetNtop6"] = function() { abort("'inetNtop6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readSockaddr")) Module["readSockaddr"] = function() { abort("'readSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeSockaddr")) Module["writeSockaddr"] = function() { abort("'writeSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "handleException")) Module["handleException"] = function() { abort("'handleException' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePush")) Module["runtimeKeepalivePush"] = function() { abort("'runtimeKeepalivePush' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePop")) Module["runtimeKeepalivePop"] = function() { abort("'runtimeKeepalivePop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callUserCallback")) Module["callUserCallback"] = function() { abort("'callUserCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeExit")) Module["maybeExit"] = function() { abort("'maybeExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "safeSetTimeout")) Module["safeSetTimeout"] = function() { abort("'safeSetTimeout' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asmjsMangle")) Module["asmjsMangle"] = function() { abort("'asmjsMangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asyncLoad")) Module["asyncLoad"] = function() { abort("'asyncLoad' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignMemory")) Module["alignMemory"] = function() { abort("'alignMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketFromFD")) Module["getSocketFromFD"] = function() { abort("'getSocketFromFD' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketAddress")) Module["getSocketAddress"] = function() { abort("'getSocketAddress' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerKeyEventCallback")) Module["registerKeyEventCallback"] = function() { abort("'registerKeyEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBoundingClientRect")) Module["getBoundingClientRect"] = function() { abort("'getBoundingClientRect' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillMouseEventData")) Module["fillMouseEventData"] = function() { abort("'fillMouseEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerMouseEventCallback")) Module["registerMouseEventCallback"] = function() { abort("'registerMouseEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerWheelEventCallback")) Module["registerWheelEventCallback"] = function() { abort("'registerWheelEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerUiEventCallback")) Module["registerUiEventCallback"] = function() { abort("'registerUiEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFocusEventCallback")) Module["registerFocusEventCallback"] = function() { abort("'registerFocusEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceOrientationEventData")) Module["fillDeviceOrientationEventData"] = function() { abort("'fillDeviceOrientationEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceOrientationEventCallback")) Module["registerDeviceOrientationEventCallback"] = function() { abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceMotionEventData")) Module["fillDeviceMotionEventData"] = function() { abort("'fillDeviceMotionEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceMotionEventCallback")) Module["registerDeviceMotionEventCallback"] = function() { abort("'registerDeviceMotionEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "screenOrientation")) Module["screenOrientation"] = function() { abort("'screenOrientation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillOrientationChangeEventData")) Module["fillOrientationChangeEventData"] = function() { abort("'fillOrientationChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerOrientationChangeEventCallback")) Module["registerOrientationChangeEventCallback"] = function() { abort("'registerOrientationChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillFullscreenChangeEventData")) Module["fillFullscreenChangeEventData"] = function() { abort("'fillFullscreenChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFullscreenChangeEventCallback")) Module["registerFullscreenChangeEventCallback"] = function() { abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerRestoreOldStyle")) Module["registerRestoreOldStyle"] = function() { abort("'registerRestoreOldStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "hideEverythingExceptGivenElement")) Module["hideEverythingExceptGivenElement"] = function() { abort("'hideEverythingExceptGivenElement' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreHiddenElements")) Module["restoreHiddenElements"] = function() { abort("'restoreHiddenElements' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setLetterbox")) Module["setLetterbox"] = function() { abort("'setLetterbox' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "currentFullscreenStrategy")) Module["currentFullscreenStrategy"] = function() { abort("'currentFullscreenStrategy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreOldWindowedStyle")) Module["restoreOldWindowedStyle"] = function() { abort("'restoreOldWindowedStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "softFullscreenResizeWebGLRenderTarget")) Module["softFullscreenResizeWebGLRenderTarget"] = function() { abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "doRequestFullscreen")) Module["doRequestFullscreen"] = function() { abort("'doRequestFullscreen' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillPointerlockChangeEventData")) Module["fillPointerlockChangeEventData"] = function() { abort("'fillPointerlockChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockChangeEventCallback")) Module["registerPointerlockChangeEventCallback"] = function() { abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockErrorEventCallback")) Module["registerPointerlockErrorEventCallback"] = function() { abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requestPointerLock")) Module["requestPointerLock"] = function() { abort("'requestPointerLock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillVisibilityChangeEventData")) Module["fillVisibilityChangeEventData"] = function() { abort("'fillVisibilityChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerVisibilityChangeEventCallback")) Module["registerVisibilityChangeEventCallback"] = function() { abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerTouchEventCallback")) Module["registerTouchEventCallback"] = function() { abort("'registerTouchEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillGamepadEventData")) Module["fillGamepadEventData"] = function() { abort("'fillGamepadEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerGamepadEventCallback")) Module["registerGamepadEventCallback"] = function() { abort("'registerGamepadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBeforeUnloadEventCallback")) Module["registerBeforeUnloadEventCallback"] = function() { abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillBatteryEventData")) Module["fillBatteryEventData"] = function() { abort("'fillBatteryEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "battery")) Module["battery"] = function() { abort("'battery' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBatteryEventCallback")) Module["registerBatteryEventCallback"] = function() { abort("'registerBatteryEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setCanvasElementSize")) Module["setCanvasElementSize"] = function() { abort("'setCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCanvasElementSize")) Module["getCanvasElementSize"] = function() { abort("'getCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setImmediateWrapped")) Module["setImmediateWrapped"] = function() { abort("'setImmediateWrapped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "clearImmediateWrapped")) Module["clearImmediateWrapped"] = function() { abort("'clearImmediateWrapped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flush_NO_FILESYSTEM")) Module["flush_NO_FILESYSTEM"] = function() { abort("'flush_NO_FILESYSTEM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() { abort("'uncaughtExceptionCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "wget")) Module["wget"] = function() { abort("'wget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "_setNetworkCallback")) Module["_setNetworkCallback"] = function() { abort("'_setNetworkCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetUniformLocation")) Module["webglGetUniformLocation"] = function() { abort("'webglGetUniformLocation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglPrepareUniformLocationsBeforeFirstUse")) Module["webglPrepareUniformLocationsBeforeFirstUse"] = function() { abort("'webglPrepareUniformLocationsBeforeFirstUse' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetLeftBracePos")) Module["webglGetLeftBracePos"] = function() { abort("'webglGetLeftBracePos' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

function runMemoryInitializer() {
  if (!memoryInitializer) return
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, 1024);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[1024 + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, 1024);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        var e = new Error('could not load memory initializer ' + memoryInitializer);
          readyPromiseReject(e);
      });
    };
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  _emscripten_stack_init();
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    readyPromiseResolve(Module);
    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = null;
    if (flush) flush();
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  EXITSTATUS = status;

  checkUnflushedContent();

  if (keepRuntimeAlive()) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      readyPromiseReject(msg);
      err(msg);
    }
  } else {
    exitRuntime();
  }

  procExit(status);
}

function procExit(code) {
  EXITSTATUS = code;
  if (!keepRuntimeAlive()) {
    if (Module['onExit']) Module['onExit'](code);
    ABORT = true;
  }
  quit_(code, new ExitStatus(code));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();







  return NoiseModule.ready
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
  module.exports = NoiseModule;
else if (typeof define === 'function' && define['amd'])
  define([], function() { return NoiseModule; });
else if (typeof exports === 'object')
  exports["NoiseModule"] = NoiseModule;
